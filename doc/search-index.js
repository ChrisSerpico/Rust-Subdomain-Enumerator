var searchIndex = {};
searchIndex["subdomain_enumerator"] = {"doc":"","items":[[0,"enumerator","subdomain_enumerator","A subdomain enumerator. Finds subdomains of a given subdomain by querying a public dataset (virustotal.com). ",null,null],[5,"query_database","subdomain_enumerator::enumerator","Takes a domain, a store, and a limit. Queries virustotal.com with the domain, and returns as many subdomains as it finds or as many fit in the limit.  Please note that virustotal, the database we query, will not accept a limit greater than 35. Thus this function will always limit itself to 35 at most. ",null,{"inputs":[{"name":"string"},{"generics":["mutex"],"name":"arc"},{"name":"usize"}],"output":null}],[0,"library_enumerator","subdomain_enumerator","Contains code for a subdomain enumerator that finds subdomain by trying subdomains generated with a library of common words.",null,null],[5,"enumerate","subdomain_enumerator::library_enumerator","Takes a domain, a library, a store, and a thread pool. For each word supplied in library, checkes to see whether the word specifies a subdomain of domain. If it does, the found subdomain is added to store.  The thread pool is used to concurrently check possible subdomains. This means that this function should be somewhat efficient even with large libraries. ",null,{"inputs":[{"name":"string"},{"name":"string"},{"generics":["mutex"],"name":"arc"},{"name":"threadpool"}],"output":null}],[0,"query","subdomain_enumerator","",null,null],[3,"Query","subdomain_enumerator::query","Represents a user supplied query, where domains is the list of domains that will have their subdomains enumerated and library is a wordlist supplied for library enumeration.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"query"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"add_domain","","Add a domain (as a string) to be enumerated. ",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"add_domains","","Add multiple domains (as a vector of strings) to be enumerated. ",0,{"inputs":[{"name":"self"},{"generics":["string"],"name":"vec"}],"output":null}],[11,"set_library","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"set_limit","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"enumerate","","Performs subdomain enumeration on all domains held in the domains variable. The found subdomains will be returned collectively in a single Results object. If a library is supplied, then both library enumeration and a database query will be performed. If no library is supplied, then only a database query will be performed. ",0,{"inputs":[{"name":"self"}],"output":{"name":"results"}}],[0,"results","subdomain_enumerator","",null,null],[3,"Results","subdomain_enumerator::results","A struct holding results of a subdomain enumeration.  domain_list is the list of original domains that were supplied, eg \"Facebook.com\".  store holds the subdomains found for each supplied domain, eg \"messenger.facebook.com\". ",null,null],[12,"domains","","",1,null],[12,"store","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"results"}}],[11,"new","","",1,{"inputs":[{"name":"usize"},{"generics":["string"],"name":"vec"}],"output":{"name":"self"}}],[11,"print_subdomains","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Query"],[3,"Results"]]};
initSearch(searchIndex);
