var searchIndex = {};
searchIndex["adler32"] = {"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",null,null],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",null,{"inputs":[{"name":"r"}],"output":{"generics":["u32"],"name":"result"}}],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,{"inputs":[],"output":{"name":"rollingadler32"}}],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,{"inputs":[{"name":"u32"}],"output":{"name":"rollingadler32"}}],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,null],[11,"hash","","Returns the current hash.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,null]],"paths":[[3,"RollingAdler32"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[12,"foreground","","The style's foreground colour, if it has one.",0,null],[12,"background","","The style's background colour, if it has one.",0,null],[12,"is_bold","","Whether this style is bold.",0,null],[12,"is_dimmed","","Whether this style is dimmed.",0,null],[12,"is_italic","","Whether this style is italic.",0,null],[12,"is_underline","","Whether this style is underlined.",0,null],[12,"is_blink","","Whether this style is blinking.",0,null],[12,"is_reverse","","Whether this style has reverse colours.",0,null],[12,"is_hidden","","Whether this style is hidden.",0,null],[12,"is_strikethrough","","Whether this style is struckthrough.",0,null],[3,"ANSIGenericString","","An `ANSIGenericString` includes a generic string type and a `Style` to display that string.  `ANSIString` and `ANSIByteString` are aliases for this type on `str` and `[u8]`, respectively.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",1,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[5,"ANSIStrings","","A function to construct an `ANSIStrings` instance.",null,null],[5,"ANSIByteStrings","","A function to construct an `ANSIByteStrings` instance.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"infix"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"prefix","","The prefix for this style.",0,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this style and another.",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this style.",0,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"prefix","","The prefix for this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this colour and another.",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Creates a new Style with no differences.",0,{"inputs":[],"output":{"name":"style"}}],[11,"bold","","Returns a `Style` with the bold property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a `Style` with the dimmed property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a `Style` with the italic property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a `Style` with the underline property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a `Style` with the blink property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a `Style` with the reverse property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a `Style` with the hidden property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a `Style` with the hidden property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fg","","Returns a `Style` with the foreground colour property set.",0,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a `Style` with the background colour property set.",0,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"normal","","Return a `Style` with the foreground colour set to this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"bold","","Returns a `Style` with the bold property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a `Style` with the dimmed property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a `Style` with the italic property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a `Style` with the underline property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a `Style` with the blink property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a `Style` with the reverse property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a `Style` with the hidden property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a `Style` with the strikethrough property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"on","","Returns a `Style` with the background colour property set.",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ansigenericstring"}}],[11,"from","","",6,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"ANSIString","","An ANSI String is a string coupled with the `Style` to display it in a terminal.",null,null],[6,"ANSIByteString","","An `ANSIByteString` represents a formatted series of bytes.  Use `ANSIByteString` when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write an `ANSIByteString` to an `io::Write`.  This writes the escape sequences for the associated `Style` around the bytes.",8,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write `ANSIByteStrings` to an `io::Write`.  This writes the minimal escape sequences for the associated `Style`s around each set of bytes.",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"inputs":[{"name":"a"}],"output":{"generics":["utf8error"],"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"try_push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"clear","","Make the string empty.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings’s length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"inputs":[{"name":"t"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Remove all elements in the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Return an empty array",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["base64"] = {"doc":"Configs","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",null,null],[4,"DecodeError","","Errors that can occur while decoding.",null,null],[13,"InvalidByte","","An invalid byte was found in the input. The offset and offending byte are provided.",0,null],[13,"InvalidLength","","The length of the input is invalid.",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[13,"Crypt","","The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`)",1,null],[4,"LineEnding","","Line ending used in optional line wrapping.",null,null],[13,"LF","","Unix-style \\n",2,null],[13,"CRLF","","Windows-style \\r\\n",2,null],[4,"LineWrap","","Line wrap configuration.",null,null],[13,"NoWrap","","Don't wrap.",3,null],[13,"Wrap","","Wrap lines with the specified length and line ending. The length must be > 0.",3,null],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"name":"string"}}],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed.",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"string"}],"output":null}],[5,"encode_config_slice","","Encode arbitrary octets as base64. Writes into the supplied output buffer.",null,null],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec","decodeerror"],"name":"result"}}],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"generics":["vec","decodeerror"],"name":"result"}}],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"vec"}],"output":{"generics":["decodeerror"],"name":"result"}}],[5,"decode_config_slice","","Decode the input into the provided output slice.",null,null],[0,"display","","Enables base64'd output anywhere you might use a `Display` implementation, like a format string.",null,null],[3,"Base64Display","base64::display","A convenience wrapper for base64'ing bytes into a format string without heap allocation.",null,null],[4,"DisplayError","","Errors that can occur initializing a Base64Display.",null,null],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (currently capped at 1024, subject to change).",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"displayerror"}],"output":{"name":"bool"}}],[11,"with_config","","Create a `Base64Display` with the provided config.",5,null],[11,"standard","","Convenience method for creating a `Base64Display` with the `STANDARD` configuration.",5,null],[11,"url_safe","","Convenience method for creating a `Base64Display` with the `URL_SAFE` configuration.",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","base64","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[17,"STANDARD","","Standard character set with padding.",null,null],[17,"STANDARD_NO_PAD","","Standard character set without padding.",null,null],[17,"MIME","","As per standards for MIME encoded messages",null,null],[17,"URL_SAFE","","URL-safe character set with padding",null,null],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",null,null],[17,"CRYPT","","As per `crypt(3)` requirements",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lineending"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"linewrap"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Config`.",6,{"inputs":[{"name":"characterset"},{"name":"bool"},{"name":"bool"},{"name":"linewrap"}],"output":{"name":"config"}}]],"paths":[[4,"DecodeError"],[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DisplayError"],[3,"Base64Display"],[3,"Config"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"] = {"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[3,"Bytes","","A reference counted contiguous slice of memory.",null,null],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",null,null],[0,"buf","","Utilities for working with buffers.",null,null],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",null,null],[3,"Iter","","Iterator over the bytes contained by the buffer.",null,null],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",null,null],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",null,null],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",null,null],[11,"from_buf","bytes","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_buf","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","bytes::buf","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Chain` sequencing the provided values.",3,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"chain"}}],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",3,null],[11,"remaining","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",3,null],[11,"advance","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_vec","","",3,null],[11,"remaining_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes_mut","","",3,null],[11,"advance_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_vec_mut","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"read","","",5,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"limit","","Returns the maximum number of bytes that can be read.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remaining","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","","Advance the internal cursor of the Buf",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[8,"FromBuf","","Conversion from a [`Buf`]",null,null],[10,"from_buf","","Creates a value from a buffer.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoBuf","","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"new","","Creates a new empty `Bytes`.",1,{"inputs":[],"output":{"name":"bytes"}}],[11,"from_static","","Creates a new `Bytes` from a static slice.",1,null],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_to","","Splits the bytes into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Clears the buffer, removing all data.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bytesmut","bytes"],"name":"result"}}],[11,"extend_from_slice","","Appends given bytes to this object.",1,null],[11,"into_buf","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"as_ref","","",1,null],[11,"deref","","",1,null],[11,"from","","",1,{"inputs":[{"name":"bytesmut"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"bytes"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from_iter","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"bytes"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",1,null],[11,"into_iter","","",1,null],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",2,{"inputs":[{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"new","","Creates a new `BytesMut` with default capacity.",2,{"inputs":[],"output":{"name":"bytesmut"}}],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"freeze","","Converts `self` into an immutable `Bytes`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesmut"}}],[11,"split_to","","Splits the buffer into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Clears the buffer, removing all data.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Sets the length of the buffer.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"extend_from_slice","","Appends given bytes to this object.",2,null],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":null}],[11,"remaining_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_mut","","",2,null],[11,"put_slice","","",2,null],[11,"put_u8","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"into_buf","","",2,null],[11,"as_ref","","",2,null],[11,"deref","","",2,null],[11,"as_mut","","",2,null],[11,"deref_mut","","",2,null],[11,"from","","",2,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesmut"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"bytesmut"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",2,null],[11,"borrow_mut","","",2,null],[11,"write_str","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","",2,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesmut"}}],[11,"into_iter","","",2,null],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","bytes","Advance the internal cursor of the Buf",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[8,"IntoBuf","bytes","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"default","","",12,{"inputs":[],"output":{"name":"bigendian"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"littleendian"}}],[11,"hash","","",13,null],[11,"hash","","",12,null],[11,"read_u16","","",13,null],[11,"read_u32","","",13,null],[11,"read_u64","","",13,null],[11,"read_uint","","",13,null],[11,"write_u16","","",13,null],[11,"write_u32","","",13,null],[11,"write_u64","","",13,null],[11,"write_uint","","",13,null],[11,"read_u16_into","","",13,null],[11,"read_u32_into","","",13,null],[11,"read_u64_into","","",13,null],[11,"write_u16_into","","",13,null],[11,"write_u32_into","","",13,null],[11,"write_u64_into","","",13,null],[11,"from_slice_u16","","",13,null],[11,"from_slice_u32","","",13,null],[11,"from_slice_u64","","",13,null],[11,"from_slice_f32","","",13,null],[11,"from_slice_f64","","",13,null],[11,"read_u16","","",12,null],[11,"read_u32","","",12,null],[11,"read_u64","","",12,null],[11,"read_uint","","",12,null],[11,"write_u16","","",12,null],[11,"write_u32","","",12,null],[11,"write_u64","","",12,null],[11,"write_uint","","",12,null],[11,"read_u16_into","","",12,null],[11,"read_u32_into","","",12,null],[11,"read_u64_into","","",12,null],[11,"write_u16_into","","",12,null],[11,"write_u32_into","","",12,null],[11,"write_u64_into","","",12,null],[11,"from_slice_u16","","",12,null],[11,"from_slice_u32","","",12,null],[11,"from_slice_u64","","",12,null],[11,"from_slice_f32","","",12,null],[11,"from_slice_f64","","",12,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}]],"paths":[[8,"ByteOrder"],[3,"Bytes"],[3,"BytesMut"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["clap"] = {"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formatted error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should not be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimiter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,null],[13,"RequireEquals","","Require options use `--option=val` syntax",1,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,null],[13,"HideDefaultValue","","Hides the default value from the help string",1,null],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",1,null],[13,"HideEnvValues","","Hides ENV values in the help message",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,null],[13,"AllArgsOverrideSelf","","Essentially sets [`Arg::overrides_with(\"itself\")`] for all arguments.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,null],[13,"AllowMissingPositional","","Allows one to implement two styles of CLIs where positionals can be used out of order.",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcomands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independent version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'suggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,null],[13,"PowerShell","","Generates a completion file for PowerShell",4,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"appsettings"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"get_name","","Get the name of the app",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_bin_name","","Get the name of the binary",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilities",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,{"inputs":[{"name":"self"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,{"inputs":[{"name":"self"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"t"}],"output":null}],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"w"}],"output":null}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,{"inputs":[{"name":"self"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"arg"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,null],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,null],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["str"],"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["osstr"],"name":"option"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,null],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,null],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",6,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"raw","","Indicates that all parameters passed after this should not be parsed individually, but rather passed in their entirety. It is worth noting that setting this requires all values to come after a `--` to indicate they should all be captured. For example:",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["str"],"name":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["cow"],"name":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["values"],"name":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["vec"],"name":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["osvalues"],"name":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u64"}}],[11,"index_of","","Gets the starting index of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["usize"],"name":"option"}}],[11,"indices_of","","Gets all indices of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["indices"],"name":"option"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["argmatches"],"name":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"osvalues"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"subcommand"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to this group by name",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"argsettings"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"with_description","","Create an error with a custom description.",0,{"inputs":[{"name":"str"},{"name":"errorkind"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"shell"}}],[11,"variants","","A list of possible variants in `&'static str` form",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","Short hand for [`Result`] type",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["core_foundation"] = {"doc":"","items":[[0,"date","core_foundation","",null,null],[6,"CFTimeInterval","core_foundation::date","",null,null],[6,"CFAbsoluteTime","","",null,null],[5,"CFAbsoluteTimeGetCurrent","","",null,{"inputs":[],"output":{"name":"f64"}}],[0,"array","core_foundation","Heterogeneous immutable arrays.",null,null],[6,"CFIndex","core_foundation::array","",null,null],[5,"CFRelease","","",null,null],[3,"CFArray","","A heterogeneous immutable array.",null,null],[3,"CFArrayIterator","","",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_concrete_TypeRef","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cfarrayref"}}],[11,"wrap_under_get_rule","","",0,{"inputs":[{"name":"cfarrayref"}],"output":{"name":"cfarray"}}],[11,"as_CFTypeRef","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",0,{"inputs":[{"name":"cfarrayref"}],"output":{"name":"cfarray"}}],[11,"type_id","","",0,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"from_CFTypes","","Creates a new `CFArray` with the given elements, which must be `CFType` objects.",0,null],[11,"iter","","Iterates over the elements of this `CFArray`.",0,{"inputs":[{"name":"self"}],"output":{"name":"cfarrayiterator"}}],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cfindex"}}],[11,"get","","",0,null],[11,"get_values","","",0,{"inputs":[{"name":"self"},{"name":"cfrange"}],"output":{"name":"vec"}}],[11,"get_all_values","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"base","core_foundation","",null,null],[3,"CFType","core_foundation::base","Superclass of all Core Foundation objects.",null,null],[8,"CFIndexConvertible","","",null,null],[10,"to_CFIndex","","Always use this method to construct a `CFIndex` value. It performs bounds checking to ensure the value is in range.",2,{"inputs":[{"name":"self"}],"output":{"name":"cfindex"}}],[8,"TCFType","","All Core Foundation types implement this trait. The type parameter `TypeRef` specifies the associated Core Foundation type: e.g. for `CFType` this is `CFTypeRef`; for `CFArray` this is `CFArrayRef`.",null,null],[10,"as_concrete_TypeRef","","Returns the object as its concrete TypeRef.",3,{"inputs":[{"name":"self"}],"output":{"name":"concretetyperef"}}],[10,"wrap_under_create_rule","","Returns an instance of the object, wrapping the underlying `CFTypeRef` subclass. Use this when following Core Foundation's \"Create Rule\". The reference count is not bumped.",3,{"inputs":[{"name":"concretetyperef"}],"output":{"name":"self"}}],[10,"type_id","","Returns the type ID for this class.",3,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"as_CFType","","Returns the object as a wrapped `CFType`. The reference count is incremented by one.",3,{"inputs":[{"name":"self"}],"output":{"name":"cftype"}}],[10,"as_CFTypeRef","","Returns the object as a raw `CFTypeRef`. The reference count is not adjusted.",3,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[10,"wrap_under_get_rule","","Returns an instance of the object, wrapping the underlying `CFTypeRef` subclass. Use this when following Core Foundation's \"Get Rule\". The reference count is bumped.",3,{"inputs":[{"name":"concretetyperef"}],"output":{"name":"self"}}],[11,"retain_count","","Returns the reference count of the object. It is unwise to do anything other than test whether the return value of this method is greater than zero.",3,{"inputs":[{"name":"self"}],"output":{"name":"cfindex"}}],[11,"type_of","","Returns the type ID of this object.",3,{"inputs":[{"name":"self"}],"output":{"name":"cftypeid"}}],[11,"show","","Writes a debugging version of this object on standard error.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"instance_of","","Returns true if this value is an instance of another type.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"cftype"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",4,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_get_rule","","",4,{"inputs":[{"name":"cftyperef"}],"output":{"name":"cftype"}}],[11,"as_CFTypeRef","","",4,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",4,{"inputs":[{"name":"cftyperef"}],"output":{"name":"cftype"}}],[11,"type_id","","",4,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"instance_of","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"boolean","core_foundation","A Boolean type.",null,null],[6,"CFBooleanRef","core_foundation::boolean","",null,null],[5,"CFBooleanGetTypeID","","",null,{"inputs":[],"output":{"name":"u64"}}],[7,"kCFBooleanTrue","","",null,null],[7,"kCFBooleanFalse","","",null,null],[3,"CFBoolean","","A Boolean type.",null,null],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",5,{"inputs":[{"name":"self"}],"output":{"name":"cfbooleanref"}}],[11,"wrap_under_get_rule","","",5,{"inputs":[{"name":"cfbooleanref"}],"output":{"name":"cfboolean"}}],[11,"as_CFTypeRef","","",5,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",5,{"inputs":[{"name":"cfbooleanref"}],"output":{"name":"cfboolean"}}],[11,"type_id","","",5,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"true_value","","",5,{"inputs":[],"output":{"name":"cfboolean"}}],[11,"false_value","","",5,{"inputs":[],"output":{"name":"cfboolean"}}],[0,"data","core_foundation","Core Foundation byte buffers.",null,null],[3,"CFData","core_foundation::data","A byte buffer.",null,null],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",6,{"inputs":[{"name":"self"}],"output":{"name":"cfdataref"}}],[11,"wrap_under_get_rule","","",6,{"inputs":[{"name":"cfdataref"}],"output":{"name":"cfdata"}}],[11,"as_CFTypeRef","","",6,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",6,{"inputs":[{"name":"cfdataref"}],"output":{"name":"cfdata"}}],[11,"type_id","","",6,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"from_buffer","","",6,null],[11,"bytes","","Returns a pointer to the underlying bytes in this data. Note that this byte buffer is read-only.",6,null],[11,"len","","Returns the length of this byte buffer.",6,{"inputs":[{"name":"self"}],"output":{"name":"cfindex"}}],[11,"deref","","",6,null],[0,"dictionary","core_foundation","Dictionaries of key-value pairs.",null,null],[3,"CFDictionary","core_foundation::dictionary","An immutable dictionary of key-value pairs.",null,null],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",7,{"inputs":[{"name":"self"}],"output":{"name":"cfdictionaryref"}}],[11,"wrap_under_get_rule","","",7,{"inputs":[{"name":"cfdictionaryref"}],"output":{"name":"cfdictionary"}}],[11,"as_CFTypeRef","","",7,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",7,{"inputs":[{"name":"cfdictionaryref"}],"output":{"name":"cfdictionary"}}],[11,"type_id","","",7,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"from_CFType_pairs","","",7,null],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_key","","",7,null],[11,"find","","",7,null],[11,"get","","",7,null],[11,"get_CFType","","A convenience function to retrieve `CFType` instances.",7,null],[11,"set_value","","",7,null],[11,"get_keys_and_values","","",7,null],[0,"error","core_foundation","Core Foundation errors.",null,null],[3,"CFError","core_foundation::error","An error value.",null,null],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",8,{"inputs":[{"name":"self"}],"output":{"name":"cferrorref"}}],[11,"wrap_under_get_rule","","",8,{"inputs":[{"name":"cferrorref"}],"output":{"name":"cferror"}}],[11,"as_CFTypeRef","","",8,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",8,{"inputs":[{"name":"cferrorref"}],"output":{"name":"cferror"}}],[11,"type_id","","",8,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"domain","","Returns a string identifying the domain with which this error is associated.",8,{"inputs":[{"name":"self"}],"output":{"name":"cfstring"}}],[11,"code","","Returns the code identifying this type of error.",8,{"inputs":[{"name":"self"}],"output":{"name":"cfindex"}}],[11,"description","","Returns a human-presentable description of the error.",8,{"inputs":[{"name":"self"}],"output":{"name":"cfstring"}}],[0,"number","core_foundation","Immutable numbers.",null,null],[3,"CFNumber","core_foundation::number","An immutable numeric value.",null,null],[5,"number","","A convenience function to create CFNumbers.",null,{"inputs":[{"name":"i64"}],"output":{"name":"cfnumber"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cfnumberref"}}],[11,"wrap_under_get_rule","","",9,{"inputs":[{"name":"cfnumberref"}],"output":{"name":"cfnumber"}}],[11,"as_CFTypeRef","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",9,{"inputs":[{"name":"cfnumberref"}],"output":{"name":"cfnumber"}}],[11,"type_id","","",9,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"from_i32","","",9,{"inputs":[{"name":"i32"}],"output":{"name":"cfnumber"}}],[11,"to_i64","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_f64","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",9,{"inputs":[{"name":"i64"}],"output":{"name":"cfnumber"}}],[11,"from_f64","","",9,{"inputs":[{"name":"f64"}],"output":{"name":"cfnumber"}}],[0,"set","core_foundation","An immutable bag of elements.",null,null],[3,"CFSet","core_foundation::set","An immutable bag of elements.",null,null],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cfsetref"}}],[11,"wrap_under_get_rule","","",10,{"inputs":[{"name":"cfsetref"}],"output":{"name":"cfset"}}],[11,"as_CFTypeRef","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",10,{"inputs":[{"name":"cfsetref"}],"output":{"name":"cfset"}}],[11,"type_id","","",10,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"from_slice","","Creates a new set from a list of `CFType` instances.",10,null],[0,"string","core_foundation","Immutable strings.",null,null],[3,"CFString","core_foundation::string","An immutable string in one of a variety of encodings.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"cfstring"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",11,{"inputs":[{"name":"self"}],"output":{"name":"cfstringref"}}],[11,"wrap_under_get_rule","","",11,{"inputs":[{"name":"cfstringref"}],"output":{"name":"cfstring"}}],[11,"as_CFTypeRef","","",11,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",11,{"inputs":[{"name":"cfstringref"}],"output":{"name":"cfstring"}}],[11,"type_id","","",11,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"from_str","","See also CFString::new for a variant of this which does not return a Result",11,{"inputs":[{"name":"str"}],"output":{"generics":["cfstring"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `CFString` instance from a Rust string.",11,{"inputs":[{"name":"str"}],"output":{"name":"cfstring"}}],[11,"from_static_string","","Like `CFString::new`, but references a string that can be used as a backing store by virtue of being statically allocated.",11,{"inputs":[{"name":"str"}],"output":{"name":"cfstring"}}],[11,"char_len","","Returns the number of characters in the string.",11,{"inputs":[{"name":"self"}],"output":{"name":"cfindex"}}],[0,"url","core_foundation","A URL type for Core Foundation.",null,null],[3,"CFURL","core_foundation::url","",null,null],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",12,{"inputs":[{"name":"self"}],"output":{"name":"cfurlref"}}],[11,"wrap_under_get_rule","","",12,{"inputs":[{"name":"cfurlref"}],"output":{"name":"cfurl"}}],[11,"as_CFTypeRef","","",12,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",12,{"inputs":[{"name":"cfurlref"}],"output":{"name":"cfurl"}}],[11,"type_id","","",12,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_file_system_path","","",12,{"inputs":[{"name":"cfstring"},{"name":"cfurlpathstyle"},{"name":"bool"}],"output":{"name":"cfurl"}}],[11,"get_string","","",12,{"inputs":[{"name":"self"}],"output":{"name":"cfstring"}}],[0,"bundle","core_foundation","Core Foundation Bundle Type",null,null],[3,"CFBundle","core_foundation::bundle","A Bundle type.",null,null],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"main_bundle","","",13,{"inputs":[],"output":{"name":"cfbundle"}}],[11,"info_dictionary","","",13,{"inputs":[{"name":"self"}],"output":{"name":"cfdictionary"}}],[11,"as_concrete_TypeRef","","",13,{"inputs":[{"name":"self"}],"output":{"name":"cfbundleref"}}],[11,"wrap_under_get_rule","","",13,{"inputs":[{"name":"cfbundleref"}],"output":{"name":"cfbundle"}}],[11,"as_CFTypeRef","","",13,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",13,{"inputs":[{"name":"cfbundleref"}],"output":{"name":"cfbundle"}}],[11,"type_id","","",13,{"inputs":[],"output":{"name":"cftypeid"}}],[0,"propertylist","core_foundation","Core Foundation property lists",null,null],[5,"create_with_data","core_foundation::propertylist","",null,{"inputs":[{"name":"cfdata"},{"name":"cfpropertylistmutabilityoptions"}],"output":{"generics":["cferror"],"name":"result"}}],[5,"create_data","","",null,null],[0,"runloop","core_foundation","",null,null],[3,"CFRunLoop","core_foundation::runloop","",null,null],[3,"CFRunLoopTimer","","",null,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",14,{"inputs":[{"name":"self"}],"output":{"name":"cfrunloopref"}}],[11,"wrap_under_get_rule","","",14,{"inputs":[{"name":"cfrunloopref"}],"output":{"name":"cfrunloop"}}],[11,"as_CFTypeRef","","",14,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",14,{"inputs":[{"name":"cfrunloopref"}],"output":{"name":"cfrunloop"}}],[11,"type_id","","",14,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"get_current","","",14,{"inputs":[],"output":{"name":"cfrunloop"}}],[11,"get_main","","",14,{"inputs":[],"output":{"name":"cfrunloop"}}],[11,"run_current","","",14,{"inputs":[],"output":null}],[11,"stop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"current_mode","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"contains_timer","","",14,{"inputs":[{"name":"self"},{"name":"cfrunlooptimer"},{"name":"cfstringref"}],"output":{"name":"bool"}}],[11,"add_timer","","",14,{"inputs":[{"name":"self"},{"name":"cfrunlooptimer"},{"name":"cfstringref"}],"output":null}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",15,{"inputs":[{"name":"self"}],"output":{"name":"cfrunlooptimerref"}}],[11,"wrap_under_get_rule","","",15,{"inputs":[{"name":"cfrunlooptimerref"}],"output":{"name":"cfrunlooptimer"}}],[11,"as_CFTypeRef","","",15,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",15,{"inputs":[{"name":"cfrunlooptimerref"}],"output":{"name":"cfrunlooptimer"}}],[11,"type_id","","",15,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"new","","",15,null],[14,"impl_TCFType","core_foundation","",null,null]],"paths":[[3,"CFArray"],[3,"CFArrayIterator"],[8,"CFIndexConvertible"],[8,"TCFType"],[3,"CFType"],[3,"CFBoolean"],[3,"CFData"],[3,"CFDictionary"],[3,"CFError"],[3,"CFNumber"],[3,"CFSet"],[3,"CFString"],[3,"CFURL"],[3,"CFBundle"],[3,"CFRunLoop"],[3,"CFRunLoopTimer"]]};
searchIndex["core_foundation_sys"] = {"doc":"","items":[[0,"array","core_foundation_sys","",null,null],[3,"CFArrayCallBacks","core_foundation_sys::array","",null,null],[12,"version","","",0,null],[12,"retain","","",0,null],[12,"release","","",0,null],[12,"copyDescription","","",0,null],[12,"equal","","",0,null],[3,"__CFArray","","",null,null],[7,"kCFTypeArrayCallBacks","","",null,null],[5,"CFArrayCreate","","",null,null],[5,"CFArrayCreateCopy","","",null,null],[5,"CFArrayGetCount","","",null,null],[5,"CFArrayGetValues","","",null,null],[5,"CFArrayGetValueAtIndex","","",null,null],[5,"CFArrayGetTypeID","","",null,null],[6,"CFArrayRetainCallBack","","FIXME(pcwalton): This is wrong.",null,null],[6,"CFArrayReleaseCallBack","","FIXME(pcwalton): This is wrong.",null,null],[6,"CFArrayCopyDescriptionCallBack","","FIXME(pcwalton): This is wrong.",null,null],[6,"CFArrayEqualCallBack","","FIXME(pcwalton): This is wrong.",null,null],[6,"CFArrayRef","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cfarraycallbacks"}}],[0,"base","core_foundation_sys","",null,null],[3,"CFRange","core_foundation_sys::base","",null,null],[12,"location","","",1,null],[12,"length","","",1,null],[7,"kCFAllocatorDefault","","",null,null],[7,"kCFAllocatorSystemDefault","","",null,null],[7,"kCFAllocatorMalloc","","",null,null],[7,"kCFAllocatorMallocZone","","",null,null],[7,"kCFAllocatorNull","","",null,null],[7,"kCFAllocatorUseContext","","",null,null],[7,"kCFNull","","",null,null],[5,"CFEqual","","",null,null],[5,"CFGetRetainCount","","",null,null],[5,"CFGetTypeID","","",null,null],[5,"CFHash","","",null,null],[5,"CFRelease","","",null,null],[5,"CFRetain","","",null,null],[5,"CFShow","","",null,null],[6,"Boolean","","",null,null],[6,"CFIndex","","",null,null],[6,"mach_port_t","","",null,null],[6,"CFAllocatorRef","","",null,null],[6,"CFNullRef","","",null,null],[6,"CFHashCode","","",null,null],[6,"CFTypeID","","",null,null],[6,"CFTypeRef","","",null,null],[6,"CFOptionFlags","","",null,null],[6,"OSStatus","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"cfrange"}}],[11,"init","","",1,{"inputs":[{"name":"cfindex"},{"name":"cfindex"}],"output":{"name":"cfrange"}}],[0,"bundle","core_foundation_sys","",null,null],[3,"__CFBundle","core_foundation_sys::bundle","",null,null],[5,"CFBundleGetBundleWithIdentifier","","",null,null],[5,"CFBundleGetFunctionPointerForName","","",null,null],[5,"CFBundleGetMainBundle","","",null,null],[5,"CFBundleGetInfoDictionary","","",null,null],[5,"CFBundleGetTypeID","","",null,null],[6,"CFBundleRef","","",null,null],[0,"data","core_foundation_sys","",null,null],[3,"__CFData","core_foundation_sys::data","",null,null],[5,"CFDataCreate","","",null,null],[5,"CFDataGetBytePtr","","",null,null],[5,"CFDataGetLength","","",null,null],[5,"CFDataGetTypeID","","",null,null],[6,"CFDataRef","","",null,null],[0,"date","core_foundation_sys","",null,null],[5,"CFAbsoluteTimeGetCurrent","core_foundation_sys::date","",null,null],[6,"CFTimeInterval","","",null,null],[6,"CFAbsoluteTime","","",null,null],[0,"dictionary","core_foundation_sys","",null,null],[3,"CFDictionaryKeyCallBacks","core_foundation_sys::dictionary","",null,null],[12,"version","","",2,null],[12,"retain","","",2,null],[12,"release","","",2,null],[12,"copyDescription","","",2,null],[12,"equal","","",2,null],[12,"hash","","",2,null],[3,"CFDictionaryValueCallBacks","","",null,null],[12,"version","","",3,null],[12,"retain","","",3,null],[12,"release","","",3,null],[12,"copyDescription","","",3,null],[12,"equal","","",3,null],[3,"__CFDictionary","","",null,null],[7,"kCFTypeDictionaryKeyCallBacks","","",null,null],[7,"kCFTypeDictionaryValueCallBacks","","",null,null],[5,"CFDictionaryContainsKey","","",null,null],[5,"CFDictionaryCreate","","",null,null],[5,"CFDictionaryGetCount","","",null,null],[5,"CFDictionaryGetTypeID","","",null,null],[5,"CFDictionaryGetValueIfPresent","","",null,null],[5,"CFDictionaryApplyFunction","","",null,null],[5,"CFDictionarySetValue","","",null,null],[5,"CFDictionaryGetKeysAndValues","","",null,null],[6,"CFDictionaryApplierFunction","","",null,null],[6,"CFDictionaryCopyDescriptionCallBack","","",null,null],[6,"CFDictionaryEqualCallBack","","",null,null],[6,"CFDictionaryHashCallBack","","",null,null],[6,"CFDictionaryReleaseCallBack","","",null,null],[6,"CFDictionaryRetainCallBack","","",null,null],[6,"CFDictionaryRef","","",null,null],[6,"CFMutableDictionaryRef","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cfdictionarykeycallbacks"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cfdictionaryvaluecallbacks"}}],[0,"error","core_foundation_sys","",null,null],[3,"__CFError","core_foundation_sys::error","",null,null],[5,"CFErrorGetTypeID","","",null,null],[7,"kCFErrorDomainPOSIX","","",null,null],[7,"kCFErrorDomainOSStatus","","",null,null],[7,"kCFErrorDomainMach","","",null,null],[7,"kCFErrorDomainCocoa","","",null,null],[5,"CFErrorGetDomain","","",null,null],[5,"CFErrorGetCode","","",null,null],[5,"CFErrorCopyDescription","","",null,null],[6,"CFErrorRef","","",null,null],[0,"messageport","core_foundation_sys","",null,null],[3,"CFMessagePortContext","core_foundation_sys::messageport","",null,null],[12,"version","","",4,null],[12,"info","","",4,null],[12,"retain","","",4,null],[12,"release","","",4,null],[12,"copyDescription","","",4,null],[3,"__CFMessagePort","","",null,null],[5,"CFMessagePortGetTypeID","","",null,null],[5,"CFMessagePortCreateLocal","","",null,null],[5,"CFMessagePortCreateRemote","","",null,null],[5,"CFMessagePortIsRemote","","",null,null],[5,"CFMessagePortGetName","","",null,null],[5,"CFMessagePortSetName","","",null,null],[5,"CFMessagePortGetContext","","",null,null],[5,"CFMessagePortInvalidate","","",null,null],[5,"CFMessagePortIsValid","","",null,null],[5,"CFMessagePortGetInvalidationCallBack","","",null,null],[5,"CFMessagePortSetInvalidationCallBack","","",null,null],[5,"CFMessagePortSendRequest","","",null,null],[5,"CFMessagePortCreateRunLoopSource","","",null,null],[6,"CFMessagePortCallBack","","",null,null],[6,"CFMessagePortInvalidationCallBack","","",null,null],[6,"CFMessagePortRef","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"cfmessageportcontext"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"number","core_foundation_sys","",null,null],[3,"__CFBoolean","core_foundation_sys::number","",null,null],[3,"__CFNumber","","",null,null],[7,"kCFBooleanTrue","","",null,null],[7,"kCFBooleanFalse","","",null,null],[5,"CFBooleanGetTypeID","","",null,null],[5,"CFNumberCreate","","",null,null],[5,"CFNumberGetValue","","",null,null],[5,"CFNumberGetTypeID","","",null,null],[6,"CFBooleanRef","","",null,null],[6,"CFNumberType","","",null,null],[6,"CFNumberRef","","",null,null],[7,"kCFNumberSInt32Type","","",null,null],[7,"kCFNumberSInt64Type","","",null,null],[7,"kCFNumberFloat64Type","","",null,null],[0,"propertylist","core_foundation_sys","",null,null],[5,"CFPropertyListCreateWithData","core_foundation_sys::propertylist","",null,null],[5,"CFPropertyListCreateData","","",null,null],[6,"CFPropertyListRef","","",null,null],[6,"CFPropertyListFormat","","",null,null],[6,"CFPropertyListMutabilityOptions","","",null,null],[17,"kCFPropertyListOpenStepFormat","","",null,null],[17,"kCFPropertyListXMLFormat_v1_0","","",null,null],[17,"kCFPropertyListBinaryFormat_v1_0","","",null,null],[17,"kCFPropertyListImmutable","","",null,null],[17,"kCFPropertyListMutableContainers","","",null,null],[17,"kCFPropertyListMutableContainersAndLeaves","","",null,null],[0,"runloop","core_foundation_sys","",null,null],[3,"__CFRunLoop","core_foundation_sys::runloop","",null,null],[3,"__CFRunLoopSource","","",null,null],[3,"__CFRunLoopObserver","","",null,null],[3,"CFRunLoopSourceContext","","",null,null],[12,"version","","",5,null],[12,"info","","",5,null],[12,"retain","","",5,null],[12,"release","","",5,null],[12,"copyDescription","","",5,null],[12,"equal","","",5,null],[12,"hash","","",5,null],[12,"schedule","","",5,null],[12,"cancel","","",5,null],[12,"perform","","",5,null],[3,"CFRunLoopSourceContext1","","",null,null],[12,"version","","",6,null],[12,"info","","",6,null],[12,"retain","","",6,null],[12,"release","","",6,null],[12,"copyDescription","","",6,null],[12,"equal","","",6,null],[12,"hash","","",6,null],[12,"getPort","","",6,null],[12,"perform","","",6,null],[3,"CFRunLoopObserverContext","","",null,null],[12,"version","","",7,null],[12,"info","","",7,null],[12,"retain","","",7,null],[12,"release","","",7,null],[12,"copyDescription","","",7,null],[3,"CFRunLoopTimerContext","","",null,null],[12,"version","","",8,null],[12,"info","","",8,null],[12,"retain","","",8,null],[12,"release","","",8,null],[12,"copyDescription","","",8,null],[3,"__CFRunLoopTimer","","",null,null],[7,"kCFRunLoopDefaultMode","","",null,null],[7,"kCFRunLoopCommonModes","","",null,null],[5,"CFRunLoopGetTypeID","","",null,null],[5,"CFRunLoopGetCurrent","","",null,null],[5,"CFRunLoopGetMain","","",null,null],[5,"CFRunLoopCopyCurrentMode","","",null,null],[5,"CFRunLoopCopyAllModes","","",null,null],[5,"CFRunLoopAddCommonMode","","",null,null],[5,"CFRunLoopGetNextTimerFireDate","","",null,null],[5,"CFRunLoopRun","","",null,null],[5,"CFRunLoopRunInMode","","",null,null],[5,"CFRunLoopIsWaiting","","",null,null],[5,"CFRunLoopWakeUp","","",null,null],[5,"CFRunLoopStop","","",null,null],[5,"CFRunLoopContainsSource","","",null,null],[5,"CFRunLoopAddSource","","",null,null],[5,"CFRunLoopRemoveSource","","",null,null],[5,"CFRunLoopContainsObserver","","",null,null],[5,"CFRunLoopAddObserver","","",null,null],[5,"CFRunLoopRemoveObserver","","",null,null],[5,"CFRunLoopContainsTimer","","",null,null],[5,"CFRunLoopAddTimer","","",null,null],[5,"CFRunLoopRemoveTimer","","",null,null],[5,"CFRunLoopSourceGetTypeID","","",null,null],[5,"CFRunLoopSourceCreate","","",null,null],[5,"CFRunLoopSourceGetOrder","","",null,null],[5,"CFRunLoopSourceInvalidate","","",null,null],[5,"CFRunLoopSourceIsValid","","",null,null],[5,"CFRunLoopSourceGetContext","","",null,null],[5,"CFRunLoopSourceSignal","","",null,null],[5,"CFRunLoopObserverGetTypeID","","",null,null],[5,"CFRunLoopObserverCreate","","",null,null],[5,"CFRunLoopObserverGetActivities","","",null,null],[5,"CFRunLoopObserverDoesRepeat","","",null,null],[5,"CFRunLoopObserverGetOrder","","",null,null],[5,"CFRunLoopObserverInvalidate","","",null,null],[5,"CFRunLoopObserverIsValid","","",null,null],[5,"CFRunLoopObserverGetContext","","",null,null],[5,"CFRunLoopTimerGetTypeID","","",null,null],[5,"CFRunLoopTimerCreate","","",null,null],[5,"CFRunLoopTimerGetNextFireDate","","",null,null],[5,"CFRunLoopTimerSetNextFireDate","","",null,null],[5,"CFRunLoopTimerGetInterval","","",null,null],[5,"CFRunLoopTimerDoesRepeat","","",null,null],[5,"CFRunLoopTimerGetOrder","","",null,null],[5,"CFRunLoopTimerInvalidate","","",null,null],[5,"CFRunLoopTimerIsValid","","",null,null],[5,"CFRunLoopTimerGetContext","","",null,null],[5,"CFRunLoopTimerGetTolerance","","",null,null],[5,"CFRunLoopTimerSetTolerance","","",null,null],[6,"CFRunLoopRef","","",null,null],[6,"CFRunLoopSourceRef","","",null,null],[6,"CFRunLoopObserverRef","","",null,null],[6,"CFRunLoopActivity","","",null,null],[6,"CFRunLoopObserverCallBack","","",null,null],[6,"CFRunLoopTimerCallBack","","",null,null],[6,"CFRunLoopTimerRef","","",null,null],[17,"kCFRunLoopRunFinished","","",null,null],[17,"kCFRunLoopRunStopped","","",null,null],[17,"kCFRunLoopRunTimedOut","","",null,null],[17,"kCFRunLoopRunHandledSource","","",null,null],[17,"kCFRunLoopEntry","","",null,null],[17,"kCFRunLoopBeforeTimers","","",null,null],[17,"kCFRunLoopBeforeSources","","",null,null],[17,"kCFRunLoopBeforeWaiting","","",null,null],[17,"kCFRunLoopAfterWaiting","","",null,null],[17,"kCFRunLoopExit","","",null,null],[17,"kCFRunLoopAllActivities","","",null,null],[0,"set","core_foundation_sys","",null,null],[3,"CFSetCallBacks","core_foundation_sys::set","",null,null],[12,"version","","",9,null],[12,"retain","","",9,null],[12,"release","","",9,null],[12,"copyDescription","","",9,null],[12,"equal","","",9,null],[12,"hash","","",9,null],[3,"__CFSet","","",null,null],[7,"kCFTypeSetCallBacks","","",null,null],[5,"CFSetCreate","","",null,null],[5,"CFSetGetTypeID","","",null,null],[6,"CFSetRetainCallBack","","",null,null],[6,"CFSetReleaseCallBack","","",null,null],[6,"CFSetCopyDescriptionCallBack","","",null,null],[6,"CFSetEqualCallBack","","",null,null],[6,"CFSetHashCallBack","","",null,null],[6,"CFSetRef","","",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cfsetcallbacks"}}],[0,"string","core_foundation_sys","",null,null],[3,"__CFString","core_foundation_sys::string","",null,null],[5,"CFStringCreateWithBytes","","",null,null],[5,"CFStringCreateWithBytesNoCopy","","",null,null],[5,"CFStringCreateWithCString","","",null,null],[5,"CFStringGetBytes","","",null,null],[5,"CFStringGetCString","","",null,null],[5,"CFStringGetCStringPtr","","",null,null],[5,"CFStringGetLength","","",null,null],[5,"CFStringGetTypeID","","",null,null],[6,"UniChar","","",null,null],[6,"CFStringCompareFlags","","",null,null],[6,"CFStringEncoding","","",null,null],[6,"CFStringEncodings","","",null,null],[6,"CFStringRef","","",null,null],[7,"kCFStringEncodingUTF8","","",null,null],[0,"url","core_foundation_sys","",null,null],[3,"__CFURL","core_foundation_sys::url","",null,null],[5,"CFURLCreateWithFileSystemPath","","",null,null],[5,"CFURLGetString","","",null,null],[5,"CFURLGetTypeID","","",null,null],[6,"CFURLRef","","",null,null],[6,"CFURLBookmarkCreationOptions","","",null,null],[6,"CFURLPathStyle","","",null,null],[17,"kCFURLPOSIXPathStyle","","",null,null],[17,"kCFURLHFSPathStyle","","",null,null],[17,"kCFURLWindowsPathStyle","","",null,null]],"paths":[[3,"CFArrayCallBacks"],[3,"CFRange"],[3,"CFDictionaryKeyCallBacks"],[3,"CFDictionaryValueCallBacks"],[3,"CFMessagePortContext"],[3,"CFRunLoopSourceContext"],[3,"CFRunLoopSourceContext1"],[3,"CFRunLoopObserverContext"],[3,"CFRunLoopTimerContext"],[3,"CFSetCallBacks"]]};
searchIndex["crc"] = {"doc":"crc Rust implementation of CRC(16, 32, 64)","items":[[0,"crc16","crc","",null,null],[3,"Digest","crc::crc16","",null,null],[5,"make_table","","",null,null],[5,"update","","",null,null],[5,"checksum_x25","","",null,null],[5,"checksum_usb","","",null,null],[17,"X25","","",null,null],[17,"X25_TABLE","","",null,null],[17,"USB","","",null,null],[17,"USB_TABLE","","",null,null],[8,"Hasher16","","",null,null],[10,"reset","","",0,{"inputs":[{"name":"self"}],"output":null}],[10,"write","","",0,null],[10,"sum16","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"new","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"digest"}}],[11,"new_with_initial","","",1,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"digest"}}],[11,"reset","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",1,null],[11,"sum16","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"crc32","crc","",null,null],[3,"Digest","crc::crc32","",null,null],[5,"make_table","","",null,null],[5,"update","","",null,null],[5,"checksum_ieee","","",null,null],[5,"checksum_castagnoli","","",null,null],[5,"checksum_koopman","","",null,null],[17,"CASTAGNOLI","","",null,null],[17,"CASTAGNOLI_TABLE","","",null,null],[17,"IEEE","","",null,null],[17,"IEEE_TABLE","","",null,null],[17,"KOOPMAN","","",null,null],[17,"KOOPMAN_TABLE","","",null,null],[8,"Hasher32","","",null,null],[10,"reset","","",2,{"inputs":[{"name":"self"}],"output":null}],[10,"write","","",2,null],[10,"sum32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"digest"}}],[11,"new_with_initial","","",3,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"digest"}}],[11,"reset","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",3,null],[11,"sum32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write","","",3,null],[11,"finish","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"crc64","crc","",null,null],[3,"Digest","crc::crc64","",null,null],[5,"make_table","","",null,null],[5,"update","","",null,null],[5,"checksum_ecma","","",null,null],[5,"checksum_iso","","",null,null],[17,"ECMA","","",null,null],[17,"ECMA_TABLE","","",null,null],[17,"ISO","","",null,null],[17,"ISO_TABLE","","",null,null],[8,"Hasher64","","",null,null],[10,"reset","","",4,{"inputs":[{"name":"self"}],"output":null}],[10,"write","","",4,null],[10,"sum64","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"digest"}}],[11,"new_with_initial","","",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"digest"}}],[11,"reset","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",5,null],[11,"sum64","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}]],"paths":[[8,"Hasher16"],[3,"Digest"],[8,"Hasher32"],[3,"Digest"],[8,"Hasher64"],[3,"Digest"]]};
searchIndex["crossbeam_deque"] = {"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",null,null],[3,"Stealer","","A stealer that steals elements from the top of a deque.",null,null],[4,"Steal","","Possible outcomes of a steal operation.",null,null],[13,"Empty","","The deque was empty at the time of stealing.",0,null],[13,"Data","","Some data has been successfully stolen.",0,null],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"new","","Returns a new deque.",1,{"inputs":[],"output":{"name":"deque"}}],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"min_capacity","","Returns the minimum capacity of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Returns the number of elements the deque can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"shrink_to_fit","","Shrinks the capacity of the deque as much as possible.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"push","","Pushes an element into the bottom of the deque.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops an element from the bottom of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","Creates another stealer.",2,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"] = {"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",null,null],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",null,null],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,null],[12,"new","","The new value, which the operation failed to store.",0,null],[3,"Owned","","An owned heap-allocated object.",null,null],[3,"Shared","","A pointer to an object protected by the epoch GC.",null,null],[3,"Guard","","A guard that keeps the current thread pinned.",null,null],[3,"Collector","","An epoch-based garbage collector.",null,null],[3,"Handle","","A handle to a garbage collector.",null,null],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",null,{"inputs":[],"output":{"name":"guard"}}],[5,"default_collector","","Returns the default handle associated with the current thread.",null,{"inputs":[],"output":{"name":"collector"}}],[5,"default_handle","","Returns the default handle associated with the current thread.",null,{"inputs":[],"output":{"name":"handle"}}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pin","","Pins the current thread.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","Returns a new null atomic pointer.",1,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Loads a `Shared` from the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"load_consume","","Loads a `Shared` from the atomic pointer using a \"consume\" memory ordering.",1,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Returns a copy of the atomic value.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,{"inputs":[{"name":"owned"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,{"inputs":[{"name":"shared"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,null],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,null],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"into_box","","Converts the owned pointer into a `Box`.",2,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"tag","","Returns the tag stored within the pointer.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"owned"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new owned pointer pointing to `b`.",2,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"borrow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"null","","Returns a new null pointer.",3,{"inputs":[],"output":{"name":"shared"}}],[11,"is_null","","Returns `true` if the pointer is null.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,null],[11,"deref","","Dereferences the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","Converts the pointer to a reference.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Takes ownership of the pointee.",3,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"tag","","Returns the tag stored within the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"shared"}}],[11,"from","","Returns a new pointer pointing to `raw`.",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new collector.",4,{"inputs":[],"output":{"name":"self"}}],[11,"register","","Registers a new handle for the collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"clone","","Creates another reference to the same garbage collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","Checks if both handles point to the same collector.",4,{"inputs":[{"name":"self"},{"name":"collector"}],"output":{"name":"bool"}}],[11,"pin","","Pins the handle.",5,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"collector","","Returns the `Collector` associated with this handle.",5,{"inputs":[{"name":"self"}],"output":{"name":"collector"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin","","Unpins and then immediately re-pins the thread.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"collector","","Returns the `Collector` associated with this guard.",6,{"inputs":[{"name":"self"}],"output":{"generics":["collector"],"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",null,null],[10,"success","","The ordering of the operation when it succeeds.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[10,"failure","","The ordering of the operation when it fails.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"]]};
searchIndex["crossbeam_utils"] = {"doc":"","items":[[0,"cache_padded","crossbeam_utils","",null,null],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Pads a value to the length of a cache line.",0,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"scoped","crossbeam_utils","",null,null],[3,"Scope","crossbeam_utils::scoped","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",null,null],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"generics":["joinhandle"],"name":"result"}}],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",1,{"inputs":[{"name":"self"}],"output":{"name":"scopedthreadbuilder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"scopedthreadbuilder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"scopedthreadbuilder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["scopedjoinhandle"],"name":"result"}}],[11,"join","","Join the scoped thread, returning the result it produced.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread","","Get the underlying thread handle.",2,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[0,"consume","crossbeam_utils","",null,null],[8,"AtomicConsume","crossbeam_utils::consume","Trait which allows reading from an atomic type with \"consume\" ordering.",null,null],[16,"Val","","Type returned by `load_consume`.",4,null],[10,"load_consume","","Loads a value from the atomic using a \"consume\" memory ordering.",4,null]],"paths":[[3,"CachePadded"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"],[8,"AtomicConsume"]]};
searchIndex["dns_lookup"] = {"doc":"`dns_lookup` A small wrapper for libc to perform simple DNS lookups.","items":[[3,"AddrInfoIter","dns_lookup","An iterator of `AddrInfo` structs, wrapping a linked-list returned by getaddrinfo.",null,null],[3,"AddrInfo","","Struct that stores socket information, as returned by getaddrinfo.",null,null],[12,"socktype","","Type of this socket.",0,null],[12,"protocol","","Protcol family for this socket.",0,null],[12,"address","","Address family for this socket (usually matches protocol family).",0,null],[12,"sockaddr","","Socket address for this socket, usually containing an actual IP Address and port.",0,null],[12,"canonname","","If requested, this is the canonical name for this socket/host.",0,null],[12,"flags","","Optional bitmask arguments, usually set to zero.",0,null],[3,"AddrInfoHints","","A struct used as the hints argument to getaddrinfo.",null,null],[12,"socktype","","Type of this socket. 0 for none.",1,null],[12,"protocol","","Protcol for this socket. 0 for none.",1,null],[12,"address","","Address family for this socket. 0 for none.",1,null],[12,"flags","","Optional bitmask arguments. Bitwise OR bitflags to change the behaviour of getaddrinfo. 0 for none.",1,null],[4,"SockType","","Socket Type",null,null],[13,"Stream","","Sequenced, reliable, connection-based byte streams.",2,null],[13,"DGram","","Connectionless, unreliable datagrams of fixed max length.",2,null],[13,"Raw","","Raw protocol interface.",2,null],[13,"RDM","","Reliably-delivered messages.",2,null],[4,"Protocol","","Socket Protocol",null,null],[13,"ICMP","","Internet Control Message Protocol.",3,null],[13,"TCP","","Transmission Control Protocol.",3,null],[13,"UDP","","User Datagram Protocol.",3,null],[4,"AddrFamily","","Address Family",null,null],[13,"Unix","","Local to host (pipes and file-domain)",4,null],[13,"Inet","","IP protocol family.",4,null],[13,"Inet6","","IP version 6.",4,null],[5,"getaddrinfo","","Retrieve socket information for a host, service, or both. Acts as a thin wrapper around the libc getaddrinfo.",null,{"inputs":[{"generics":["str"],"name":"option"},{"generics":["str"],"name":"option"},{"generics":["addrinfohints"],"name":"option"}],"output":{"generics":["addrinfoiter","lookuperror"],"name":"result"}}],[5,"get_hostname","","Fetch the local hostname.",null,{"inputs":[],"output":{"generics":["string","error"],"name":"result"}}],[5,"lookup_host","","Lookup the address for a given hostname via DNS.",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec"],"name":"result"}}],[5,"lookup_addr","","Lookup the hostname of a given IP Address via DNS.",null,{"inputs":[{"name":"ipaddr"}],"output":{"generics":["string"],"name":"result"}}],[5,"getnameinfo","","Retrieve the name for a given IP and Service. Acts as a thin wrapper around the libc getnameinfo.",null,{"inputs":[{"name":"socketaddr"},{"name":"i32"}],"output":{"generics":["lookuperror"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"addrinfohints"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"addrinfohints"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"addrinfohints"}],"output":{"name":"bool"}}],[11,"default","","Generate a blank AddrInfoHints struct, so new values can easily be specified.",1,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"addrinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"addrinfo"}],"output":{"name":"bool"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"addrfamily"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"addrfamily"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":{"name":"bool"}}]],"paths":[[3,"AddrInfo"],[3,"AddrInfoHints"],[4,"SockType"],[4,"Protocol"],[4,"AddrFamily"],[3,"AddrInfoIter"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["encoding_rs"] = {"doc":"encoding_rs is a Gecko-oriented Free Software / Open Source implementation of the Encoding Standard in Rust. Gecko-oriented means that converting to and from UTF-16 is supported in addition to converting to and from UTF-8, that the performance and streamability goals are browser-oriented, and that FFI-friendliness is a goal.","items":[[3,"Encoding","encoding_rs","An encoding as defined in the [Encoding Standard][1].",null,null],[3,"Decoder","","A converter that decodes a byte stream into Unicode according to a character encoding in a streaming (incremental) manner.",null,null],[3,"Encoder","","A converter that encodes a Unicode stream into bytes according to a character encoding in a streaming (incremental) manner.",null,null],[4,"CoderResult","","Result of a (potentially partial) decode or encode operation with replacement.",null,null],[13,"InputEmpty","","The input was exhausted.",0,null],[13,"OutputFull","","The converter cannot produce another unit of output, because the output buffer does not have enough space left.",0,null],[4,"DecoderResult","","Result of a (potentially partial) decode operation without replacement.",null,null],[13,"InputEmpty","","The input was exhausted.",1,null],[13,"OutputFull","","The decoder cannot produce another unit of output, because the output buffer does not have enough space left.",1,null],[13,"Malformed","","The decoder encountered a malformed byte sequence.",1,null],[4,"EncoderResult","","Result of a (potentially partial) encode operation without replacement.",null,null],[13,"InputEmpty","","The input was exhausted.",2,null],[13,"OutputFull","","The encoder cannot produce another unit of output, because the output buffer does not have enough space left.",2,null],[13,"Unmappable","","The encoder encountered an unmappable character.",2,null],[0,"mem","","Functions for converting between different in-RAM representations of text and for quickly checking if the Unicode Bidirectional Algorithm can be avoided.",null,null],[4,"Latin1Bidi","encoding_rs::mem","Classification of text as Latin1 (all code points are below U+0100), left-to-right with some non-Latin1 characters or as containing at least some right-to-left characters.",null,null],[13,"Latin1","","Every character is below U+0100.",3,null],[13,"LeftToRight","","There is at least one character that's U+0100 or higher, but there are no right-to-left characters.",3,null],[13,"Bidi","","There is at least one right-to-left character.",3,null],[5,"is_ascii","","Checks whether the buffer is all-ASCII.",null,null],[5,"is_basic_latin","","Checks whether the buffer is all-Basic Latin (i.e. UTF-16 representing only ASCII characters).",null,null],[5,"is_utf8_latin1","","Checks whether the buffer is valid UTF-8 representing only code points less than or equal to U+00FF.",null,null],[5,"is_str_latin1","","Checks whether the buffer represents only code point less than or equal to U+00FF.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_utf16_latin1","","Checks whether the buffer represents only code point less than or equal to U+00FF.",null,null],[5,"is_utf8_bidi","","Checks whether a potentially-invalid UTF-8 buffer contains code points that trigger right-to-left processing.",null,null],[5,"is_str_bidi","","Checks whether a valid UTF-8 buffer contains code points that trigger right-to-left processing.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_utf16_bidi","","Checks whether a UTF-16 buffer contains code points that trigger right-to-left processing.",null,null],[5,"is_char_bidi","","Checks whether a code point triggers right-to-left processing.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_utf16_code_unit_bidi","","Checks whether a UTF-16 code unit triggers right-to-left processing.",null,{"inputs":[{"name":"u16"}],"output":{"name":"bool"}}],[5,"check_utf8_for_latin1_and_bidi","","Checks whether a potentially invalid UTF-8 buffer contains code points that trigger right-to-left processing or is all-Latin1.",null,null],[5,"check_str_for_latin1_and_bidi","","Checks whether a valid UTF-8 buffer contains code points that trigger right-to-left processing or is all-Latin1.",null,{"inputs":[{"name":"str"}],"output":{"name":"latin1bidi"}}],[5,"check_utf16_for_latin1_and_bidi","","Checks whether a potentially invalid UTF-16 buffer contains code points that trigger right-to-left processing or is all-Latin1.",null,null],[5,"convert_utf8_to_utf16","","Converts potentially-invalid UTF-8 to valid UTF-16 with errors replaced with the REPLACEMENT CHARACTER.",null,null],[5,"convert_str_to_utf16","","Converts valid UTF-8 to valid UTF-16.",null,null],[5,"convert_utf16_to_utf8","","Converts potentially-invalid UTF-16 to valid UTF-8 with errors replaced with the REPLACEMENT CHARACTER.",null,null],[5,"convert_utf16_to_str","","Converts potentially-invalid UTF-16 to valid UTF-8 with errors replaced with the REPLACEMENT CHARACTER such that the validity of the output is signaled using the Rust type system.",null,null],[5,"convert_latin1_to_utf16","","Converts bytes whose unsigned value is interpreted as Unicode code point (i.e. U+0000 to U+00FF, inclusive) to UTF-16.",null,null],[5,"convert_latin1_to_utf8","","Converts bytes whose unsigned value is interpreted as Unicode code point (i.e. U+0000 to U+00FF, inclusive) to UTF-8.",null,null],[5,"convert_latin1_to_str","","Converts bytes whose unsigned value is interpreted as Unicode code point (i.e. U+0000 to U+00FF, inclusive) to UTF-8 such that the validity of the output is signaled using the Rust type system.",null,null],[5,"convert_utf8_to_latin1_lossy","","If the input is valid UTF-8 representing only Unicode code points from U+0000 to U+00FF, inclusive, converts the input into output that represents the value of each code point as the unsigned byte value of each output byte.",null,null],[5,"convert_utf16_to_latin1_lossy","","If the input is valid UTF-16 representing only Unicode code points from U+0000 to U+00FF, inclusive, converts the input into output that represents the value of each code point as the unsigned byte value of each output byte.",null,null],[5,"utf16_valid_up_to","","Returns the index of the first unpaired surrogate or, if the input is valid UTF-16 in its entirety, the length of the input.",null,null],[5,"ensure_utf16_validity","","Replaces unpaired surrogates in the input with the REPLACEMENT CHARACTER.",null,null],[5,"copy_ascii_to_ascii","","Copies ASCII from source to destination up to the first non-ASCII byte (or the end of the input if it is ASCII in its entirety).",null,null],[5,"copy_ascii_to_basic_latin","","Copies ASCII from source to destination zero-extending it to UTF-16 up to the first non-ASCII byte (or the end of the input if it is ASCII in its entirety).",null,null],[5,"copy_basic_latin_to_ascii","","Copies Basic Latin from source to destination narrowing it to ASCII up to the first non-Basic Latin code unit (or the end of the input if it is Basic Latin in its entirety).",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"latin1bidi"}],"output":{"name":"bool"}}],[7,"BIG5_INIT","encoding_rs","The initializer for the Big5 encoding.",null,null],[7,"BIG5","","The Big5 encoding.",null,null],[7,"EUC_JP_INIT","","The initializer for the EUC-JP encoding.",null,null],[7,"EUC_JP","","The EUC-JP encoding.",null,null],[7,"EUC_KR_INIT","","The initializer for the EUC-KR encoding.",null,null],[7,"EUC_KR","","The EUC-KR encoding.",null,null],[7,"GBK_INIT","","The initializer for the GBK encoding.",null,null],[7,"GBK","","The GBK encoding.",null,null],[7,"IBM866_INIT","","The initializer for the IBM866 encoding.",null,null],[7,"IBM866","","The IBM866 encoding.",null,null],[7,"ISO_2022_JP_INIT","","The initializer for the ISO-2022-JP encoding.",null,null],[7,"ISO_2022_JP","","The ISO-2022-JP encoding.",null,null],[7,"ISO_8859_10_INIT","","The initializer for the ISO-8859-10 encoding.",null,null],[7,"ISO_8859_10","","The ISO-8859-10 encoding.",null,null],[7,"ISO_8859_13_INIT","","The initializer for the ISO-8859-13 encoding.",null,null],[7,"ISO_8859_13","","The ISO-8859-13 encoding.",null,null],[7,"ISO_8859_14_INIT","","The initializer for the ISO-8859-14 encoding.",null,null],[7,"ISO_8859_14","","The ISO-8859-14 encoding.",null,null],[7,"ISO_8859_15_INIT","","The initializer for the ISO-8859-15 encoding.",null,null],[7,"ISO_8859_15","","The ISO-8859-15 encoding.",null,null],[7,"ISO_8859_16_INIT","","The initializer for the ISO-8859-16 encoding.",null,null],[7,"ISO_8859_16","","The ISO-8859-16 encoding.",null,null],[7,"ISO_8859_2_INIT","","The initializer for the ISO-8859-2 encoding.",null,null],[7,"ISO_8859_2","","The ISO-8859-2 encoding.",null,null],[7,"ISO_8859_3_INIT","","The initializer for the ISO-8859-3 encoding.",null,null],[7,"ISO_8859_3","","The ISO-8859-3 encoding.",null,null],[7,"ISO_8859_4_INIT","","The initializer for the ISO-8859-4 encoding.",null,null],[7,"ISO_8859_4","","The ISO-8859-4 encoding.",null,null],[7,"ISO_8859_5_INIT","","The initializer for the ISO-8859-5 encoding.",null,null],[7,"ISO_8859_5","","The ISO-8859-5 encoding.",null,null],[7,"ISO_8859_6_INIT","","The initializer for the ISO-8859-6 encoding.",null,null],[7,"ISO_8859_6","","The ISO-8859-6 encoding.",null,null],[7,"ISO_8859_7_INIT","","The initializer for the ISO-8859-7 encoding.",null,null],[7,"ISO_8859_7","","The ISO-8859-7 encoding.",null,null],[7,"ISO_8859_8_INIT","","The initializer for the ISO-8859-8 encoding.",null,null],[7,"ISO_8859_8","","The ISO-8859-8 encoding.",null,null],[7,"ISO_8859_8_I_INIT","","The initializer for the ISO-8859-8-I encoding.",null,null],[7,"ISO_8859_8_I","","The ISO-8859-8-I encoding.",null,null],[7,"KOI8_R_INIT","","The initializer for the KOI8-R encoding.",null,null],[7,"KOI8_R","","The KOI8-R encoding.",null,null],[7,"KOI8_U_INIT","","The initializer for the KOI8-U encoding.",null,null],[7,"KOI8_U","","The KOI8-U encoding.",null,null],[7,"SHIFT_JIS_INIT","","The initializer for the Shift_JIS encoding.",null,null],[7,"SHIFT_JIS","","The Shift_JIS encoding.",null,null],[7,"UTF_16BE_INIT","","The initializer for the UTF-16BE encoding.",null,null],[7,"UTF_16BE","","The UTF-16BE encoding.",null,null],[7,"UTF_16LE_INIT","","The initializer for the UTF-16LE encoding.",null,null],[7,"UTF_16LE","","The UTF-16LE encoding.",null,null],[7,"UTF_8_INIT","","The initializer for the UTF-8 encoding.",null,null],[7,"UTF_8","","The UTF-8 encoding.",null,null],[7,"GB18030_INIT","","The initializer for the gb18030 encoding.",null,null],[7,"GB18030","","The gb18030 encoding.",null,null],[7,"MACINTOSH_INIT","","The initializer for the macintosh encoding.",null,null],[7,"MACINTOSH","","The macintosh encoding.",null,null],[7,"REPLACEMENT_INIT","","The initializer for the replacement encoding.",null,null],[7,"REPLACEMENT","","The replacement encoding.",null,null],[7,"WINDOWS_1250_INIT","","The initializer for the windows-1250 encoding.",null,null],[7,"WINDOWS_1250","","The windows-1250 encoding.",null,null],[7,"WINDOWS_1251_INIT","","The initializer for the windows-1251 encoding.",null,null],[7,"WINDOWS_1251","","The windows-1251 encoding.",null,null],[7,"WINDOWS_1252_INIT","","The initializer for the windows-1252 encoding.",null,null],[7,"WINDOWS_1252","","The windows-1252 encoding.",null,null],[7,"WINDOWS_1253_INIT","","The initializer for the windows-1253 encoding.",null,null],[7,"WINDOWS_1253","","The windows-1253 encoding.",null,null],[7,"WINDOWS_1254_INIT","","The initializer for the windows-1254 encoding.",null,null],[7,"WINDOWS_1254","","The windows-1254 encoding.",null,null],[7,"WINDOWS_1255_INIT","","The initializer for the windows-1255 encoding.",null,null],[7,"WINDOWS_1255","","The windows-1255 encoding.",null,null],[7,"WINDOWS_1256_INIT","","The initializer for the windows-1256 encoding.",null,null],[7,"WINDOWS_1256","","The windows-1256 encoding.",null,null],[7,"WINDOWS_1257_INIT","","The initializer for the windows-1257 encoding.",null,null],[7,"WINDOWS_1257","","The windows-1257 encoding.",null,null],[7,"WINDOWS_1258_INIT","","The initializer for the windows-1258 encoding.",null,null],[7,"WINDOWS_1258","","The windows-1258 encoding.",null,null],[7,"WINDOWS_874_INIT","","The initializer for the windows-874 encoding.",null,null],[7,"WINDOWS_874","","The windows-874 encoding.",null,null],[7,"X_MAC_CYRILLIC_INIT","","The initializer for the x-mac-cyrillic encoding.",null,null],[7,"X_MAC_CYRILLIC","","The x-mac-cyrillic encoding.",null,null],[7,"X_USER_DEFINED_INIT","","The initializer for the x-user-defined encoding.",null,null],[7,"X_USER_DEFINED","","The x-user-defined encoding.",null,null],[11,"for_label","","Implements the get an encoding algorithm.",4,null],[11,"for_label_no_replacement","","This method behaves the same as `for_label()`, except when `for_label()` would return `Some(REPLACEMENT)`, this method returns `None` instead.",4,null],[11,"for_bom","","Performs non-incremental BOM sniffing.",4,null],[11,"name","","Returns the name of this encoding.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"can_encode_everything","","Checks whether the output encoding of this encoding can encode every `char`. (Only true if the output encoding is UTF-8.)",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_compatible","","Checks whether the bytes 0x00...0x7F map exclusively to the characters U+0000...U+007F and vice versa.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"output_encoding","","Returns the output encoding of this encoding. This is UTF-8 for UTF-16BE, UTF-16LE and replacement and the encoding itself otherwise.",4,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"decode","","Decode complete input to `Cow<'a, str>` with BOM sniffing and with malformed sequences replaced with the REPLACEMENT CHARACTER when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,null],[11,"decode_with_bom_removal","","Decode complete input to `Cow<'a, str>` with BOM removal and with malformed sequences replaced with the REPLACEMENT CHARACTER when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,null],[11,"decode_without_bom_handling","","Decode complete input to `Cow<'a, str>` without BOM handling and with malformed sequences replaced with the REPLACEMENT CHARACTER when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,null],[11,"decode_without_bom_handling_and_without_replacement","","Decode complete input to `Cow<'a, str>` without BOM handling and with malformed sequences treated as fatal when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,null],[11,"encode","","Encode complete input to `Cow<'a, [u8]>` with unmappable characters replaced with decimal numeric character references when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,null],[11,"new_decoder","","Instantiates a new decoder for this encoding with BOM sniffing enabled.",4,{"inputs":[{"name":"self"}],"output":{"name":"decoder"}}],[11,"new_decoder_with_bom_removal","","Instantiates a new decoder for this encoding with BOM removal.",4,{"inputs":[{"name":"self"}],"output":{"name":"decoder"}}],[11,"new_decoder_without_bom_handling","","Instantiates a new decoder for this encoding with BOM handling disabled.",4,{"inputs":[{"name":"self"}],"output":{"name":"decoder"}}],[11,"new_encoder","","Instantiates a new encoder for the output encoding of this encoding.",4,{"inputs":[{"name":"self"}],"output":{"name":"encoder"}}],[11,"utf8_valid_up_to","","Validates UTF-8.",4,null],[11,"ascii_valid_up_to","","Validates ASCII.",4,null],[11,"iso_2022_jp_ascii_valid_up_to","","Validates ISO-2022-JP ASCII-state data.",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"coderresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"decoderresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"decoderresult"}],"output":{"name":"bool"}}],[11,"encoding","","The `Encoding` this `Decoder` is for.",5,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"max_utf8_buffer_length","","Query the worst-case UTF-8 output size with replacement.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max_utf8_buffer_length_without_replacement","","Query the worst-case UTF-8 output size without replacement.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"decode_to_utf8","","Incrementally decode a byte stream into UTF-8 with malformed sequences replaced with the REPLACEMENT CHARACTER.",5,null],[11,"decode_to_str","","Incrementally decode a byte stream into UTF-8 with malformed sequences replaced with the REPLACEMENT CHARACTER with type system signaling of UTF-8 validity.",5,null],[11,"decode_to_string","","Incrementally decode a byte stream into UTF-8 with malformed sequences replaced with the REPLACEMENT CHARACTER using a `String` receiver.",5,null],[11,"decode_to_utf8_without_replacement","","Incrementally decode a byte stream into UTF-8 without replacement.",5,null],[11,"decode_to_str_without_replacement","","Incrementally decode a byte stream into UTF-8 with type system signaling of UTF-8 validity.",5,null],[11,"decode_to_string_without_replacement","","Incrementally decode a byte stream into UTF-8 using a `String` receiver.",5,null],[11,"max_utf16_buffer_length","","Query the worst-case UTF-16 output size (with or without replacement).",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"decode_to_utf16","","Incrementally decode a byte stream into UTF-16 with malformed sequences replaced with the REPLACEMENT CHARACTER.",5,null],[11,"decode_to_utf16_without_replacement","","Incrementally decode a byte stream into UTF-16 without replacement.",5,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"encoderresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"encoderresult"}],"output":{"name":"bool"}}],[11,"encoding","","The `Encoding` this `Encoder` is for.",6,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"has_pending_state","","Returns `true` if this is an ISO-2022-JP encoder that's not in the ASCII state and `false` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"max_buffer_length_from_utf8_if_no_unmappables","","Query the worst-case output size when encoding from UTF-8 with replacement.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max_buffer_length_from_utf8_without_replacement","","Query the worst-case output size when encoding from UTF-8 without replacement.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"encode_from_utf8","","Incrementally encode into byte stream from UTF-8 with unmappable characters replaced with HTML (decimal) numeric character references.",6,null],[11,"encode_from_utf8_to_vec","","Incrementally encode into byte stream from UTF-8 with unmappable characters replaced with HTML (decimal) numeric character references.",6,null],[11,"encode_from_utf8_without_replacement","","Incrementally encode into byte stream from UTF-8 without replacement.",6,null],[11,"encode_from_utf8_to_vec_without_replacement","","Incrementally encode into byte stream from UTF-8 without replacement.",6,null],[11,"max_buffer_length_from_utf16_if_no_unmappables","","Query the worst-case output size when encoding from UTF-16 with replacement.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max_buffer_length_from_utf16_without_replacement","","Query the worst-case output size when encoding from UTF-16 without replacement.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"encode_from_utf16","","Incrementally encode into byte stream from UTF-16 with unmappable characters replaced with HTML (decimal) numeric character references.",6,null],[11,"encode_from_utf16_without_replacement","","Incrementally encode into byte stream from UTF-16 without replacement.",6,null]],"paths":[[4,"CoderResult"],[4,"DecoderResult"],[4,"EncoderResult"],[4,"Latin1Bidi"],[3,"Encoding"],[3,"Decoder"],[3,"Encoder"]]};
searchIndex["futures"] = {"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"map","","Change the success value of this `Async` with the closure provided",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"future","","Futures",null,null],[3,"Empty","futures::future","A future which is never resolved.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",2,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",3,null],[13,"B","","Second branch of the type",3,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"from","","",8,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_done","","Returns whether the underlying future has finished or not.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",23,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",25,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,null],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",28,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",30,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",31,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"poll","","",32,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Block the current thread until this future is resolved.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",36,null],[16,"Item","","The item that the future may resolve with.",36,null],[16,"Error","","The error that the future may resolve with.",36,null],[10,"into_future","","Consumes this object and produces a future.",36,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",37,null],[16,"Error","","Possible errors during conversion.",37,null],[10,"future_from","","Consume the given value, beginning the conversion.",37,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"new","","Create a new `ExecuteError`",39,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",39,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","futures","Asynchronous streams",null,null],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",40,null],[12,"1","","",40,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",41,null],[13,"Second","","An item from the second stream",41,null],[13,"Both","","Items from both streams",41,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",46,null],[11,"poll_complete","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",49,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",51,null],[11,"poll_complete","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",52,null],[11,"poll_complete","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",53,null],[11,"poll_complete","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",57,null],[11,"poll_complete","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",60,null],[11,"poll_complete","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",61,null],[11,"poll_complete","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",62,null],[11,"poll_complete","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",65,null],[11,"poll_complete","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",66,null],[11,"poll_complete","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",69,null],[11,"poll_complete","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",70,null],[11,"poll_complete","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",71,null],[11,"poll_complete","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",72,null],[11,"poll_complete","","",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",73,null],[11,"poll_complete","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",77,null],[11,"poll_complete","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",78,null],[11,"poll_complete","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",80,null],[11,"poll_complete","","",80,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",80,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"poll"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"next","","",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",83,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"poll","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",84,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"start_send","","",84,null],[11,"poll_complete","","",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"futures_unordered","","An unbounded set of futures.",null,null],[3,"FuturesUnordered","futures::stream::futures_unordered","An unbounded set of futures.",null,null],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",null,null],[11,"new","","Constructs a new, empty `FuturesUnordered`",85,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",85,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"poll","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"new","futures::stream","Constructs a new, empty `FuturesOrdered`",87,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"poll","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Stream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",88,null],[16,"Error","","The type of error this stream may generate.",88,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",88,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",88,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",88,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",88,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",88,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",88,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",88,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",88,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",88,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",88,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",88,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",88,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",88,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[0,"sink","futures","Asynchronous sinks",null,null],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",null,null],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",null,null],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",null,null],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",null,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",89,null],[11,"poll_complete","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",90,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",90,null],[11,"poll_complete","","",90,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",90,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consume the `Flush` and return the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",91,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",92,null],[11,"poll_complete","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",94,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",95,null],[11,"poll_complete","","",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",95,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"start_send","","",96,null],[11,"poll_complete","","",96,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",96,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",97,null],[11,"poll_complete","","",97,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",97,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",98,null],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",null,null],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",99,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",99,null],[10,"start_send","","Begin the process of sending a value to the sink.",99,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",99,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"fanout","","Fanout items to multiple sinks.",99,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",99,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",99,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",99,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[0,"task","futures","Tasks used to drive a future computation",null,null],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"init","","Initialize the `futures` task system.",null,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",100,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"executor","futures","Executors",null,null],[3,"Run","futures::executor","Units of work submitted to an `Executor`, currently only created internally.",null,null],[3,"Spawn","","Representation of a spawned future/stream.",null,null],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",null,null],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",null,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",101,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",102,{"inputs":[{"name":"self"},{"name":"run"}],"output":null}],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",null,null],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",104,{"inputs":[{"name":"self"}],"output":{"name":"notifyhandle"}}],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",104,{"inputs":[{"name":"self"}],"output":null}],[0,"sync","futures","Future-aware synchronization",null,null],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",null,null],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",null,null],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",null,null],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",null,null],[0,"oneshot","","A one-shot, futures-aware channel",null,null],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",106,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",105,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["canceled"],"name":"poll"}}],[11,"drop","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",108,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",108,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",109,{"inputs":[{"name":"self"}],"output":null}],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",null,null],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",null,null],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"TrySendError","","Error type returned from `try_send`",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",null,null],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"start_send","","",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"start_send","","",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"unboundedsender"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",110,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",112,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",112,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",113,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"poll","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",117,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","futures::sync","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BiLock` protecting the provided data.",118,null],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",118,{"inputs":[{"name":"self"}],"output":{"generics":["bilockguard"],"name":"async"}}],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",118,{"inputs":[{"name":"self"}],"output":{"name":"bilockacquire"}}],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",118,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",119,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["bilockacquired"],"name":"poll"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",121,{"inputs":[{"name":"self"}],"output":{"name":"bilock"}}],[11,"deref","","",121,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",121,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",121,{"inputs":[{"name":"self"}],"output":null}],[0,"unsync","futures","Future-aware single-threaded synchronization",null,null],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",null,null],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",null,null],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",122,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"drop","","",122,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",123,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",123,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",123,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",125,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",125,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",126,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",128,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",null,null],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",129,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",129,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",130,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",130,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",131,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",131,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",132,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",null,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",null,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",133,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",133,{"inputs":[{"name":"self"}],"output":null}],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",133,{"inputs":[{"name":"self"},{"name":"task"}],"output":null}],[11,"notify","","Notifies the task that last called `register`.",133,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"poll_future","futures::executor","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",135,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",135,{"inputs":[{"name":"self"},{"generics":["executor"],"name":"arc"}],"output":null}],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",135,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["option"],"name":"poll"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",135,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",135,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",135,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",136,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","futures::task","",137,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",137,{"inputs":[{"generics":["eventset"],"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","futures::executor","",138,{"inputs":[{"name":"arc"}],"output":{"name":"notifyhandle"}}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","futures::task","",139,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",139,{"inputs":[{"name":"self"}],"output":null}],[11,"is_current","","Returns `true` when called from within the context of the task.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",135,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `NotifyHandle` directly.",138,null],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",138,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",138,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",138,{"inputs":[{"name":"t"}],"output":{"name":"notifyhandle"}}]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Fanout"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Unpark"],[8,"Executor"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"Run"],[3,"UnparkEvent"],[3,"NotifyHandle"],[3,"Task"]]};
searchIndex["futures_cpupool"] = {"doc":"A simple crate for executing work on a thread pool, and getting back a future.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",null,null],[3,"Builder","","Thread pool configuration object",null,null],[3,"CpuFuture","","The type of future returned from the `CpuPool::spawn` function, which proxies the futures running on the thread pool.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,{"inputs":[{"name":"usize"}],"output":{"name":"cpupool"}}],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number of CPUs on the host.",0,{"inputs":[],"output":{"name":"cpupool"}}],[11,"spawn","","Spawns a future to run on this thread pool, returning a future representing the produced value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cpufuture"}}],[11,"spawn_fn","","Spawns a closure on this thread pool.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cpufuture"}}],[11,"execute","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a builder a number of workers equal to the number of CPUs on the host.",1,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set size of a future CpuPool",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"stack_size","","Set stack size of threads in the pool.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"name_prefix","","Set thread name prefix of a future CpuPool",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_start","","Execute function `f` right after each thread is started but before running any jobs on it.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before_stop","","Execute function `f` before each worker thread stops.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"create","","Create CpuPool with configured parameters",1,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}]],"paths":[[3,"CpuPool"],[3,"Builder"],[3,"CpuFuture"]]};
searchIndex["httparse"] = {"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","The response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","Invalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["hyper"] = {"doc":"Hyper","items":[[3,"Uri","hyper","The Request-URI of a Request's StartLine.",null,null],[3,"Body","","A `Stream` for `Chunk`s used in requests and responses.",null,null],[3,"Chunk","","A piece of a message body.",null,null],[3,"Request","","An HTTP Request",null,null],[3,"Response","","An HTTP Response",null,null],[4,"Method","","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",0,null],[13,"Get","","GET",0,null],[13,"Post","","POST",0,null],[13,"Put","","PUT",0,null],[13,"Delete","","DELETE",0,null],[13,"Head","","HEAD",0,null],[13,"Trace","","TRACE",0,null],[13,"Connect","","CONNECT",0,null],[13,"Patch","","PATCH",0,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",0,null],[4,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",1,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",1,null],[13,"Processing","","102 Processing [RFC2518]",1,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",1,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",1,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",1,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",1,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",1,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",1,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",1,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",1,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",1,null],[13,"ImUsed","","226 IM Used [RFC3229]",1,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",1,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",1,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",1,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",1,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",1,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",1,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",1,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",1,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",1,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",1,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",1,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",1,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",1,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",1,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",1,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",1,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",1,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",1,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",1,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",1,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",1,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",1,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",1,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",1,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",1,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",1,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",1,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",1,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",1,null],[13,"Locked","","423 Locked [RFC4918]",1,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",1,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",1,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",1,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",1,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",1,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",1,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",1,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",1,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",1,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",1,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",1,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",1,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",1,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",1,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",1,null],[13,"NotExtended","","510 Not Extended [RFC2774]",1,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",1,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",1,null],[4,"HttpVersion","","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",2,null],[13,"Http10","","`HTTP/1.0`",2,null],[13,"Http11","","`HTTP/1.1`",2,null],[13,"H2","","`HTTP/2.0` over TLS",2,null],[13,"H2c","","`HTTP/2.0` over cleartext",2,null],[0,"client","","HTTP Client",null,null],[8,"Service","hyper::client","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",3,null],[16,"Response","","Responses given by the service.",3,null],[16,"Error","","Errors produced by the service.",3,null],[16,"Future","","The future response value.",3,null],[10,"call","","Process the request and return the response asynchronously.",3,null],[3,"Response","","An HTTP Response",null,null],[3,"Request","","An HTTP Request",null,null],[3,"HttpConnector","","A connector for the `http` scheme.",null,null],[3,"Client","","A Client to make outgoing HTTP requests.",null,null],[3,"FutureResponse","","A `Future` that will resolve to an HTTP Response.",null,null],[3,"Config","","Configuration for a Client",null,null],[3,"UseDefaultConnector","","Phantom type used to signal that `Config` should create a `HttpConnector`.",null,null],[0,"conn","","Lower-level client connection API.",null,null],[3,"SendRequest","hyper::client::conn","The sender side of an established connection.",null,null],[3,"Connection","","A future that processes all HTTP state for the IO object.",null,null],[3,"Builder","","A builder to configure an HTTP connection.",null,null],[3,"Handshake","","A future setting up HTTP over an IO object.",null,null],[3,"ResponseFuture","","A future returned by `SendRequest::send_request`.",null,null],[3,"Parts","","Deconstructed parts of a `Connection`.",null,null],[12,"io","","The original IO object used in the handshake.",4,null],[12,"read_buf","","A buffer of bytes that have been read but not processed as HTTP.",4,null],[5,"handshake","","Returns a `Handshake` future over some IO.",null,{"inputs":[{"name":"t"}],"output":{"generics":["body"],"name":"handshake"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_ready","","Polls to determine whether this sender can be used yet for a request.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"send_request","","Sends a `Request` on the associated connection.",6,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"responsefuture"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_parts","","Return the inner IO object, and additional information.",7,{"inputs":[{"name":"self"}],"output":{"name":"parts"}}],[11,"poll_without_shutdown","","Poll the connection for completion, but without calling `shutdown` on the underlying IO.",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new connection builder.",5,{"inputs":[],"output":{"name":"builder"}}],[11,"handshake","","Constructs a connection with the configured options and IO.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"handshake"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","hyper::client","",10,{"inputs":[{"name":"self"}],"output":{"name":"httpconnector"}}],[11,"new","","Construct a new HttpConnector.",10,{"inputs":[{"name":"usize"},{"name":"handle"}],"output":{"name":"httpconnector"}}],[11,"new_with_executor","","Construct a new HttpConnector.",10,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"httpconnector"}}],[11,"enforce_http","","Option to enforce all `Uri`s have the `http` scheme.",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_keepalive","","Set that all sockets have `SO_KEEPALIVE` set with the supplied duration.",10,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"call","","",10,null],[8,"Connect","","A connector creates an Io to a remote address..",null,null],[16,"Output","","The connected Io Stream.",11,null],[16,"Future","","A Future that will resolve to the connected Stream.",11,null],[10,"connect","","Connect to a remote address.",11,null],[11,"new","","Create a new Client with the default config.",12,{"inputs":[{"name":"handle"}],"output":{"generics":["httpconnector","body"],"name":"client"}}],[11,"configure","","Configure a Client.",12,{"inputs":[],"output":{"generics":["usedefaultconnector","body"],"name":"config"}}],[11,"get","","Send a GET Request using this Client.",12,{"inputs":[{"name":"self"},{"name":"uri"}],"output":{"name":"futureresponse"}}],[11,"request","","Send a constructed Request using this Client.",12,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"futureresponse"}}],[11,"call","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"client"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usedefaultconnector"}}],[11,"default","","",15,{"inputs":[],"output":{"generics":["usedefaultconnector","body"],"name":"config"}}],[11,"body","","Set the body stream to be used by the `Client`.",15,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"connector","","Set the `Connect` type to be used.",15,{"inputs":[{"name":"self"},{"name":"cc"}],"output":{"name":"config"}}],[11,"keep_alive","","Enable or disable keep-alive mechanics.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"keep_alive_timeout","","Set an optional timeout for idle sockets being kept-alive.",15,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"config"}}],[11,"http1_writev","","Set whether HTTP/1 connections should try to use vectored writes, or always flatten into a single buffer.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"retry_canceled_requests","","Set whether to retry requests that get disrupted before ever starting to write.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"set_host","","Set whether to automatically add the `Host` header to requests.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"build","","Construct the Client with this configuration.",15,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"client"}}],[11,"executor","","Construct a Client with this configuration and an executor.",15,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"client"}}],[11,"build","","Construct the Client with this configuration.",15,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"generics":["httpconnector"],"name":"client"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[0,"error","hyper","Error and Result module.",null,null],[3,"UriError","hyper::error","An error parsing a `Uri`.",null,null],[3,"Canceled","","A pending item was dropped before ever being processed.",null,null],[4,"Error","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",16,null],[13,"Uri","","An invalid `Uri`, such as `exam ple.domain`.",16,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",16,null],[13,"Header","","An invalid `Header`.",16,null],[13,"TooLarge","","A message head is too large to be reasonable.",16,null],[13,"Incomplete","","A message reached EOF, but is not complete.",16,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",16,null],[13,"Timeout","","A timeout occurred waiting for an IO event.",16,null],[13,"Upgrade","","A protocol upgrade was encountered, but not yet supported in hyper.",16,null],[13,"Cancel","","A pending item was dropped before ever being processed.",16,null],[13,"Closed","","Indicates a connection is closed.",16,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",16,null],[13,"Utf8","","Parsing a field as string failed",16,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"from","","",16,{"inputs":[{"name":"urierror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","hyper","",0,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["method","error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"method"}}],[0,"header","","Headers container, and common header fields.",null,null],[3,"LanguageTag","hyper::header","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",18,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",18,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",18,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",18,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",18,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",18,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",18,null],[3,"EntityTag","","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",19,null],[3,"HttpDate","","A timestamp with HTTP formatting and parsing",null,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",20,null],[12,"quality","","The quality (client or server preference) for the value.",20,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",21,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",22,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",23,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",24,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",25,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",26,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",27,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",28,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",29,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",30,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",31,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",32,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",33,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",34,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input. Note: A compliant client MUST always send a password (which may be the empty string).",34,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",35,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",36,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",37,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266.",null,null],[12,"disposition","","The disposition",38,null],[12,"parameters","","Disposition parameters",38,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",39,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",40,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",41,null],[3,"ContentLocation","","`Content-Location` header, defined in RFC7231",null,null],[12,"0","","",42,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",43,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",44,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[3,"CookieIter","","Iterator for cookie.",null,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",45,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",46,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",47,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",48,null],[3,"Host","","The `Host` header.",null,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",49,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",50,null],[3,"LastEventId","","`Last-Event-ID` header, defined in RFC3864",null,null],[12,"0","","",51,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",52,null],[3,"Link","","The `Link` header, defined in RFC5988",null,null],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",null,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[3,"Origin","","The `Origin` header.",null,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",53,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",54,null],[3,"ProxyAuthorization","","`Proxy-Authorization` header, defined in RFC7235",null,null],[12,"0","","",55,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",56,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",57,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",57,null],[3,"Te","","`TE` header, defined in RFC7230",null,null],[12,"0","","",58,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",59,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",60,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",61,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",61,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[3,"Warning","","`Warning` header, defined in RFC7234",null,null],[12,"code","","The 3 digit warn code.",62,null],[12,"agent","","The name or pseudonym of the server adding this header.",62,null],[12,"text","","The warning message describing the error.",62,null],[12,"date","","An optional warning date.",62,null],[3,"Raw","","A raw header value.",null,null],[3,"Formatter","","A formatter used to serialize headers to an output stream.",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",63,null],[13,"Iso_8859_1","","ISO-8859-1",63,null],[13,"Iso_8859_2","","ISO-8859-2",63,null],[13,"Iso_8859_3","","ISO-8859-3",63,null],[13,"Iso_8859_4","","ISO-8859-4",63,null],[13,"Iso_8859_5","","ISO-8859-5",63,null],[13,"Iso_8859_6","","ISO-8859-6",63,null],[13,"Iso_8859_7","","ISO-8859-7",63,null],[13,"Iso_8859_8","","ISO-8859-8",63,null],[13,"Iso_8859_9","","ISO-8859-9",63,null],[13,"Iso_8859_10","","ISO-8859-10",63,null],[13,"Shift_Jis","","Shift_JIS",63,null],[13,"Euc_Jp","","EUC-JP",63,null],[13,"Iso_2022_Kr","","ISO-2022-KR",63,null],[13,"Euc_Kr","","EUC-KR",63,null],[13,"Iso_2022_Jp","","ISO-2022-JP",63,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",63,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",63,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",63,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",63,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",63,null],[13,"Gb2312","","GB2312",63,null],[13,"Big5","","Big5",63,null],[13,"Koi8_R","","KOI8-R",63,null],[13,"Ext","","An arbitrary charset specified as a string",63,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",64,null],[13,"Brotli","","The `br` encoding.",64,null],[13,"Gzip","","The `gzip` encoding.",64,null],[13,"Deflate","","The `deflate` encoding.",64,null],[13,"Compress","","The `compress` encoding.",64,null],[13,"Identity","","The `identity` encoding.",64,null],[13,"Trailers","","The `trailers` encoding.",64,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",64,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",65,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",65,null],[13,"Unregistered","","The given range unit is not registered at IANA.",65,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",66,null],[13,"Null","","A hidden origin",66,null],[13,"Value","","Allow one particular origin",66,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",67,null],[13,"NoStore","","\"no-store\"",67,null],[13,"NoTransform","","\"no-transform\"",67,null],[13,"OnlyIfCached","","\"only-if-cached\"",67,null],[13,"MaxAge","","\"max-age=delta\"",67,null],[13,"MaxStale","","\"max-stale=delta\"",67,null],[13,"MinFresh","","\"min-fresh=delta\"",67,null],[13,"MustRevalidate","","\"must-revalidate\"",67,null],[13,"Public","","\"public\"",67,null],[13,"Private","","\"private\"",67,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",67,null],[13,"SMaxAge","","\"s-maxage=delta\"",67,null],[13,"Extension","","Extension directives. Optionally include an argument.",67,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",68,null],[13,"Close","","The `close` connection value.",68,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",68,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body.",null,null],[13,"Inline","","Inline implies default processing",69,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",69,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",69,null],[4,"DispositionParam","","A parameter to the disposition type.",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",70,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",70,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",71,null],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",71,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",71,null],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",71,null],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",71,null],[12,"resp","","other-range-resp",71,null],[4,"Expect","hyper::header","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",72,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",73,null],[13,"Items","","Only the listed items are a match",73,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",74,null],[13,"Items","","Only the listed items are a match",74,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",75,null],[13,"Date","","The date when the client retrieved the resource",75,null],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",null,null],[13,"Alternate","","alternate.",76,null],[13,"Appendix","","appendix.",76,null],[13,"Bookmark","","bookmark.",76,null],[13,"Chapter","","chapter.",76,null],[13,"Contents","","contents.",76,null],[13,"Copyright","","copyright.",76,null],[13,"Current","","current.",76,null],[13,"DescribedBy","","describedby.",76,null],[13,"Edit","","edit.",76,null],[13,"EditMedia","","edit-media.",76,null],[13,"Enclosure","","enclosure.",76,null],[13,"First","","first.",76,null],[13,"Glossary","","glossary.",76,null],[13,"Help","","help.",76,null],[13,"Hub","","hub.",76,null],[13,"Index","","index.",76,null],[13,"Last","","last.",76,null],[13,"LatestVersion","","latest-version.",76,null],[13,"License","","license.",76,null],[13,"Next","","next.",76,null],[13,"NextArchive","","next-archive.",76,null],[13,"Payment","","payment.",76,null],[13,"Prev","","prev.",76,null],[13,"PredecessorVersion","","predecessor-version.",76,null],[13,"Previous","","previous.",76,null],[13,"PrevArchive","","prev-archive.",76,null],[13,"Related","","related.",76,null],[13,"Replies","","replies.",76,null],[13,"Section","","section.",76,null],[13,"RelationTypeSelf","","self.",76,null],[13,"Service","","service.",76,null],[13,"Start","","start.",76,null],[13,"Stylesheet","","stylesheet.",76,null],[13,"Subsection","","subsection.",76,null],[13,"SuccessorVersion","","successor-version.",76,null],[13,"Up","","up.",76,null],[13,"VersionHistory","","versionHistory.",76,null],[13,"Via","","via.",76,null],[13,"WorkingCopy","","working-copy.",76,null],[13,"WorkingCopyOf","","working-copy-of.",76,null],[13,"ExtRelType","","ext-rel-type.",76,null],[4,"MediaDesc","","A Media Descriptors Enum based on: [https://www.w3.org/TR/html401/types.html#h-6.13][url]",null,null],[13,"Screen","","screen.",77,null],[13,"Tty","","tty.",77,null],[13,"Tv","","tv.",77,null],[13,"Projection","","projection.",77,null],[13,"Handheld","","handheld.",77,null],[13,"Print","","print.",77,null],[13,"Braille","","braille.",77,null],[13,"Aural","","aural.",77,null],[13,"All","","all.",77,null],[13,"Extension","","Unrecognized media descriptor extension.",77,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",78,null],[13,"Ext","","Every value other than `no-cache`.",78,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",79,null],[13,"ReturnRepresentation","","\"return=representation\"",79,null],[13,"ReturnMinimal","","\"return=minimal\"",79,null],[13,"HandlingStrict","","\"handling=strict\"",79,null],[13,"HandlingLenient","","\"handling=lenient\"",79,null],[13,"Wait","","\"wait=delta\"",79,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",79,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",80,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",80,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",81,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",81,null],[13,"Last","","Get last x bytes (\"-x\")",81,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",82,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",82,null],[13,"SameOrigin","","`same-origin`",82,null],[13,"Origin","","`origin`",82,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",82,null],[13,"UnsafeUrl","","`unsafe-url`",82,null],[13,"StrictOrigin","","`strict-origin`",82,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",82,null],[4,"RetryAfter","","The `Retry-After` header.",null,null],[13,"Delay","","Retry after this duration has elapsed",83,null],[13,"DateTime","","Retry after the given DateTime",83,null],[4,"ProtocolName","","A protocol name used to identify a specific protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",84,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",84,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",84,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",84,null],[13,"Unregistered","","Any other protocol name not known to hyper",84,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",85,null],[13,"Items","","Only the listed items are a match",85,null],[5,"qitem","","Convenience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float or integer.",null,{"inputs":[{"name":"t"}],"output":{"name":"quality"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",22,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",24,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"from_str","","",65,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"star","","A constructor to easily create `Accept: */*`.",25,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",25,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",25,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",25,{"inputs":[],"output":{"name":"accept"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",86,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",86,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolallowcredentials"],"name":"result"}}],[11,"fmt_header","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",26,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",66,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolalloworigin"],"name":"result"}}],[11,"fmt_header","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"header_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",29,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",30,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"header_name","","",33,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",33,{"inputs":[{"name":"raw"}],"output":{"generics":["authorization"],"name":"result"}}],[11,"fmt_header","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",34,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"fmt_scheme","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",34,{"inputs":[{"name":"str"}],"output":{"generics":["basic"],"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",35,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"fmt_scheme","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",35,{"inputs":[{"name":"str"}],"output":{"generics":["bearer"],"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",36,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",36,{"inputs":[{"name":"raw"}],"output":{"generics":["cachecontrol"],"name":"result"}}],[11,"fmt_header","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",67,{"inputs":[{"name":"str"}],"output":{"generics":["cachedirective","option"],"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",68,{"inputs":[{"name":"str"}],"output":{"generics":["connectionoption"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",37,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",37,{"inputs":[],"output":{"name":"connection"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,{"inputs":[{"name":"raw"}],"output":{"generics":["contentdisposition"],"name":"result"}}],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",40,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,{"inputs":[{"name":"raw"}],"output":{"generics":["contentlength"],"name":"result"}}],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"contentlocation"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"header_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",43,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",71,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"text","","A constructor  to easily create a `Content-Type: text/plain` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"text_utf8","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"xml","","A constructor  to easily create a `Content-Type: text/xml` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"octet_stream","","A constructor  to easily create a `Content-Type: application/octet-stream` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"new","","Creates a new `Cookie` header.",87,{"inputs":[],"output":{"name":"cookie"}}],[11,"set","","Sets a name and value for the `Cookie`.",87,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"append","","Append a name and value for the `Cookie`.",87,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"get","","Get a value for the name, if it exists.",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[11,"iter","","Iterate cookies.",87,{"inputs":[{"name":"self"}],"output":{"name":"cookieiter"}}],[11,"header_name","","",87,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",87,{"inputs":[{"name":"raw"}],"output":{"generics":["cookie"],"name":"result"}}],[11,"fmt_header","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"header_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",46,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",72,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",72,{"inputs":[{"name":"raw"}],"output":{"generics":["expect"],"name":"result"}}],[11,"fmt_header","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",47,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"deref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",48,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a `Host` header, providing the hostname and optional port.",89,{"inputs":[{"name":"h"},{"name":"p"}],"output":{"name":"host"}}],[11,"hostname","","Get the hostname, such as example.domain.",89,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"port","","Get the optional port number.",89,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"header_name","","",89,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",89,{"inputs":[{"name":"raw"}],"output":{"generics":["host"],"name":"result"}}],[11,"fmt_header","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",89,{"inputs":[{"name":"str"}],"output":{"generics":["host"],"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"header_name","","",73,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",73,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",49,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"header_name","","",74,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",74,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"header_name","","",75,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",75,{"inputs":[{"name":"raw"}],"output":{"generics":["ifrange"],"name":"result"}}],[11,"fmt_header","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",50,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"lasteventid"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"lasteventid"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"lasteventid"}],"output":{"name":"bool"}}],[11,"header_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",51,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",51,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"linkvalue"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"mediadesc"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"relationtype"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",90,{"inputs":[{"generics":["linkvalue"],"name":"vec"}],"output":{"name":"link"}}],[11,"values","","Get the `Link` header's `LinkValue`s.",90,null],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",90,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":null}],[11,"new","","Create `LinkValue` from URI-Reference.",91,{"inputs":[{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"link","","Get the `LinkValue`'s value.",91,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",91,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title","","Get the `LinkValue`'s `title` parameter.",91,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",91,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",91,{"inputs":[{"name":"self"}],"output":{"generics":["mime"],"name":"option"}}],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",91,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",91,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",91,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"linkvalue"}}],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",91,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"linkvalue"}}],[11,"set_title","","Set `LinkValue`'s `title` parameter.",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",91,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"linkvalue"}}],[11,"header_name","","",90,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",90,{"inputs":[{"name":"raw"}],"output":{"generics":["link"],"name":"result"}}],[11,"fmt_header","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",90,{"inputs":[{"name":"str"}],"output":{"generics":["link"],"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",77,{"inputs":[{"name":"str"}],"output":{"generics":["mediadesc"],"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",76,{"inputs":[{"name":"str"}],"output":{"generics":["relationtype"],"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",92,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",92,null],[11,"header_name","","",92,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",92,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Origin` header.",93,{"inputs":[{"name":"s"},{"name":"h"},{"generics":["u16"],"name":"option"}],"output":{"name":"origin"}}],[11,"null","","Creates a `Null` `Origin` header.",93,{"inputs":[],"output":{"name":"origin"}}],[11,"is_null","","Checks if `Origin` is `Null`.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"scheme","","The scheme, such as http or https.",93,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","The host, such as `Host { hostname: \"hyper.rs\".to_owned(), port: None}`.",93,{"inputs":[{"name":"self"}],"output":{"generics":["host"],"name":"option"}}],[11,"header_name","","",93,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",93,{"inputs":[{"name":"raw"}],"output":{"generics":["origin"],"name":"result"}}],[11,"fmt_header","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",93,{"inputs":[{"name":"str"}],"output":{"generics":["origin"],"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",78,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",78,{"inputs":[{"name":"raw"}],"output":{"generics":["pragma"],"name":"result"}}],[11,"fmt_header","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",53,{"inputs":[{"name":"raw"}],"output":{"generics":["prefer"],"name":"result"}}],[11,"fmt_header","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",79,{"inputs":[{"name":"str"}],"output":{"generics":["preference","option"],"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,{"inputs":[{"name":"raw"}],"output":{"generics":["preferenceapplied"],"name":"result"}}],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"proxyauthorization"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"proxyauthorization"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"proxyauthorization"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"header_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",55,{"inputs":[{"name":"raw"}],"output":{"generics":["proxyauthorization"],"name":"result"}}],[11,"fmt_header","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_satisfiable_range","","Given the full length of the entity, attempt to normalize the byte range into an satisfiable end-inclusive (from, to) range.",81,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",80,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",80,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",80,{"inputs":[{"name":"str"}],"output":{"generics":["range"],"name":"result"}}],[11,"from_str","","",81,{"inputs":[{"name":"str"}],"output":{"generics":["byterangespec"],"name":"result"}}],[11,"header_name","","",80,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",80,{"inputs":[{"name":"raw"}],"output":{"generics":["range"],"name":"result"}}],[11,"fmt_header","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",94,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",94,null],[11,"header_name","","",94,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",94,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",82,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",82,{"inputs":[{"name":"raw"}],"output":{"generics":["referrerpolicy"],"name":"result"}}],[11,"fmt_header","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"retryafter"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"retryafter"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"retryafter"}],"output":{"name":"bool"}}],[11,"header_name","","",83,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",83,{"inputs":[{"name":"raw"}],"output":{"generics":["retryafter"],"name":"result"}}],[11,"fmt_header","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",95,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",95,null],[11,"header_name","","",95,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",95,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",56,{"inputs":[{"name":"raw"}],"output":{"generics":["setcookie"],"name":"result"}}],[11,"fmt_header","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",57,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",57,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",57,{"inputs":[{"name":"str"}],"output":{"generics":["stricttransportsecurity"],"name":"result"}}],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,{"inputs":[{"name":"raw"}],"output":{"generics":["stricttransportsecurity"],"name":"result"}}],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"te"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"te"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"te"}],"output":{"name":"bool"}}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",58,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"chunked","","Constructor for the most common Transfer-Encoding, `chunked`.",59,{"inputs":[],"output":{"name":"transferencoding"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",60,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"from_str","","",84,{"inputs":[{"name":"str"}],"output":{"generics":["protocolname"],"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Protocol with the given name and version",61,{"inputs":[{"name":"protocolname"},{"generics":["string"],"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",61,{"inputs":[{"name":"str"}],"output":{"generics":["protocol"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",96,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",96,null],[11,"header_name","","",96,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",96,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"header_name","","",85,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",85,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"warning"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",62,{"inputs":[{"name":"raw"}],"output":{"generics":["warning"],"name":"result"}}],[11,"fmt_header","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",62,{"inputs":[{"name":"str"}],"output":{"generics":["warning"],"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the amount of lines.",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"one","","Returns the line if there is only 1.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Iterate the lines of raw bytes.",97,{"inputs":[{"name":"self"}],"output":{"name":"rawlines"}}],[11,"push","","Append a line to this `Raw` header value.",97,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"eq","","",97,null],[11,"eq","","",97,null],[11,"eq","","",97,null],[11,"eq","","",97,null],[11,"eq","","",97,null],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from","","",97,{"inputs":[{"generics":["vec"],"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",97,{"inputs":[{"name":"string"}],"output":{"name":"raw"}}],[11,"from","","",97,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",97,{"inputs":[{"name":"str"}],"output":{"name":"raw"}}],[11,"from","","",97,null],[11,"from","","",97,{"inputs":[{"name":"bytes"}],"output":{"name":"raw"}}],[11,"index","","",97,null],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",63,{"inputs":[{"name":"str"}],"output":{"generics":["charset"],"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",64,{"inputs":[{"name":"str"}],"output":{"generics":["encoding"],"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",19,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",19,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",19,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["entitytag"],"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"cmp","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"from_str","","",98,{"inputs":[{"name":"str"}],"output":{"generics":["httpdate"],"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",98,{"inputs":[{"name":"systemtime"}],"output":{"name":"httpdate"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"quality"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",20,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",20,{"inputs":[{"name":"str"}],"output":{"generics":["qualityitem"],"name":"result"}}],[0,"parsing","","Utility functions for Header implementations.",null,null],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",100,null],[12,"language_tag","","The human language details of the `value`, if available.",100,null],[12,"value","","The parameter value, as expressed in octets.",100,null],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",null,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,{"inputs":[{"name":"raw"}],"output":{"generics":["vec"],"name":"result"}}],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"generics":["extendedvalue"],"name":"result"}}],[5,"http_percent_encode","","Percent encode a sequence of bytes with a character set defined in [https://tools.ietf.org/html/rfc5987#section-3.2][url]",null,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",101,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Header","","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",102,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",102,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[10,"fmt_header","","Format a header to outgoing stream.",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_line","","Format one 'line' of a header.",103,{"inputs":[{"name":"self"},{"name":"display"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"headers"}}],[11,"new","","Creates a new, empty headers map.",104,{"inputs":[],"output":{"name":"headers"}}],[11,"with_capacity","","Creates a new `Headers` struct with space reserved for `len` headers.",104,{"inputs":[{"name":"usize"}],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",104,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"get","","Get a reference to the header field's value, if it exists.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns the header, if one has been removed and could be parsed.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the header fields.",104,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",104,{"inputs":[{"name":"self"}],"output":null}],[11,"get_raw","","Access the raw value of a header.",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["raw"],"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",104,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"append_raw","","Append a value to raw value of this header.",104,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"remove_raw","","Remove a header by name.",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["headerview"],"name":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",106,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",106,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"raw","","Access the raw value of the header.",106,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",104,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",104,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",104,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"empty","hyper","Return an empty body stream",107,{"inputs":[],"output":{"name":"body"}}],[11,"pair","","Return a body stream with an associated sender half",107,null],[11,"is_empty","","Returns if this body was constructed via `Body::empty()`.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"body"}}],[11,"poll","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",107,{"inputs":[{"generics":["result"],"name":"receiver"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"name":"chunk"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"name":"bytes"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"body"}}],[11,"from","","",107,null],[11,"from","","",107,{"inputs":[{"name":"cow"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"name":"string"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"name":"str"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"generics":["body"],"name":"option"}],"output":{"name":"body"}}],[11,"from","","",108,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"chunk"}}],[11,"from","","",108,null],[11,"from","","",108,{"inputs":[{"name":"string"}],"output":{"name":"chunk"}}],[11,"from","","",108,{"inputs":[{"name":"str"}],"output":{"name":"chunk"}}],[11,"from","","",108,{"inputs":[{"name":"bytes"}],"output":{"name":"chunk"}}],[11,"deref","","",108,null],[11,"as_ref","","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",108,{"inputs":[],"output":{"name":"chunk"}}],[11,"into_iter","","",108,null],[11,"extend","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"new","","Construct a new Request.",109,{"inputs":[{"name":"method"},{"name":"uri"}],"output":{"name":"request"}}],[11,"uri","","Read the Request Uri.",109,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"version","","Read the Request Version.",109,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"headers","","Read the Request headers.",109,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"method","","Read the Request method.",109,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"body_ref","","Read the Request body.",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"body_mut","","Get a mutable reference to the Request body.",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"path","","The target path of this Request.",109,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"query","","The query string of this Request.",109,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"set_method","","Set the Method of this request.",109,{"inputs":[{"name":"self"},{"name":"method"}],"output":null}],[11,"headers_mut","","Get a mutable reference to the Request headers.",109,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"set_uri","","Set the `Uri` of this request.",109,{"inputs":[{"name":"self"},{"name":"uri"}],"output":null}],[11,"set_version","","Set the `HttpVersion` of this request.",109,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":null}],[11,"set_body","","Set the body of the request.",109,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"set_proxy","","Set that the URI should use the absolute form.",109,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"deconstruct","","Deconstruct this Request into its pieces.",109,null],[11,"body","","Take the Request body.",109,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a default response",110,{"inputs":[],"output":{"name":"response"}}],[11,"version","","Get the HTTP version of this response.",110,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"headers","","Get the headers from the response.",110,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"headers_mut","","Get a mutable reference to the headers.",110,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"status","","Get the status from the server.",110,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"set_status","","Set the `StatusCode` for this response.",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":null}],[11,"with_status","","Set the status and move the Response.",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"self"}}],[11,"with_header","","Set a header and move the Response.",110,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"self"}}],[11,"with_headers","","Set the headers and move the Response.",110,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"self"}}],[11,"set_body","","Set the body.",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_body","","Set the body and move the Response.",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"body_ref","","Read the body.",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"body","","Take the `Body` of this response.",110,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"response"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"server","","HTTP Server",null,null],[8,"NewService","hyper::server","Creates new `Service` values.",null,null],[16,"Request","","Requests handled by the service",111,null],[16,"Response","","Responses given by the service",111,null],[16,"Error","","Errors produced by the service",111,null],[16,"Instance","","The `Service` value created by this factory",111,null],[10,"new_service","","Create and return a new service value.",111,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[8,"Service","","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",3,null],[16,"Response","","Responses given by the service.",3,null],[16,"Error","","Errors produced by the service.",3,null],[16,"Future","","The future response value.",3,null],[10,"call","","Process the request and return the response asynchronously.",3,null],[3,"Response","","An HTTP Response",null,null],[3,"Request","","An HTTP Request",null,null],[3,"Http","","A configuration of the HTTP protocol.",null,null],[3,"Server","","An instance of a server created through `Http::bind`.",null,null],[3,"Serve","","A stream mapping incoming IOs to new services.",null,null],[3,"AddrIncoming","","A stream of connections from binding to an address.",null,null],[5,"const_service","","Create a `NewService` by sharing references of `service.",null,{"inputs":[{"name":"s"}],"output":{"name":"constservice"}}],[5,"service_fn","","Create a `Service` from a function.",null,{"inputs":[{"name":"f"}],"output":{"name":"servicefn"}}],[0,"conn","","Lower-level Server connection API.",null,null],[3,"Connection","hyper::server::conn","A future binding a connection with a Service.",null,null],[3,"Parts","","Deconstructed parts of a `Connection`.",null,null],[12,"io","","The original IO object used in the handshake.",112,null],[12,"read_buf","","A buffer of bytes that have been read but not processed as HTTP.",112,null],[12,"service","","The `Service` used to serve this connection.",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"disable_keep_alive","","Disables keep-alive for this connection.",113,{"inputs":[{"name":"self"}],"output":null}],[11,"into_parts","","Return the inner IO object, and additional information.",113,{"inputs":[{"name":"self"}],"output":{"name":"parts"}}],[11,"poll_without_shutdown","","Poll the connection for completion, but without calling `shutdown` on the underlying IO.",113,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind_connection","hyper::server","Use this `Http` instance to create a new server task which handles the connection `io` provided.",114,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"i"},{"name":"socketaddr"},{"name":"s"}],"output":null}],[11,"bind_transport","","",114,null],[11,"from","hyper","",109,{"inputs":[{"generics":["__protorequest","body"],"name":"message"}],"output":{"name":"request"}}],[11,"into","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["__protoresponse"],"name":"message"}}],[11,"fmt","hyper::server","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of the HTTP protocol, ready to spawn a server or start accepting connections.",114,{"inputs":[],"output":{"name":"http"}}],[11,"keep_alive","","Enables or disables HTTP keep-alive.",114,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"max_buf_size","","Set the maximum buffer size for the connection.",114,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pipeline","","Aggregates flushes to better support pipelined responses.",114,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"sleep_on_errors","","Swallow connection accept errors. Instead of passing up IO errors when the server is under heavy load the errors will be ignored. Some connection accept errors (like \"connection reset\") can be ignored, some (like \"too many files open\") may consume 100% CPU and a timout of 10ms is used in that case.",114,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"bind","","Bind the provided `addr` and return a server ready to handle connections.",114,{"inputs":[{"name":"self"},{"name":"socketaddr"},{"name":"s"}],"output":{"generics":["server"],"name":"result"}}],[11,"serve_addr_handle","","Bind the provided `addr` and return a server with a shared `Core`.",114,{"inputs":[{"name":"self"},{"name":"socketaddr"},{"name":"handle"},{"name":"s"}],"output":{"generics":["serve"],"name":"result"}}],[11,"serve_incoming","","Bind the provided stream of incoming IO objects with a `NewService`.",114,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":{"name":"serve"}}],[11,"serve_connection","","Bind a connection together with a Service.",114,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":{"name":"connection"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"http"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local address that this server is bound to.",117,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"handle","","Returns a handle to the underlying event loop that this server will be running on.",117,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_timeout","","Configure the amount of time this server will wait for a \"graceful shutdown\".",117,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"run","","Execute this server infinitely.",117,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run_until","","Execute this server until the given future, `shutdown_signal`, resolves.",117,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"run_threads","","Run the server on multiple threads.",117,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"incoming_ref","","Get a reference to the incoming stream.",115,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"poll","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"local_addr","","Get the local address bound to this listener.",116,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"poll","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","hyper","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"try_from","","Try to convert a `u16` into a `StatusCode`.",1,{"inputs":[{"name":"u16"}],"output":{"generics":["statuscode","invalidstatuscode"],"name":"result"}}],[11,"as_u16","","Get the `u16` code from this `StatusCode`.",1,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",1,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_informational","","Check if this `StatusCode` is within 100-199.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if this `StatusCode` is within 200-299.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if this `StatusCode` is within 300-399.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if this `StatusCode` is within 400-499.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if this `StatusCode` is within 500-599.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if this `StatusCode` is not within 100-599.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"statuscode"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"hash","","",118,null],[11,"path","","Get the path of this `Uri`.",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"scheme","","Get the scheme of this `Uri`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"authority","","Get the authority of this `Uri`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","Get the host of this `Uri`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"port","","Get the port of this `Uri`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_absolute","","Returns whether this URI is in `absolute-form`.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",118,{"inputs":[{"name":"str"}],"output":{"generics":["uri","urierror"],"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"uri"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"as_ref","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"uri"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","hyper::error","",119,{"inputs":[{"name":"self"}],"output":{"name":"urierror"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","hyper","",2,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["httpversion","error"],"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"httpversion"}}],[14,"header","","",null,null],[11,"default","hyper::header","",18,{"inputs":[],"output":{"name":"languagetag"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"generics":["languagetag","error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",18,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",18,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}]],"paths":[[4,"Method"],[4,"StatusCode"],[4,"HttpVersion"],[8,"Service"],[3,"Parts"],[3,"Builder"],[3,"SendRequest"],[3,"Connection"],[3,"Handshake"],[3,"ResponseFuture"],[3,"HttpConnector"],[8,"Connect"],[3,"Client"],[3,"FutureResponse"],[3,"UseDefaultConnector"],[3,"Config"],[4,"Error"],[3,"Canceled"],[3,"LanguageTag"],[3,"EntityTag"],[3,"QualityItem"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLength"],[3,"ContentLocation"],[3,"ContentRange"],[3,"ContentType"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastEventId"],[3,"LastModified"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"ProxyAuthorization"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"Te"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"Warning"],[4,"Charset"],[4,"Encoding"],[4,"RangeUnit"],[4,"AccessControlAllowOrigin"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"RelationType"],[4,"MediaDesc"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"RetryAfter"],[4,"ProtocolName"],[4,"Vary"],[3,"AccessControlAllowCredentials"],[3,"Cookie"],[3,"CookieIter"],[3,"Host"],[3,"Link"],[3,"LinkValue"],[3,"Location"],[3,"Origin"],[3,"Referer"],[3,"Server"],[3,"UserAgent"],[3,"Raw"],[3,"HttpDate"],[3,"Quality"],[3,"ExtendedValue"],[8,"Scheme"],[8,"Header"],[3,"Formatter"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"Body"],[3,"Chunk"],[3,"Request"],[3,"Response"],[8,"NewService"],[3,"Parts"],[3,"Connection"],[3,"Http"],[3,"Serve"],[3,"AddrIncoming"],[3,"Server"],[3,"Uri"],[3,"UriError"]]};
searchIndex["hyper_tls"] = {"doc":"hyper-tls","items":[[3,"Error","hyper_tls","An error returned from the TLS implementation.",null,null],[3,"HttpsConnector","","A Connector for the `https` scheme.",null,null],[3,"HttpsConnecting","","A Future representing work to connect to a URL, and a TLS handshake.",null,null],[4,"MaybeHttpsStream","","A stream that might be protected with TLS.",null,null],[13,"Http","","A stream over plain text.",0,null],[13,"Https","","A stream protected with TLS.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"httpsconnector"}}],[11,"new","","Construct a new HttpsConnector.",1,{"inputs":[{"name":"usize"},{"name":"handle"}],"output":{"generics":["error"],"name":"result"}}],[11,"danger_disable_hostname_verification","","Disable hostname verification when connecting.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"from","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"call","","",1,null],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",0,null],[11,"shutdown","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"security_framework_error","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[4,"MaybeHttpsStream"],[3,"HttpsConnector"],[3,"HttpsConnecting"],[3,"Error"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"inputs":[{"name":"str"}],"output":{"generics":["string","errors"],"name":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec"],"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"generics":["string","errors"],"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[7,"PUNYCODE_PREFIX","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["iovec"] = {"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",null,null],[0,"unix","","IoVec extensions for Unix platforms.",null,null],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",null,null],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",null,null],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",null,null],[11,"from_bytes","","",0,null],[11,"from_bytes_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null]],"paths":[[3,"IoVec"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","Write integer to an `io::Write`.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[5,"fmt","","Write integer to an `fmt::Write`.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",null,null]],"paths":[]};
searchIndex["language_tags"] = {"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"langtag","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"__lazy_static_create","","",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["lazycell"] = {"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`, but with frozen contents.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with frozen contents.",null,null],[3,"AtomicLazyCell","","A lazily filled `Cell`, with frozen contents.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"new","","Creates a new, empty, `LazyCell`.",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"fill","","Put a value into this cell.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the duration of the cell itself.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing function to fail.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a copy of the contents of the lazy cell.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"fill","","Put a value into this cell.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a copy of the contents of the lazy cell.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",20,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",21,null],[12,"sin6_family","","",21,null],[12,"sin6_port","","",21,null],[12,"sin6_flowinfo","","",21,null],[12,"sin6_addr","","",21,null],[12,"sin6_scope_id","","",21,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",22,null],[12,"sun_family","","",22,null],[12,"sun_path","","",22,null],[3,"passwd","","",null,null],[12,"pw_name","","",23,null],[12,"pw_passwd","","",23,null],[12,"pw_uid","","",23,null],[12,"pw_gid","","",23,null],[12,"pw_change","","",23,null],[12,"pw_class","","",23,null],[12,"pw_gecos","","",23,null],[12,"pw_dir","","",23,null],[12,"pw_shell","","",23,null],[12,"pw_expire","","",23,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",24,null],[12,"ifa_name","","",24,null],[12,"ifa_flags","","",24,null],[12,"ifa_addr","","",24,null],[12,"ifa_netmask","","",24,null],[12,"ifa_dstaddr","","",24,null],[12,"ifa_data","","",24,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",25,null],[12,"tm_min","","",25,null],[12,"tm_hour","","",25,null],[12,"tm_mday","","",25,null],[12,"tm_mon","","",25,null],[12,"tm_year","","",25,null],[12,"tm_wday","","",25,null],[12,"tm_yday","","",25,null],[12,"tm_isdst","","",25,null],[12,"tm_gmtoff","","",25,null],[12,"tm_zone","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[3,"msghdr","","",null,null],[12,"msg_name","","",27,null],[12,"msg_namelen","","",27,null],[12,"msg_iov","","",27,null],[12,"msg_iovlen","","",27,null],[12,"msg_control","","",27,null],[12,"msg_controllen","","",27,null],[12,"msg_flags","","",27,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",28,null],[12,"cmsg_level","","",28,null],[12,"cmsg_type","","",28,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",29,null],[12,"if_name","","",29,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",30,null],[12,"aio_offset","","",30,null],[12,"aio_buf","","",30,null],[12,"aio_nbytes","","",30,null],[12,"aio_reqprio","","",30,null],[12,"aio_sigevent","","",30,null],[12,"aio_lio_opcode","","",30,null],[3,"utmpx","","",null,null],[12,"ut_user","","",31,null],[12,"ut_id","","",31,null],[12,"ut_line","","",31,null],[12,"ut_pid","","",31,null],[12,"ut_type","","",31,null],[12,"ut_tv","","",31,null],[12,"ut_host","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_pathv","","",32,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",33,null],[12,"ss_family","","",33,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",34,null],[12,"ai_family","","",34,null],[12,"ai_socktype","","",34,null],[12,"ai_protocol","","",34,null],[12,"ai_addrlen","","",34,null],[12,"ai_canonname","","",34,null],[12,"ai_addr","","",34,null],[12,"ai_next","","",34,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",35,null],[12,"denom","","",35,null],[3,"stat","","",null,null],[12,"st_dev","","",36,null],[12,"st_mode","","",36,null],[12,"st_nlink","","",36,null],[12,"st_ino","","",36,null],[12,"st_uid","","",36,null],[12,"st_gid","","",36,null],[12,"st_rdev","","",36,null],[12,"st_atime","","",36,null],[12,"st_atime_nsec","","",36,null],[12,"st_mtime","","",36,null],[12,"st_mtime_nsec","","",36,null],[12,"st_ctime","","",36,null],[12,"st_ctime_nsec","","",36,null],[12,"st_birthtime","","",36,null],[12,"st_birthtime_nsec","","",36,null],[12,"st_size","","",36,null],[12,"st_blocks","","",36,null],[12,"st_blksize","","",36,null],[12,"st_flags","","",36,null],[12,"st_gen","","",36,null],[12,"st_lspare","","",36,null],[12,"st_qspare","","",36,null],[3,"dirent","","",null,null],[12,"d_ino","","",37,null],[12,"d_seekoff","","",37,null],[12,"d_reclen","","",37,null],[12,"d_namlen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",38,null],[12,"si_errno","","",38,null],[12,"si_code","","",38,null],[12,"si_pid","","",38,null],[12,"si_uid","","",38,null],[12,"si_status","","",38,null],[12,"si_addr","","",38,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",39,null],[12,"sa_mask","","",39,null],[12,"sa_flags","","",39,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",40,null],[12,"ss_size","","",40,null],[12,"ss_flags","","",40,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",41,null],[12,"fst_posmode","","",41,null],[12,"fst_offset","","",41,null],[12,"fst_length","","",41,null],[12,"fst_bytesalloc","","",41,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",42,null],[12,"ra_count","","",42,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",43,null],[12,"f_frsize","","",43,null],[12,"f_blocks","","",43,null],[12,"f_bfree","","",43,null],[12,"f_bavail","","",43,null],[12,"f_files","","",43,null],[12,"f_ffree","","",43,null],[12,"f_favail","","",43,null],[12,"f_fsid","","",43,null],[12,"f_flag","","",43,null],[12,"f_namemax","","",43,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",44,null],[12,"dli_fbase","","",44,null],[12,"dli_sname","","",44,null],[12,"dli_saddr","","",44,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",45,null],[12,"sin_family","","",45,null],[12,"sin_port","","",45,null],[12,"sin_addr","","",45,null],[12,"sin_zero","","",45,null],[3,"statfs","","",null,null],[12,"f_bsize","","",46,null],[12,"f_iosize","","",46,null],[12,"f_blocks","","",46,null],[12,"f_bfree","","",46,null],[12,"f_bavail","","",46,null],[12,"f_files","","",46,null],[12,"f_ffree","","",46,null],[12,"f_fsid","","",46,null],[12,"f_owner","","",46,null],[12,"f_type","","",46,null],[12,"f_flags","","",46,null],[12,"f_fssubtype","","",46,null],[12,"f_fstypename","","",46,null],[12,"f_mntonname","","",46,null],[12,"f_mntfromname","","",46,null],[12,"f_reserved","","",46,null],[3,"kevent","","",null,null],[12,"ident","","",47,null],[12,"filter","","",47,null],[12,"flags","","",47,null],[12,"fflags","","",47,null],[12,"data","","",47,null],[12,"udata","","",47,null],[3,"kevent64_s","","",null,null],[12,"ident","","",48,null],[12,"filter","","",48,null],[12,"flags","","",48,null],[12,"fflags","","",48,null],[12,"data","","",48,null],[12,"udata","","",48,null],[12,"ext","","",48,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",49,null],[12,"dqb_bsoftlimit","","",49,null],[12,"dqb_curbytes","","",49,null],[12,"dqb_ihardlimit","","",49,null],[12,"dqb_isoftlimit","","",49,null],[12,"dqb_curinodes","","",49,null],[12,"dqb_btime","","",49,null],[12,"dqb_itime","","",49,null],[12,"dqb_id","","",49,null],[12,"dqb_spare","","",49,null],[3,"if_msghdr","","",null,null],[12,"ifm_msglen","","",50,null],[12,"ifm_version","","",50,null],[12,"ifm_type","","",50,null],[12,"ifm_addrs","","",50,null],[12,"ifm_flags","","",50,null],[12,"ifm_index","","",50,null],[12,"ifm_data","","",50,null],[3,"termios","","",null,null],[12,"c_iflag","","",51,null],[12,"c_oflag","","",51,null],[12,"c_cflag","","",51,null],[12,"c_lflag","","",51,null],[12,"c_cc","","",51,null],[12,"c_ispeed","","",51,null],[12,"c_ospeed","","",51,null],[3,"flock","","",null,null],[12,"l_start","","",52,null],[12,"l_len","","",52,null],[12,"l_pid","","",52,null],[12,"l_type","","",52,null],[12,"l_whence","","",52,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",53,null],[12,"hdr_cnt","","",53,null],[12,"trailers","","",53,null],[12,"trl_cnt","","",53,null],[3,"lconv","","",null,null],[12,"decimal_point","","",54,null],[12,"thousands_sep","","",54,null],[12,"grouping","","",54,null],[12,"int_curr_symbol","","",54,null],[12,"currency_symbol","","",54,null],[12,"mon_decimal_point","","",54,null],[12,"mon_thousands_sep","","",54,null],[12,"mon_grouping","","",54,null],[12,"positive_sign","","",54,null],[12,"negative_sign","","",54,null],[12,"int_frac_digits","","",54,null],[12,"frac_digits","","",54,null],[12,"p_cs_precedes","","",54,null],[12,"p_sep_by_space","","",54,null],[12,"n_cs_precedes","","",54,null],[12,"n_sep_by_space","","",54,null],[12,"p_sign_posn","","",54,null],[12,"n_sign_posn","","",54,null],[12,"int_p_cs_precedes","","",54,null],[12,"int_n_cs_precedes","","",54,null],[12,"int_p_sep_by_space","","",54,null],[12,"int_n_sep_by_space","","",54,null],[12,"int_p_sign_posn","","",54,null],[12,"int_n_sign_posn","","",54,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",55,null],[12,"sigev_signo","","",55,null],[12,"sigev_value","","",55,null],[12,"sigev_notify_attributes","","",55,null],[3,"proc_taskinfo","","",null,null],[12,"pti_virtual_size","","",56,null],[12,"pti_resident_size","","",56,null],[12,"pti_total_user","","",56,null],[12,"pti_total_system","","",56,null],[12,"pti_threads_user","","",56,null],[12,"pti_threads_system","","",56,null],[12,"pti_policy","","",56,null],[12,"pti_faults","","",56,null],[12,"pti_pageins","","",56,null],[12,"pti_cow_faults","","",56,null],[12,"pti_messages_sent","","",56,null],[12,"pti_messages_received","","",56,null],[12,"pti_syscalls_mach","","",56,null],[12,"pti_syscalls_unix","","",56,null],[12,"pti_csw","","",56,null],[12,"pti_threadnum","","",56,null],[12,"pti_numrunning","","",56,null],[12,"pti_priority","","",56,null],[3,"proc_bsdinfo","","",null,null],[12,"pbi_flags","","",57,null],[12,"pbi_status","","",57,null],[12,"pbi_xstatus","","",57,null],[12,"pbi_pid","","",57,null],[12,"pbi_ppid","","",57,null],[12,"pbi_uid","","",57,null],[12,"pbi_gid","","",57,null],[12,"pbi_ruid","","",57,null],[12,"pbi_rgid","","",57,null],[12,"pbi_svuid","","",57,null],[12,"pbi_svgid","","",57,null],[12,"rfu_1","","",57,null],[12,"pbi_comm","","",57,null],[12,"pbi_name","","",57,null],[12,"pbi_nfiles","","",57,null],[12,"pbi_pgid","","",57,null],[12,"pbi_pjobc","","",57,null],[12,"e_tdev","","",57,null],[12,"e_tpgid","","",57,null],[12,"pbi_nice","","",57,null],[12,"pbi_start_tvsec","","",57,null],[12,"pbi_start_tvusec","","",57,null],[3,"proc_taskallinfo","","",null,null],[12,"pbsd","","",58,null],[12,"ptinfo","","",58,null],[3,"proc_threadinfo","","",null,null],[12,"pth_user_time","","",59,null],[12,"pth_system_time","","",59,null],[12,"pth_cpu_usage","","",59,null],[12,"pth_policy","","",59,null],[12,"pth_run_state","","",59,null],[12,"pth_flags","","",59,null],[12,"pth_sleep_time","","",59,null],[12,"pth_curpri","","",59,null],[12,"pth_priority","","",59,null],[12,"pth_maxpriority","","",59,null],[12,"pth_name","","",59,null],[3,"xsw_usage","","",null,null],[12,"xsu_total","","",60,null],[12,"xsu_avail","","",60,null],[12,"xsu_used","","",60,null],[12,"xsu_pagesize","","",60,null],[12,"xsu_encrypted","","",60,null],[3,"xucred","","",null,null],[12,"cr_version","","",61,null],[12,"cr_uid","","",61,null],[12,"cr_ngroups","","",61,null],[12,"cr_groups","","",61,null],[3,"mach_header","","",null,null],[12,"magic","","",62,null],[12,"cputype","","",62,null],[12,"cpusubtype","","",62,null],[12,"filetype","","",62,null],[12,"ncmds","","",62,null],[12,"sizeofcmds","","",62,null],[12,"flags","","",62,null],[3,"mach_header_64","","",null,null],[12,"magic","","",63,null],[12,"cputype","","",63,null],[12,"cpusubtype","","",63,null],[12,"filetype","","",63,null],[12,"ncmds","","",63,null],[12,"sizeofcmds","","",63,null],[12,"flags","","",63,null],[12,"reserved","","",63,null],[3,"segment_command","","",null,null],[12,"cmd","","",64,null],[12,"cmdsize","","",64,null],[12,"segname","","",64,null],[12,"vmaddr","","",64,null],[12,"vmsize","","",64,null],[12,"fileoff","","",64,null],[12,"filesize","","",64,null],[12,"maxprot","","",64,null],[12,"initprot","","",64,null],[12,"nsects","","",64,null],[12,"flags","","",64,null],[3,"segment_command_64","","",null,null],[12,"cmd","","",65,null],[12,"cmdsize","","",65,null],[12,"segname","","",65,null],[12,"vmaddr","","",65,null],[12,"vmsize","","",65,null],[12,"fileoff","","",65,null],[12,"filesize","","",65,null],[12,"maxprot","","",65,null],[12,"initprot","","",65,null],[12,"nsects","","",65,null],[12,"flags","","",65,null],[3,"load_command","","",null,null],[12,"cmd","","",66,null],[12,"cmdsize","","",66,null],[3,"sockaddr_dl","","",null,null],[12,"sdl_len","","",67,null],[12,"sdl_family","","",67,null],[12,"sdl_index","","",67,null],[12,"sdl_type","","",67,null],[12,"sdl_nlen","","",67,null],[12,"sdl_alen","","",67,null],[12,"sdl_slen","","",67,null],[12,"sdl_data","","",67,null],[3,"sockaddr_inarp","","",null,null],[12,"sin_len","","",68,null],[12,"sin_family","","",68,null],[12,"sin_port","","",68,null],[12,"sin_addr","","",68,null],[12,"sin_srcaddr","","",68,null],[12,"sin_tos","","",68,null],[12,"sin_other","","",68,null],[3,"sockaddr_ctl","","",null,null],[12,"sc_len","","",69,null],[12,"sc_family","","",69,null],[12,"ss_sysaddr","","",69,null],[12,"sc_id","","",69,null],[12,"sc_unit","","",69,null],[12,"sc_reserved","","",69,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",70,null],[12,"ipi_spec_dst","","",70,null],[12,"ipi_addr","","",70,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",71,null],[12,"ipi6_ifindex","","",71,null],[3,"ipc_perm","","",null,null],[12,"uid","","",72,null],[12,"gid","","",72,null],[12,"cuid","","",72,null],[12,"cgid","","",72,null],[12,"mode","","",72,null],[12,"_seq","","",72,null],[12,"_key","","",72,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",73,null],[12,"shm_segsz","","",73,null],[12,"shm_lpid","","",73,null],[12,"shm_cpid","","",73,null],[12,"shm_nattch","","",73,null],[12,"shm_atime","","",73,null],[12,"shm_dtime","","",73,null],[12,"shm_ctime","","",73,null],[12,"shm_internal","","",73,null],[3,"pthread_attr_t","","",null,null],[3,"timeval32","","",null,null],[12,"tv_sec","","",74,null],[12,"tv_usec","","",74,null],[3,"if_data","","",null,null],[12,"ifi_type","","",75,null],[12,"ifi_typelen","","",75,null],[12,"ifi_physical","","",75,null],[12,"ifi_addrlen","","",75,null],[12,"ifi_hdrlen","","",75,null],[12,"ifi_recvquota","","",75,null],[12,"ifi_xmitquota","","",75,null],[12,"ifi_unused1","","",75,null],[12,"ifi_mtu","","",75,null],[12,"ifi_metric","","",75,null],[12,"ifi_baudrate","","",75,null],[12,"ifi_ipackets","","",75,null],[12,"ifi_ierrors","","",75,null],[12,"ifi_opackets","","",75,null],[12,"ifi_oerrors","","",75,null],[12,"ifi_collisions","","",75,null],[12,"ifi_ibytes","","",75,null],[12,"ifi_obytes","","",75,null],[12,"ifi_imcasts","","",75,null],[12,"ifi_omcasts","","",75,null],[12,"ifi_iqdrops","","",75,null],[12,"ifi_noproto","","",75,null],[12,"ifi_recvtiming","","",75,null],[12,"ifi_xmittiming","","",75,null],[12,"ifi_lastchange","","",75,null],[12,"ifi_unused2","","",75,null],[12,"ifi_hwassist","","",75,null],[12,"ifi_reserved1","","",75,null],[12,"ifi_reserved2","","",75,null],[3,"bpf_hdr","","",null,null],[12,"bh_tstamp","","",76,null],[12,"bh_caplen","","",76,null],[12,"bh_datalen","","",76,null],[12,"bh_hdrlen","","",76,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"sync","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"lio_listio","","",null,null],[5,"dirfd","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"shmget","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"getxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"getgrouplist","","",null,null],[5,"initgroups","","",null,null],[5,"waitid","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"settimeofday","","",null,null],[5,"_dyld_image_count","","",null,null],[5,"_dyld_get_image_header","","",null,null],[5,"_dyld_get_image_vmaddr_slide","","",null,null],[5,"_dyld_get_image_name","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"timeval32"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"if_data"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bpf_hdr"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"fstore_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"radvisory"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"if_msghdr"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskinfo"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"proc_bsdinfo"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskallinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"proc_threadinfo"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"xsw_usage"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"xucred"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"mach_header"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"mach_header_64"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"segment_command"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"segment_command_64"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"load_command"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_dl"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_inarp"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ctl"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"in_pktinfo"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"in6_pktinfo"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"c_char","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"clockid_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"idtype_t","","",null,null],[6,"integer_t","","",null,null],[6,"cpu_type_t","","",null,null],[6,"cpu_subtype_t","","",null,null],[6,"vm_prot_t","","",null,null],[6,"posix_spawnattr_t","","",null,null],[6,"posix_spawn_file_actions_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"boolean_t","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"NCCS","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_SHLOCK","","",null,null],[17,"O_EXLOCK","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"MDMBUF","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_SELF","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"VM_FLAGS_FIXED","","",null,null],[17,"VM_FLAGS_ANYWHERE","","",null,null],[17,"VM_FLAGS_PURGABLE","","",null,null],[17,"VM_FLAGS_RANDOM_ADDR","","",null,null],[17,"VM_FLAGS_NO_CACHE","","",null,null],[17,"VM_FLAGS_RESILIENT_CODESIGN","","",null,null],[17,"VM_FLAGS_RESILIENT_MEDIA","","",null,null],[17,"VM_FLAGS_OVERWRITE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_MASK","","",null,null],[17,"VM_FLAGS_RETURN_DATA_ADDR","","",null,null],[17,"VM_FLAGS_RETURN_4K_DATA_ADDR","","",null,null],[17,"VM_FLAGS_ALIAS_MASK","","",null,null],[17,"VM_FLAGS_USER_ALLOCATE","","",null,null],[17,"VM_FLAGS_USER_MAP","","",null,null],[17,"VM_FLAGS_USER_REMAP","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SHIFT","","",null,null],[17,"SUPERPAGE_NONE","","",null,null],[17,"SUPERPAGE_SIZE_ANY","","",null,null],[17,"VM_FLAGS_SUPERPAGE_NONE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_ANY","","",null,null],[17,"SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_MEMORY_MALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_SMALL","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE","","",null,null],[17,"VM_MEMORY_MALLOC_HUGE","","",null,null],[17,"VM_MEMORY_SBRK","","",null,null],[17,"VM_MEMORY_REALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_TINY","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSABLE","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSED","","",null,null],[17,"VM_MEMORY_ANALYSIS_TOOL","","",null,null],[17,"VM_MEMORY_MALLOC_NANO","","",null,null],[17,"VM_MEMORY_MACH_MSG","","",null,null],[17,"VM_MEMORY_IOKIT","","",null,null],[17,"VM_MEMORY_STACK","","",null,null],[17,"VM_MEMORY_GUARD","","",null,null],[17,"VM_MEMORY_SHARED_PMAP","","",null,null],[17,"VM_MEMORY_DYLIB","","",null,null],[17,"VM_MEMORY_OBJC_DISPATCHERS","","",null,null],[17,"VM_MEMORY_UNSHARED_PMAP","","",null,null],[17,"VM_MEMORY_APPKIT","","",null,null],[17,"VM_MEMORY_FOUNDATION","","",null,null],[17,"VM_MEMORY_COREGRAPHICS","","",null,null],[17,"VM_MEMORY_CORESERVICES","","",null,null],[17,"VM_MEMORY_CARBON","","",null,null],[17,"VM_MEMORY_JAVA","","",null,null],[17,"VM_MEMORY_COREDATA","","",null,null],[17,"VM_MEMORY_COREDATA_OBJECTIDS","","",null,null],[17,"VM_MEMORY_ATS","","",null,null],[17,"VM_MEMORY_LAYERKIT","","",null,null],[17,"VM_MEMORY_CGIMAGE","","",null,null],[17,"VM_MEMORY_TCMALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_DATA","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_SHARED","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_BACKINGSTORES","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_XALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_MISC","","",null,null],[17,"VM_MEMORY_DYLD","","",null,null],[17,"VM_MEMORY_DYLD_MALLOC","","",null,null],[17,"VM_MEMORY_SQLITE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_CORE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","","",null,null],[17,"VM_MEMORY_GLSL","","",null,null],[17,"VM_MEMORY_OPENCL","","",null,null],[17,"VM_MEMORY_COREIMAGE","","",null,null],[17,"VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","","",null,null],[17,"VM_MEMORY_IMAGEIO","","",null,null],[17,"VM_MEMORY_COREPROFILE","","",null,null],[17,"VM_MEMORY_ASSETSD","","",null,null],[17,"VM_MEMORY_OS_ALLOC_ONCE","","",null,null],[17,"VM_MEMORY_LIBDISPATCH","","",null,null],[17,"VM_MEMORY_ACCELERATE","","",null,null],[17,"VM_MEMORY_COREUI","","",null,null],[17,"VM_MEMORY_COREUIFILE","","",null,null],[17,"VM_MEMORY_GENEALOGY","","",null,null],[17,"VM_MEMORY_RAWCAMERA","","",null,null],[17,"VM_MEMORY_CORPSEINFO","","",null,null],[17,"VM_MEMORY_ASL","","",null,null],[17,"VM_MEMORY_SWIFT_RUNTIME","","",null,null],[17,"VM_MEMORY_SWIFT_METADATA","","",null,null],[17,"VM_MEMORY_DHMM","","",null,null],[17,"VM_MEMORY_SCENEKIT","","",null,null],[17,"VM_MEMORY_SKYWALK","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_1","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_16","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_EACCESS","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"B7200","","",null,null],[17,"B14400","","",null,null],[17,"B28800","","",null,null],[17,"B57600","","",null,null],[17,"B76800","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"IPPROTO_HOPOPTS","","IP6 hop-by-hop options",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_GGP","","gateway2 (deprecated)",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_ST","","Stream protocol II.",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PIGP","","private interior gateway",null,null],[17,"IPPROTO_RCCMON","","BBN RCC Monitoring",null,null],[17,"IPPROTO_NVPII","","network voice protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_ARGUS","","Argus",null,null],[17,"IPPROTO_EMCON","","EMCON",null,null],[17,"IPPROTO_XNET","","Cross Net Debugger",null,null],[17,"IPPROTO_CHAOS","","Chaos",null,null],[17,"IPPROTO_MUX","","Multiplexing",null,null],[17,"IPPROTO_MEAS","","DCN Measurement Subsystems",null,null],[17,"IPPROTO_HMP","","Host Monitoring",null,null],[17,"IPPROTO_PRM","","Packet Radio Measurement",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TRUNK1","","Trunk-1",null,null],[17,"IPPROTO_TRUNK2","","Trunk-2",null,null],[17,"IPPROTO_LEAF1","","Leaf-1",null,null],[17,"IPPROTO_LEAF2","","Leaf-2",null,null],[17,"IPPROTO_RDP","","Reliable Data",null,null],[17,"IPPROTO_IRTP","","Reliable Transaction",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_BLT","","Bulk Data Transfer",null,null],[17,"IPPROTO_NSP","","Network Services",null,null],[17,"IPPROTO_INP","","Merit Internodal",null,null],[17,"IPPROTO_SEP","","Sequential Exchange",null,null],[17,"IPPROTO_3PC","","Third Party Connect",null,null],[17,"IPPROTO_IDPR","","InterDomain Policy Routing",null,null],[17,"IPPROTO_XTP","","XTP",null,null],[17,"IPPROTO_DDP","","Datagram Delivery",null,null],[17,"IPPROTO_CMTP","","Control Message Transport",null,null],[17,"IPPROTO_TPXX","","TP++ Transport",null,null],[17,"IPPROTO_IL","","IL transport protocol",null,null],[17,"IPPROTO_SDRP","","Source Demand Routing",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_IDRP","","InterDomain Routing",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_MHRP","","Mobile Host Routing",null,null],[17,"IPPROTO_BHA","","BHA",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_INLSP","","Integ. Net Layer Security",null,null],[17,"IPPROTO_SWIPE","","IP with encryption",null,null],[17,"IPPROTO_NHRP","","Next Hop Resolution",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_AHIP","","any host internal protocol",null,null],[17,"IPPROTO_CFTP","","CFTP",null,null],[17,"IPPROTO_HELLO","","\"hello\" routing protocol",null,null],[17,"IPPROTO_SATEXPAK","","SATNET/Backroom EXPAK",null,null],[17,"IPPROTO_KRYPTOLAN","","Kryptolan",null,null],[17,"IPPROTO_RVD","","Remote Virtual Disk",null,null],[17,"IPPROTO_IPPC","","Pluribus Packet Core",null,null],[17,"IPPROTO_ADFS","","Any distributed FS",null,null],[17,"IPPROTO_SATMON","","Satnet Monitoring",null,null],[17,"IPPROTO_VISA","","VISA Protocol",null,null],[17,"IPPROTO_IPCV","","Packet Core Utility",null,null],[17,"IPPROTO_CPNX","","Comp. Prot. Net. Executive",null,null],[17,"IPPROTO_CPHB","","Comp. Prot. HeartBeat",null,null],[17,"IPPROTO_WSN","","Wang Span Network",null,null],[17,"IPPROTO_PVP","","Packet Video Protocol",null,null],[17,"IPPROTO_BRSATMON","","BackRoom SATNET Monitoring",null,null],[17,"IPPROTO_ND","","Sun net disk proto (temp.)",null,null],[17,"IPPROTO_WBMON","","WIDEBAND Monitoring",null,null],[17,"IPPROTO_WBEXPAK","","WIDEBAND EXPAK",null,null],[17,"IPPROTO_EON","","ISO cnlp",null,null],[17,"IPPROTO_VMTP","","VMTP",null,null],[17,"IPPROTO_SVMTP","","Secure VMTP",null,null],[17,"IPPROTO_VINES","","Banyon VINES",null,null],[17,"IPPROTO_TTP","","TTP",null,null],[17,"IPPROTO_IGP","","NSFNET-IGP",null,null],[17,"IPPROTO_DGP","","dissimilar gateway prot.",null,null],[17,"IPPROTO_TCF","","TCF",null,null],[17,"IPPROTO_IGRP","","Cisco/GXS IGRP",null,null],[17,"IPPROTO_OSPFIGP","","OSPFIGP",null,null],[17,"IPPROTO_SRPC","","Strite RPC protocol",null,null],[17,"IPPROTO_LARP","","Locus Address Resoloution",null,null],[17,"IPPROTO_MTP","","Multicast Transport",null,null],[17,"IPPROTO_AX25","","AX.25 Frames",null,null],[17,"IPPROTO_IPEIP","","IP encapsulated in IP",null,null],[17,"IPPROTO_MICP","","Mobile Int.ing control",null,null],[17,"IPPROTO_SCCSP","","Semaphore Comm. security",null,null],[17,"IPPROTO_ETHERIP","","Ethernet IP encapsulation",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_APES","","any private encr. scheme",null,null],[17,"IPPROTO_GMTP","","GMTP",null,null],[17,"IPPROTO_PIM","","Protocol Independent Mcast",null,null],[17,"IPPROTO_IPCOMP","","payload compression (IPComp)",null,null],[17,"IPPROTO_PGM","","PGM",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_DIVERT","","divert pseudo-protocol",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"IPPROTO_DONE","","last return value of *_input(), meaning \"all job for this pkt is done\".",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_IMPLINK","","",null,null],[17,"AF_PUP","","",null,null],[17,"AF_CHAOS","","",null,null],[17,"AF_NS","","",null,null],[17,"AF_ISO","","",null,null],[17,"AF_OSI","","",null,null],[17,"AF_ECMA","","",null,null],[17,"AF_DATAKIT","","",null,null],[17,"AF_CCITT","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_DLI","","",null,null],[17,"AF_LAT","","",null,null],[17,"AF_HYLINK","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_LINK","","",null,null],[17,"pseudo_AF_XTP","","",null,null],[17,"AF_COIP","","",null,null],[17,"AF_CNT","","",null,null],[17,"pseudo_AF_RTIP","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_SIP","","",null,null],[17,"pseudo_AF_PIP","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_E164","","",null,null],[17,"pseudo_AF_KEY","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NATM","","",null,null],[17,"AF_SYSTEM","","",null,null],[17,"AF_NETBIOS","","",null,null],[17,"AF_PPP","","",null,null],[17,"pseudo_AF_HDRCMPLT","","",null,null],[17,"AF_SYS_CONTROL","","",null,null],[17,"SYSPROTO_EVENT","","",null,null],[17,"SYSPROTO_CONTROL","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_IMPLINK","","",null,null],[17,"PF_PUP","","",null,null],[17,"PF_CHAOS","","",null,null],[17,"PF_NS","","",null,null],[17,"PF_ISO","","",null,null],[17,"PF_OSI","","",null,null],[17,"PF_ECMA","","",null,null],[17,"PF_DATAKIT","","",null,null],[17,"PF_CCITT","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_DLI","","",null,null],[17,"PF_LAT","","",null,null],[17,"PF_HYLINK","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_LINK","","",null,null],[17,"PF_XTP","","",null,null],[17,"PF_COIP","","",null,null],[17,"PF_CNT","","",null,null],[17,"PF_SIP","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_RTIP","","",null,null],[17,"PF_PIP","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_NATM","","",null,null],[17,"PF_SYSTEM","","",null,null],[17,"PF_NETBIOS","","",null,null],[17,"PF_PPP","","",null,null],[17,"NET_RT_DUMP","","",null,null],[17,"NET_RT_FLAGS","","",null,null],[17,"NET_RT_IFLIST","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"SOCK_MAXADDRLEN","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_LOCAL","","",null,null],[17,"LOCAL_PEERCRED","","",null,null],[17,"LOCAL_PEERPID","","",null,null],[17,"LOCAL_PEEREPID","","",null,null],[17,"LOCAL_PEERUUID","","",null,null],[17,"LOCAL_PEEREUUID","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOF","","",null,null],[17,"MSG_FLUSH","","",null,null],[17,"MSG_HOLD","","",null,null],[17,"MSG_SEND","","",null,null],[17,"MSG_HAVEMORE","","",null,null],[17,"MSG_RCVMORE","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SCM_CREDS","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_OACTIVE","","",null,null],[17,"IFF_SIMPLEX","","",null,null],[17,"IFF_LINK0","","",null,null],[17,"IFF_LINK1","","",null,null],[17,"IFF_LINK2","","",null,null],[17,"IFF_ALTPHYS","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"NLDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"OFDEL","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"XATTR_NOFOLLOW","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"XATTR_NOSECURITY","","",null,null],[17,"XATTR_NODEFAULT","","",null,null],[17,"XATTR_SHOWCOMPRESSION","","",null,null],[17,"NET_RT_IFLIST2","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_DONE","","",null,null],[17,"RTF_DELCLONE","","",null,null],[17,"RTF_CLONING","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_LLINFO","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_BLACKHOLE","","",null,null],[17,"RTF_NOIFREF","","",null,null],[17,"RTF_PROTO2","","",null,null],[17,"RTF_PROTO1","","",null,null],[17,"RTF_PRCLONING","","",null,null],[17,"RTF_WASCLONED","","",null,null],[17,"RTF_PROTO3","","",null,null],[17,"RTF_PINNED","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_IFSCOPE","","",null,null],[17,"RTF_CONDEMNED","","",null,null],[17,"RTF_IFREF","","",null,null],[17,"RTF_PROXY","","",null,null],[17,"RTF_ROUTER","","",null,null],[17,"RTM_VERSION","","",null,null],[17,"RTM_ADD","","",null,null],[17,"RTM_DELETE","","",null,null],[17,"RTM_CHANGE","","",null,null],[17,"RTM_GET","","",null,null],[17,"RTM_LOSING","","",null,null],[17,"RTM_REDIRECT","","",null,null],[17,"RTM_MISS","","",null,null],[17,"RTM_LOCK","","",null,null],[17,"RTM_OLDADD","","",null,null],[17,"RTM_OLDDEL","","",null,null],[17,"RTM_RESOLVE","","",null,null],[17,"RTM_NEWADDR","","",null,null],[17,"RTM_DELADDR","","",null,null],[17,"RTM_IFINFO","","",null,null],[17,"RTM_NEWMADDR","","",null,null],[17,"RTM_DELMADDR","","",null,null],[17,"RTM_IFINFO2","","",null,null],[17,"RTM_NEWMADDR2","","",null,null],[17,"RTM_GET2","","",null,null],[17,"RTV_MTU","","",null,null],[17,"RTV_HOPCOUNT","","",null,null],[17,"RTV_EXPIRE","","",null,null],[17,"RTV_RPIPE","","",null,null],[17,"RTV_SPIPE","","",null,null],[17,"RTV_SSTHRESH","","",null,null],[17,"RTV_RTT","","",null,null],[17,"RTV_RTTVAR","","",null,null],[17,"RTA_DST","","",null,null],[17,"RTA_GATEWAY","","",null,null],[17,"RTA_NETMASK","","",null,null],[17,"RTA_GENMASK","","",null,null],[17,"RTA_IFP","","",null,null],[17,"RTA_IFA","","",null,null],[17,"RTA_AUTHOR","","",null,null],[17,"RTA_BRD","","",null,null],[17,"RTAX_DST","","",null,null],[17,"RTAX_GATEWAY","","",null,null],[17,"RTAX_NETMASK","","",null,null],[17,"RTAX_GENMASK","","",null,null],[17,"RTAX_IFP","","",null,null],[17,"RTAX_IFA","","",null,null],[17,"RTAX_AUTHOR","","",null,null],[17,"RTAX_BRD","","",null,null],[17,"RTAX_MAX","","",null,null],[17,"KERN_PROCARGS2","","",null,null],[17,"PROC_PIDTASKALLINFO","","",null,null],[17,"PROC_PIDTASKINFO","","",null,null],[17,"PROC_PIDTHREADINFO","","",null,null],[17,"MAXCOMLEN","","",null,null],[17,"MAXTHREADNAMESIZE","","",null,null],[17,"XUCRED_VERSION","","",null,null],[17,"LC_SEGMENT","","",null,null],[17,"LC_SEGMENT_64","","",null,null],[17,"MH_MAGIC","","",null,null],[17,"MH_MAGIC_64","","",null,null],[17,"UTUN_OPT_FLAGS","","",null,null],[17,"UTUN_OPT_IFNAME","","",null,null],[17,"DLT_NULL","","",null,null],[17,"DLT_EN10MB","","",null,null],[17,"DLT_EN3MB","","",null,null],[17,"DLT_AX25","","",null,null],[17,"DLT_PRONET","","",null,null],[17,"DLT_CHAOS","","",null,null],[17,"DLT_IEEE802","","",null,null],[17,"DLT_ARCNET","","",null,null],[17,"DLT_SLIP","","",null,null],[17,"DLT_PPP","","",null,null],[17,"DLT_FDDI","","",null,null],[17,"DLT_ATM_RFC1483","","",null,null],[17,"DLT_RAW","","",null,null],[17,"DLT_LOOP","","",null,null],[17,"BPF_ALIGNMENT","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_R","","",null,null],[17,"IPC_W","","",null,null],[17,"IPC_M","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHMLBA","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCKATTR_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"proc_threadinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"timeval32"],[3,"if_data"],[3,"bpf_hdr"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_rwlockattr_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["libflate"] = {"doc":"A Rust implementation of DEFLATE algorithm and related formats (ZLIB, GZIP).","items":[[0,"lz77","libflate","The interface and implementations of LZ77 compression algorithm.",null,null],[3,"DefaultLz77Encoder","libflate::lz77","A `Lz77Encode` implementation used by default.",null,null],[3,"NoCompressionLz77Encoder","","A no compression implementation of `LZ77Encode` trait.",null,null],[4,"Code","","A LZ77 encoded data.",null,null],[13,"Literal","","Literal byte.",0,null],[13,"Pointer","","Backward pointer to shared data.",0,null],[12,"length","libflate::lz77::Code","Length of the shared data. The values must be limited to `MAX_LENGTH`.",0,null],[12,"backward_distance","","Distance between current position and start position of the shared data. The values must be limited to `MAX_DISTANCE`.",0,null],[4,"CompressionLevel","libflate::lz77","Compression level.",null,null],[13,"None","","No compression.",1,null],[13,"Fast","","Best speed.",1,null],[13,"Balance","","Balanced between speed and size.",1,null],[13,"Best","","Best compression.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new encoder instance.",2,{"inputs":[],"output":{"name":"self"}}],[11,"with_window_size","","Makes a new encoder instance with specified window size.",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"encode","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"window_size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[17,"MAX_LENGTH","","Maximum length of sharable bytes in a pointer.",null,null],[17,"MAX_DISTANCE","","Maximum backward distance of a pointer.",null,null],[17,"MAX_WINDOW_SIZE","","Maximum size of a sliding window.",null,null],[8,"Sink","","The `Sink` trait represents a consumer of LZ77 encoded data.",null,null],[10,"consume","","Consumes a LZ77 encoded `Code`.",3,{"inputs":[{"name":"self"},{"name":"code"}],"output":null}],[8,"Lz77Encode","","The `LZ77Encode` trait defines the interface of LZ77 encoding algorithm.",null,null],[10,"encode","","Encodes a buffer and writes result LZ77 codes to `sink`.",4,null],[10,"flush","","Flushes the encoder, ensuring that all intermediately buffered codes are consumed by `sink`.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"compression_level","","Returns the compression level of the encoder.",4,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"window_size","","Returns the window size of the encoder.",4,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compressionlevel"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"nocompressionlz77encoder"}}],[11,"new","","Makes a new encoder instance.",5,{"inputs":[],"output":{"name":"self"}}],[11,"encode","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"compression_level","","",5,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[0,"zlib","libflate","The encoder and decoder of the ZLIB format.",null,null],[3,"Header","libflate::zlib","ZLIB header.",null,null],[3,"Decoder","","ZLIB decoder.",null,null],[3,"EncodeOptions","","Options for a ZLIB encoder.",null,null],[3,"Encoder","","ZLIB encoder.",null,null],[4,"CompressionLevel","","Compression levels defined by the ZLIB format.",null,null],[13,"Fastest","","Compressor used fastest algorithm.",6,null],[13,"Fast","","Compressor used fast algorithm.",6,null],[13,"Default","","Compressor used default algorithm.",6,null],[13,"Slowest","","Compressor used maximum compression, slowest algorithm.",6,null],[4,"Lz77WindowSize","","LZ77 Window sizes defined by the ZLIB format.",null,null],[13,"B256","","256 bytes",7,null],[13,"B512","","512 btyes",7,null],[13,"KB1","","1 kilobyte",7,null],[13,"KB2","","2 kilobytes",7,null],[13,"KB4","","4 kitobytes",7,null],[13,"KB8","","8 kitobytes",7,null],[13,"KB16","","16 kitobytes",7,null],[13,"KB32","","32 kitobytes",7,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"compressionlevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"compressionlevel"}],"output":{"name":"ordering"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"compressionlevel"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"compressionlevel"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"lz77windowsize"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"lz77windowsize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"lz77windowsize"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"lz77windowsize"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"from_u16","","Converts from `u16` to Lz77WindowSize`.",7,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"to_u16","","Converts from `Lz77WindowSize` to `u16`.",7,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"window_size","","Returns the LZ77 window size stored in the header.",8,{"inputs":[{"name":"self"}],"output":{"name":"lz77windowsize"}}],[11,"compression_level","","Returns the compression level stored in the header.",8,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",9,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header of the ZLIB stream.",9,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",9,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Makes a default instance.",10,{"inputs":[],"output":{"name":"self"}}],[11,"with_lz77","","Specifies the LZ77 encoder used to compress input data.",10,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"no_compression","","Disables LZ77 compression.",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"block_size","","Specifies the hint of the size of a DEFLATE block.",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fixed_huffman_codes","","Specifies to compress with fixed huffman codes.",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new encoder instance.",11,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[11,"with_options","","Makes a new encoder instance with specified options.",11,{"inputs":[{"name":"w"},{"name":"encodeoptions"}],"output":{"name":"result"}}],[11,"header","","Returns the header of the ZLIB stream.",11,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"finish","","Writes the ZLIB trailer and returns the inner stream.",11,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"finish"}}],[11,"write","","",11,null],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"complete","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"gzip","libflate","The encoder and decoder of the GZIP format.",null,null],[3,"HeaderBuilder","libflate::gzip","GZIP header builder.",null,null],[3,"Header","","GZIP Header.",null,null],[3,"ExtraField","","Extra field of a GZIP header.",null,null],[12,"id","","ID of the extra field.",12,null],[12,"data","","Data of the extra field.",12,null],[3,"EncodeOptions","","Options for a GZIP encoder.",null,null],[3,"Encoder","","GZIP encoder.",null,null],[3,"Decoder","","GZIP decoder.",null,null],[3,"MultiDecoder","","A decoder that decodes all members in a GZIP stream.",null,null],[4,"CompressionLevel","","Compression levels defined by the GZIP format.",null,null],[13,"Fastest","","Compressor used fastest algorithm.",13,null],[13,"Slowest","","Compressor used maximum compression, slowest algorithm.",13,null],[13,"Unknown","","No information about compression method.",13,null],[4,"Os","","OS type.",null,null],[13,"Fat","","FAT filesystem (MS-DOS, OS/2, NT/Win32)",14,null],[13,"Amiga","","Amiga",14,null],[13,"Vms","","VMS (or OpenVMS)",14,null],[13,"Unix","","Unix",14,null],[13,"VmCms","","VM/CMS",14,null],[13,"AtariTos","","Atari TOS",14,null],[13,"Hpfs","","HPFS filesystem (OS/2, NT)",14,null],[13,"Macintosh","","Macintosh",14,null],[13,"ZSystem","","Z-System",14,null],[13,"CpM","","CP/M",14,null],[13,"Tops20","","TOPS-20",14,null],[13,"Ntfs","","NTFS filesystem (NT)",14,null],[13,"Qdos","","QDOS",14,null],[13,"AcornRiscos","","Acorn RISCOS",14,null],[13,"Unknown","","Unknown",14,null],[13,"Undefined","","Undefined value in RFC-1952",14,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"compressionlevel"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"from","","",13,{"inputs":[{"name":"compressionlevel"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"headerbuilder"}}],[11,"new","","Makes a new builder instance.",15,{"inputs":[],"output":{"name":"self"}}],[11,"modification_time","","Sets the modification time (UNIX timestamp).",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"os","","Sets the OS type.",15,{"inputs":[{"name":"self"},{"name":"os"}],"output":{"name":"self"}}],[11,"text","","Indicates the encoding data is a ASCII text.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"verify","","Specifies toe verify header bytes using CRC-16.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"extra_field","","Sets the extra field.",15,{"inputs":[{"name":"self"},{"name":"extrafield"}],"output":{"name":"self"}}],[11,"filename","","Sets the file name.",15,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"self"}}],[11,"comment","","Sets the comment.",15,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"self"}}],[11,"finish","","Returns the result header.",15,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"modification_time","","Returns the modification time (UNIX timestamp).",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"compression_level","","Returns the compression level.",16,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"os","","Returns the OS type.",16,{"inputs":[{"name":"self"}],"output":{"name":"os"}}],[11,"is_text","","Returns `true` if the stream is probably ASCII text, `false` otherwise.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_verified","","Returns `true` if the header bytes is verified by CRC-16, `false` otherwise.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"extra_field","","Returns the extra field.",16,{"inputs":[{"name":"self"}],"output":{"generics":["extrafield"],"name":"option"}}],[11,"filename","","Returns the file name.",16,{"inputs":[{"name":"self"}],"output":{"generics":["cstring"],"name":"option"}}],[11,"comment","","Returns the comment.",16,{"inputs":[{"name":"self"}],"output":{"generics":["cstring"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"extrafield"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"extrafield"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"extrafield"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"os"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"os"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"os"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Makes a default instance.",17,{"inputs":[],"output":{"name":"self"}}],[11,"with_lz77","","Specifies the LZ77 encoder used to compress input data.",17,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"no_compression","","Disables LZ77 compression.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"header","","Sets the GZIP header which will be written to the output stream.",17,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"self"}}],[11,"block_size","","Specifies the hint of the size of a DEFLATE block.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fixed_huffman_codes","","Specifies to compress with fixed huffman codes.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Makes a new encoder instance.",18,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[11,"with_options","","Makes a new encoder instance with specified options.",18,{"inputs":[{"name":"w"},{"name":"encodeoptions"}],"output":{"name":"result"}}],[11,"header","","Returns the header of the GZIP stream.",18,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"finish","","Writes the GZIP trailer and returns the inner stream.",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"finish"}}],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"complete","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",19,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header of the GZIP stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",19,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",20,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header of the current member in the GZIP stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"into_inner","","Unwraps this `MultiDecoder`, returning the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",20,null],[0,"deflate","libflate","The encoder and decoder of the DEFLATE format and algorithm.",null,null],[3,"Decoder","libflate::deflate","DEFLATE decoder.",null,null],[3,"Encoder","","DEFLATE encoder.",null,null],[3,"EncodeOptions","","Options for a DEFLATE encoder.",null,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",21,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"encodeoptions"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"encodeoptions"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"encodeoptions"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"default","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Makes a default instance.",22,{"inputs":[],"output":{"name":"self"}}],[11,"with_lz77","","Specifies the LZ77 encoder used to compress input data.",22,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"no_compression","","Disables LZ77 compression.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"block_size","","Specifies the hint of the size of a DEFLATE block.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fixed_huffman_codes","","Specifies to compress with fixed huffman codes.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new encoder instance.",23,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_options","","Makes a new encoder instance with specified options.",23,{"inputs":[{"name":"w"},{"name":"encodeoptions"}],"output":{"name":"self"}}],[11,"finish","","Flushes internal buffer and returns the inner stream.",23,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"finish"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps the `Encoder`, returning the inner stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",23,null],[11,"flush","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"complete","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[17,"DEFAULT_BLOCK_SIZE","","The default size of a DEFLATE block.",null,null],[0,"non_blocking","libflate","Implementations that can handle non-blocking I/O.",null,null],[0,"deflate","libflate::non_blocking","The decoder of the DEFLATE format and algorithm.",null,null],[3,"Decoder","libflate::non_blocking::deflate","DEFLATE decoder which supports non-blocking I/O.",null,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",24,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",24,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",24,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",24,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",24,null],[0,"gzip","libflate::non_blocking","The encoder and decoder of the GZIP format.",null,null],[3,"Decoder","libflate::non_blocking::gzip","GZIP decoder which supports non-blocking I/O.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",25,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"header","","Returns the header of the GZIP stream.",25,{"inputs":[{"name":"self"}],"output":{"generics":["header"],"name":"result"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",25,null],[0,"zlib","libflate::non_blocking","The encoder and decoder of the ZLIB format.",null,null],[3,"Decoder","libflate::non_blocking::zlib","ZLIB decoder which supports non-blocking I/O.",null,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"header","","Returns the header of the ZLIB stream.",26,{"inputs":[{"name":"self"}],"output":{"generics":["header"],"name":"result"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",26,null],[0,"finish","libflate","`Finish` and related types.",null,null],[3,"Finish","libflate::finish","`Finish` is a type that represents a value which may have an error occurred during the computation.",null,null],[3,"AutoFinish","","A wrapper struct that completes the processing of the underlying instance when drops.",null,null],[3,"AutoFinishUnchecked","","A wrapper struct that completes the processing of the underlying instance when drops.",null,null],[8,"Complete","","This trait allows to complete an I/O related processing.",null,null],[10,"complete","","Completes the current processing and returns the result.",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"finish"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"finish"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"ordering"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"new","","Makes a new instance.",28,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"self"}}],[11,"unwrap","","Unwraps the instance.",28,null],[11,"into_result","","Converts from `Finish<T, E>` to `Result<T, E>`.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_result","","Converts from `Finish<T, E>` to `Result<&T, &E>`.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `AutoFinish` instance.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Unwraps this `AutoFinish` instance, returning the underlying instance.",29,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",29,null],[11,"deref_mut","","",29,null],[11,"write","","",29,null],[11,"flush","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `AutoFinishUnchecked` instance.",30,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Unwraps this `AutoFinishUnchecked` instance, returning the underlying instance.",30,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",30,null],[11,"deref_mut","","",30,null],[11,"write","","",30,null],[11,"flush","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"Code"],[4,"CompressionLevel"],[3,"DefaultLz77Encoder"],[8,"Sink"],[8,"Lz77Encode"],[3,"NoCompressionLz77Encoder"],[4,"CompressionLevel"],[4,"Lz77WindowSize"],[3,"Header"],[3,"Decoder"],[3,"EncodeOptions"],[3,"Encoder"],[3,"ExtraField"],[4,"CompressionLevel"],[4,"Os"],[3,"HeaderBuilder"],[3,"Header"],[3,"EncodeOptions"],[3,"Encoder"],[3,"Decoder"],[3,"MultiDecoder"],[3,"Decoder"],[3,"EncodeOptions"],[3,"Encoder"],[3,"Decoder"],[3,"Decoder"],[3,"Decoder"],[8,"Complete"],[3,"Finish"],[3,"AutoFinish"],[3,"AutoFinishUnchecked"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["box","shutdownloggererror"],"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["shutdownloggererror"],"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["loglevel"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["loglevelfilter"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",null,null],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",null,null],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",null,null]],"paths":[]};
searchIndex["memoffset"] = {"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",null,null],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",null,null]],"paths":[]};
searchIndex["mime"] = {"doc":"Mime","items":[[3,"Mime","mime","A parsed mime or media type.",null,null],[3,"Name","","A section of a `Mime`.",null,null],[3,"FromStrError","","An error when parsing a `Mime` from a string.",null,null],[3,"Params","","An iterator over the parameters of a MIME.",null,null],[17,"STAR","","",null,null],[17,"TEXT","","text",null,null],[17,"IMAGE","","image",null,null],[17,"AUDIO","","audio",null,null],[17,"VIDEO","","video",null,null],[17,"APPLICATION","","application",null,null],[17,"MULTIPART","","multipart",null,null],[17,"MESSAGE","","message",null,null],[17,"MODEL","","model",null,null],[17,"FONT","","font",null,null],[17,"PLAIN","","plain",null,null],[17,"HTML","","html",null,null],[17,"XML","","xml",null,null],[17,"JAVASCRIPT","","javascript",null,null],[17,"CSS","","css",null,null],[17,"CSV","","csv",null,null],[17,"EVENT_STREAM","","event-stream",null,null],[17,"JSON","","json",null,null],[17,"WWW_FORM_URLENCODED","","x-www-form-urlencoded",null,null],[17,"MSGPACK","","msgpack",null,null],[17,"OCTET_STREAM","","octet-stream",null,null],[17,"FORM_DATA","","form-data",null,null],[17,"PNG","","png",null,null],[17,"GIF","","gif",null,null],[17,"BMP","","bmp",null,null],[17,"JPEG","","jpeg",null,null],[17,"BASIC","","basic",null,null],[17,"MPEG","","mpeg",null,null],[17,"MP4","","mp4",null,null],[17,"OGG","","ogg",null,null],[17,"CHARSET","","charset",null,null],[17,"BOUNDARY","","boundary",null,null],[17,"UTF_8","","utf-8",null,null],[17,"STAR_STAR","","`*/*`",null,null],[17,"TEXT_STAR","","`text/*`",null,null],[17,"TEXT_PLAIN","","`text/plain`",null,null],[17,"TEXT_PLAIN_UTF_8","","`text/plain; charset=utf-8`",null,null],[17,"TEXT_HTML","","`text/html`",null,null],[17,"TEXT_HTML_UTF_8","","`text/html; charset=utf-8`",null,null],[17,"TEXT_CSS","","`text/css`",null,null],[17,"TEXT_JAVASCRIPT","","`text/javascript`",null,null],[17,"TEXT_XML","","`text/xml`",null,null],[17,"TEXT_EVENT_STREAM","","`text/event-stream`",null,null],[17,"TEXT_CSV","","`text/csv`",null,null],[17,"TEXT_CSV_UTF_8","","`text/csv; charset=utf-8`",null,null],[17,"TEXT_TAB_SEPARATED_VALUES","","`text/tab-separated-values`",null,null],[17,"TEXT_TAB_SEPARATED_VALUES_UTF_8","","`text/tab-separated-values; charset=utf-8`",null,null],[17,"IMAGE_STAR","","`image/*`",null,null],[17,"IMAGE_JPEG","","`image/jpeg`",null,null],[17,"IMAGE_GIF","","`image/gif`",null,null],[17,"IMAGE_PNG","","`image/png`",null,null],[17,"IMAGE_BMP","","`image/bmp`",null,null],[17,"APPLICATION_JSON","","`application/json`",null,null],[17,"APPLICATION_JAVASCRIPT","","`application/javascript`",null,null],[17,"APPLICATION_JAVASCRIPT_UTF_8","","`application/javascript; charset=utf-8`",null,null],[17,"APPLICATION_WWW_FORM_URLENCODED","","`application/x-www-form-urlencoded`",null,null],[17,"APPLICATION_OCTET_STREAM","","`application/octet-stream`",null,null],[17,"APPLICATION_MSGPACK","","`application/msgpack`",null,null],[17,"MULTIPART_FORM_DATA","","`multipart/form-data`",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"type_","","Get the top level media type for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"subtype","","Get the subtype of this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"suffix","","Get an optional +suffix for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"get_param","","Look up a parameter by name.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["name"],"name":"option"}}],[11,"params","","Returns an iterator over the parameters.",0,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","Get the value of this `Name` as a string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null]],"paths":[[3,"Mime"],[3,"Name"],[3,"FromStrError"],[3,"Params"]]};
searchIndex["mime_guess"] = {"doc":"Guessing of MIME types by file extension.","items":[[3,"Mime","mime_guess","A parsed mime or media type.",null,null],[5,"guess_mime_type","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",null,{"inputs":[{"name":"p"}],"output":{"name":"mime"}}],[5,"guess_mime_type_opt","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",null,{"inputs":[{"name":"p"}],"output":{"generics":["mime"],"name":"option"}}],[5,"get_mime_type","","Get the MIME type associated with a file extension.",null,{"inputs":[{"name":"str"}],"output":{"name":"mime"}}],[5,"get_mime_type_opt","","Get the MIME type associated with a file extension.",null,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"option"}}],[5,"get_mime_type_str","","Get the MIME type string associated with a file extension. Case-insensitive.",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[5,"get_mime_extensions","","Get a list of known extensions for a given `Mime`.",null,{"inputs":[{"name":"mime"}],"output":{"name":"option"}}],[5,"get_mime_extensions_str","","Get a list of known extensions for a MIME type string.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"get_extensions","","Get the extensions for a given top-level and sub-level of a MIME type (`{toplevel}/{sublevel}`).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[5,"octet_stream","","Get the MIME type for `application/octet-stream` (generic binary stream)",null,{"inputs":[],"output":{"name":"mime"}}],[11,"type_","","Get the top level media type for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"subtype","","Get the subtype of this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"suffix","","Get an optional +suffix for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"get_param","","Look up a parameter by name.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["name"],"name":"option"}}],[11,"params","","Returns an iterator over the parameters.",0,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"result"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}]],"paths":[[3,"Mime"]]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Poll","mio","Polls for readiness events on all registered values.",null,null],[3,"Registration","","Handle to a user space `Poll` registration.",null,null],[3,"SetReadiness","","Updates the readiness state of the associated `Registration`.",null,null],[3,"PollOpt","","Options supplied when registering an `Evented` handle with `Poll`",null,null],[3,"Ready","","A set of readiness event kinds",null,null],[3,"Token","","Associates readiness notifications with [`Evented`] handles.",null,null],[12,"0","","",0,null],[3,"Events","","A collection of readiness events.",null,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"empty","","Return a `PollOpt` representing no set options.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"edge","","Return a `PollOpt` representing edge-triggered notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","Return a `PollOpt` representing level-triggered notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","Returns true if the options include edge-triggered notifications.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_level","","Returns true if the options include level-triggered notifications.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_oneshot","","Returns true if the options includes oneshot.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns true if `self` is a superset of `other`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","Adds all options represented by `other` into `self`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"remove","","Removes all options represented by `other` from `self`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"ordering"}}],[11,"empty","","Returns the empty `Ready` set.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"readable","","Returns a `Ready` representing readable readiness.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"writable","","Returns a `Ready` representing writable readiness.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"all","","Returns a `Ready` representing readiness for all operations.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"is_empty","","Returns true if `Ready` is the empty set",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_readable","","Returns true if the value includes readable readiness",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_writable","","Returns true if the value includes writable readiness",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","Adds all readiness represented by `other` into `self`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"remove","","Removes all options represented by `other` from `self`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"contains","","Returns true if `self` is a superset of `other`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"from_usize","","Create a `Ready` instance using the given `usize` representation.",2,{"inputs":[{"name":"usize"}],"output":{"name":"ready"}}],[11,"as_usize","","Returns a `usize` representation of the `Ready` value.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"setreadiness"}}],[11,"new","","Return a new `Poll` handle.",4,{"inputs":[],"output":{"generics":["poll"],"name":"result"}}],[11,"register","","Register an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","Wait for readiness events",4,{"inputs":[{"name":"self"},{"name":"events"},{"generics":["duration"],"name":"option"}],"output":{"generics":["usize"],"name":"result"}}],[11,"poll_interruptible","","Like `poll`, but may be interrupted by a signal",4,{"inputs":[{"name":"self"},{"name":"events"},{"generics":["duration"],"name":"option"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity` events.",5,{"inputs":[{"name":"usize"}],"output":{"name":"events"}}],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the `Event` values.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clear","","Clearing all `Event` values from container explicitly.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new2","","Create and return a new `Registration` and the associated `SetReadiness`.",6,null],[11,"register","","",6,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",6,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",6,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"readiness","","Returns the registration's current readiness.",3,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"set_readiness","","Set the registration's readiness",3,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"unixready"}],"output":{"name":"ready"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[0,"net","","Networking primitives",null,null],[3,"TcpListener","mio::net","A structure representing a socket server",null,null],[3,"TcpStream","","A non-blocking TCP stream between a local socket and a remote socket.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the specified address.",7,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",7,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",7,{"inputs":[{"name":"tcpstream"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",7,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",7,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_linger","","Sets the value for the `SO_LINGER` option on this socket.",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"linger","","Gets the value of the `SO_LINGER` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",7,null],[11,"read_bufs","","Read in a list of buffers all at once.",7,null],[11,"write_bufs","","Write a list of buffers all at once.",7,null],[11,"read","","",7,null],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",7,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",7,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",7,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",8,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"from_std","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",8,{"inputs":[{"name":"tcplistener"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accept_std","","Accepts a new `std::net::TcpStream`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",8,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"register","","",8,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",8,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",8,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",7,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"into_raw_fd","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",8,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"bind","","Creates a UDP socket from the given address.",9,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std socket.",9,{"inputs":[{"name":"udpsocket"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"local_addr","","Returns the socket address that this socket was created from.",9,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",9,null],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",9,null],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",9,null],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read and the address from whence the data came.",9,null],[11,"connect","","Connects the UDP socket setting the default destination for `send()` and limiting packets that are read via `recv` from the address specified in `addr`.",9,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"register","","",9,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",9,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",9,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",9,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[0,"event","mio","Readiness event types and utilities.",null,null],[3,"Events","mio::event","A collection of readiness events.",null,null],[3,"Iter","","[`Events`] iterator.",null,null],[3,"Event","","An readiness event returned by [`Poll::poll`].",null,null],[8,"Evented","","A value that may be registered with `Poll`",null,null],[10,"register","","Register `self` with the given `Poll` instance.",10,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[10,"reregister","","Re-register `self` with the given `Poll` instance.",10,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[10,"deregister","","Deregister `self` from the given `Poll` instance",10,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[0,"unix","mio","Unix only extensions",null,null],[3,"EventedFd","mio::unix","Adapter for `RawFd` providing an [`Evented`] implementation.",null,null],[12,"0","","",11,null],[3,"UnixReady","","Unix specific extensions to `Ready`",null,null],[11,"clone","mio::event","",12,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Event` containing `readiness` and `token`",12,{"inputs":[{"name":"ready"},{"name":"token"}],"output":{"name":"event"}}],[11,"readiness","","Returns the event's readiness.",12,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"token","","Returns the event's token.",12,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["event"],"name":"option"}}],[11,"fmt","mio::unix","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",11,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",11,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",11,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unixready"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"ordering"}}],[11,"aio","","Returns a `Ready` representing AIO completion readiness",14,{"inputs":[],"output":{"name":"unixready"}}],[11,"error","","Returns a `Ready` representing error readiness.",14,{"inputs":[],"output":{"name":"unixready"}}],[11,"hup","","Returns a `Ready` representing HUP readiness.",14,{"inputs":[],"output":{"name":"unixready"}}],[11,"is_aio","","Returns true if `Ready` contains AIO readiness",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_error","","Returns true if the value includes error readiness",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hup","","Returns true if the value includes HUP readiness",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",14,{"inputs":[{"name":"ready"}],"output":{"name":"unixready"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"bitor","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"bitxor","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"bitand","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"SetReadiness"],[3,"Poll"],[3,"Events"],[3,"Registration"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"Evented"],[3,"EventedFd"],[3,"Event"],[3,"Iter"],[3,"UnixReady"]]};
searchIndex["native_tls"] = {"doc":"An abstraction over platform-specific TLS implementations.","items":[[3,"Error","native_tls","An error returned from the TLS implementation.",null,null],[3,"Pkcs12","","A PKCS #12 archive.",null,null],[3,"Certificate","","An X509 certificate.",null,null],[3,"MidHandshakeTlsStream","","A TLS stream which has been interrupted midway through the handshake process.",null,null],[3,"TlsConnectorBuilder","","A builder for `TlsConnector`s.",null,null],[3,"TlsConnector","","A builder for client-side TLS connections.",null,null],[3,"TlsAcceptorBuilder","","A builder for `TlsAcceptor`s.",null,null],[3,"TlsAcceptor","","A builder for server-side TLS connections.",null,null],[3,"TlsStream","","A stream managing a TLS session.",null,null],[4,"HandshakeError","","An error returned from `ClientBuilder::handshake`.",null,null],[13,"Failure","","A fatal error.",0,null],[13,"Interrupted","","A stream interrupted midway through the handshake process due to a `WouldBlock` error.",0,null],[4,"Protocol","","SSL/TLS protocol versions.",null,null],[13,"Sslv3","","The SSL 3.0 protocol.",1,null],[13,"Tlsv10","","The TLS 1.0 protocol.",1,null],[13,"Tlsv11","","The TLS 1.1 protocol.",1,null],[13,"Tlsv12","","The TLS 1.2 protocol.",1,null],[0,"backend","","TLS backend-specific functionality.",null,null],[0,"security_framework","native_tls::backend","Security Framework-specific functionality.",null,null],[8,"TlsStreamExt","native_tls::backend::security_framework","Security Framework-specific extensions to `TlsStream`.",null,null],[10,"raw_stream","","Returns a shared reference to the Security Framework `SslStream`.",2,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[10,"raw_stream_mut","","Returns a mutable reference to the Security Framework `SslStream`.",2,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[8,"TlsConnectorBuilderExt","","Security Framework-specific extensions to `TlsConnectorBuilder`.",null,null],[10,"anchor_certificates","","Deprecated",3,null],[8,"ErrorExt","","Security Framework-specific extensions to `Error`",null,null],[10,"security_framework_error","","Extract the underlying Security Framework error for inspection.",4,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"raw_stream","native_tls","",5,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[11,"raw_stream_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[11,"anchor_certificates","","",6,null],[11,"security_framework_error","","",7,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[6,"Result","","A typedef of the result-type returned by many methods.",null,null],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"from_der","","Parses a DER-formatted PKCS #12 archive, using the specified password to decrypt the key.",8,null],[11,"from_der","","Parses a DER-formatted X509 certificate.",9,null],[11,"from_pem","","Parses a PEM-formatted X509 certificate. If the PEM file contains more than one certificate the last one is used and the others are ignored.",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"handshake","","Restarts the handshake process.",10,{"inputs":[{"name":"self"}],"output":{"generics":["tlsstream","handshakeerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"identity","","Sets the identity to be used for client certificate authentication.",6,{"inputs":[{"name":"self"},{"name":"pkcs12"}],"output":{"generics":["tlsconnectorbuilder"],"name":"result"}}],[11,"supported_protocols","","Sets the protocols which the connector will support.",6,null],[11,"add_root_certificate","","Adds a certificate to the set of roots that the connector will trust.",6,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":{"generics":["tlsconnectorbuilder"],"name":"result"}}],[11,"build","","Consumes the builder, returning a `TlsConnector`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["tlsconnector"],"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"tlsconnector"}}],[11,"builder","","Returns a new builder for a `TlsConnector`.",11,{"inputs":[],"output":{"generics":["tlsconnectorbuilder"],"name":"result"}}],[11,"connect","","Initiates a TLS handshake.",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"generics":["tlsstream","handshakeerror"],"name":"result"}}],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Like `connect`, but does not validate the server's domain name against its certificate.",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["tlsstream","handshakeerror"],"name":"result"}}],[11,"supported_protocols","","Sets the protocols which the acceptor will support.",12,null],[11,"build","","Consumes the builder, returning a `TlsAcceptor`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["tlsacceptor"],"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tlsacceptor"}}],[11,"builder","","Returns a new builder for a `TlsAcceptor`.",13,{"inputs":[{"name":"pkcs12"}],"output":{"generics":["tlsacceptorbuilder"],"name":"result"}}],[11,"accept","","Initiates a TLS handshake.",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["tlsstream","handshakeerror"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"buffered_read_size","","Returns the number of bytes that can be read without resulting in any network calls.",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"shutdown","","Shuts down the TLS session.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",5,null],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"HandshakeError"],[4,"Protocol"],[8,"TlsStreamExt"],[8,"TlsConnectorBuilderExt"],[8,"ErrorExt"],[3,"TlsStream"],[3,"TlsConnectorBuilder"],[3,"Error"],[3,"Pkcs12"],[3,"Certificate"],[3,"MidHandshakeTlsStream"],[3,"TlsConnector"],[3,"TlsAcceptorBuilder"],[3,"TlsAcceptor"]]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"generics":["udpbuilder"],"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"generics":["udpbuilder"],"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"reuse_port","net2","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"reuse_port","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"result"}}],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,null],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["percent_encoding"] = {"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"simple_encode_set"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"query_encode_set"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"default_encode_set"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"path_segment_encode_set"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"userinfo_encode_set"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"percentencode"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"percentdecode"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",7,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,{"inputs":[{"name":"self"}],"output":{"generics":["cow","utf8error"],"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["phf"] = {"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"is_empty","","Returns true if the `Map` is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of entries in the `Map`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `Set`.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"len","","Returns the number of entries in the `Map`.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Map` is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered map.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["usize"],"name":"option"}}],[11,"index","","Returns references to both the key and values at an index within the list used to initialize the ordered map. See `.get_index(key)`.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered set.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["usize"],"name":"option"}}],[11,"index","","Returns a reference to the key at an index within the list used to initialize the ordered set. See `.get_index(key)`.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",1,null],[13,"Brace","","`{ ... }`",1,null],[13,"Bracket","","`[ ... ]`",1,null],[13,"None","","`Ø ... Ø`",1,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,null],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",null,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","proc_macro2","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"empty","","Returns an empty `TokenStream` containing no token trees.",4,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"call_site","","The span of the invocation of the current procedural macro.",6,{"inputs":[],"output":{"name":"span"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configures the span for only this token.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"group"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"ident"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"punct"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"literal"}],"output":{"name":"tokentree"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,{"inputs":[{"name":"delimiter"},{"name":"tokenstream"}],"output":{"name":"group"}}],[11,"delimiter","","Returns the delimiter of this `Group`",7,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"punct"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,{"inputs":[{"name":"char"},{"name":"spacing"}],"output":{"name":"punct"}}],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"span","","Returns the span for this punctuation character.",8,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configure the span for this punctuation character.",8,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"ident"}}],[11,"span","","Returns the span of this `Ident`.",9,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"f64_unsuffixed","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64_suffixed","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"f32_suffixed","","",10,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",10,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",10,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",10,null],[11,"span","","",10,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",10,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",null,null],[10,"append","","",0,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[10,"append_all","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[10,"append_separated","","",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[10,"append_terminated","","",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",1,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[8,"Rng","rand","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",2,null],[11,"gen","","Return a random value of a `Rand` type.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",2,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,null],[11,"shuffle","","Shuffle a mutable slice in place.",2,null],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",4,null],[10,"from_seed","","Create a new RNG with the given seed.",4,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",5,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",6,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",null,null],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",8,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",9,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",12,null],[12,"item","","The actual item which is being weighted",12,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[11,"new","rand::os","Create a new `OsRng`.",13,{"inputs":[],"output":{"generics":["osrng","error"],"name":"result"}}],[11,"default","rand::reseeding","",14,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"next_u32","rand","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_u32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",16,null],[11,"next_u32","rand::chacha","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand::isaac","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand::os","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",13,null],[11,"next_u32","rand","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand::read","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",20,null],[11,"next_u32","rand::reseeding","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",0,null],[11,"next_u32","rand::isaac","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","rand","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::reseeding","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::chacha","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::normal","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::read","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::isaac","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::normal","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::range","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::exponential","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::isaac","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::exponential","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::reseeding","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::os","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","rand::distributions","",25,{"inputs":[{"name":"self"}],"output":{"name":"randsample"}}],[11,"clone","rand::distributions::normal","",26,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"clone","rand::distributions::gamma","",32,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"clone","rand::chacha","",17,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"clone","rand::isaac","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"clone","rand::distributions","",12,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"clone","rand::distributions::normal","",27,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"clone","rand::reseeding","",14,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"clone","rand","",19,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"clone","rand::distributions::gamma","",28,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"clone","rand::distributions::range","",29,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","rand::distributions::gamma","",30,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"clone","rand","",15,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"clone","rand::isaac","",21,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"clone","rand","",16,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"clone","rand::distributions::exponential","",33,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"clone","rand::distributions::gamma","",24,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"clone","rand::distributions::exponential","",9,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"clone","rand::distributions::normal","",8,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"ind_sample","rand::distributions::range","",29,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","rand::distributions","",31,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","rand::distributions::normal","",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::exponential","",33,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::normal","",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::gamma","",30,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",32,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions","",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","rand::distributions::gamma","",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"rand","rand","",19,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","rand::chacha","",17,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[11,"rand","rand","",6,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[11,"rand","rand::distributions::exponential","",9,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"rand","rand::isaac","",21,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"rand","rand::distributions::normal","",8,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"rand","rand","",5,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"reseed","rand::isaac","",21,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",21,null],[11,"reseed","rand::reseeding","",0,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,null],[11,"reseed","rand::isaac","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"reseed","rand::chacha","",17,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",17,null],[11,"reseed","rand","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",19,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",19,null],[11,"reseed","","",15,null],[11,"from_seed","","",15,null],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"sample","rand::distributions::gamma","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::range","",29,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"sample","rand::distributions","",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"sample","rand::distributions::gamma","",30,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::normal","",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::exponential","",33,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::gamma","",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",32,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::normal","",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions","",31,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"reseed","rand::reseeding","",14,null],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",21,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",17,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",17,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,null],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",20,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"new_unseeded","rand","Creates a new XorShiftRng instance which is not seeded.",19,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",15,{"inputs":[],"output":{"generics":["stdrng","error"],"name":"result"}}],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",29,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",24,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",30,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",28,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",32,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",27,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",26,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",33,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"new","rand::distributions","",25,{"inputs":[],"output":{"name":"randsample"}}],[11,"new","","Create a new `WeightedChoice`.",31,null]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"ReseedWithDefault"],[3,"StdRng"],[3,"ThreadRng"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"XorShiftRng"],[3,"ReadRng"],[3,"Isaac64Rng"],[3,"AsciiGenerator"],[3,"Generator"],[3,"Gamma"],[3,"RandSample"],[3,"LogNormal"],[3,"Normal"],[3,"FisherF"],[3,"Range"],[3,"ChiSquared"],[3,"WeightedChoice"],[3,"StudentT"],[3,"Exp"]]};
searchIndex["relay"] = {"doc":"relay","items":[[3,"Sender","relay","The Sender portion of a channel.",null,null],[3,"Receiver","","The receiver end of the channel.",null,null],[3,"Waiting","","A `Future` waiting for interest to be registered on the `Receiver`.",null,null],[3,"Canceled","","Represents that the `Sender` dropped before sending a message.",null,null],[5,"channel","","Create a new channel to send a message.",null,null],[11,"complete","","Sends the message to the `Receiver`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_canceled","","Returns true if the `Receiver` has been dropped.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"waiting","","Creates a `Future` that waits until someone is waiting on the `Receiver`.",0,{"inputs":[{"name":"self"}],"output":{"name":"waiting"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_canceled","","Returns true if the `Sender` was dropped without sending a message.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_recv","","Tries to receive the value if completed.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option","canceled"],"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}]],"paths":[[3,"Sender"],[3,"Receiver"],[3,"Waiting"],[3,"Canceled"]]};
searchIndex["remove_dir_all"] = {"doc":"","items":[[5,"remove_dir_all","remove_dir_all","Removes a directory at this path, after removing all its contents. Use carefully!",null,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[]};
searchIndex["reqwest"] = {"doc":"reqwest","items":[[0,"header","reqwest","Headers container, and common header fields.",null,null],[0,"parsing","reqwest::header","Utility functions for Header implementations.",null,null],[5,"from_one_raw_str","reqwest::header::parsing","Reads a single raw string when parsing a header.",null,{"inputs":[{"name":"raw"}],"output":{"generics":["error"],"name":"result"}}],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,{"inputs":[{"name":"raw"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[3,"ExtendedValue","","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",0,null],[12,"language_tag","","The human language details of the `value`, if available.",0,null],[12,"value","","The parameter value, as expressed in octets.",0,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"generics":["extendedvalue","error"],"name":"result"}}],[5,"http_percent_encode","","Percent encode a sequence of bytes with a character set defined in [https://tools.ietf.org/html/rfc5987#section-3.2][url]",null,null],[8,"Header","reqwest::header","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",1,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",1,{"inputs":[{"name":"raw"}],"output":{"generics":["error"],"name":"result"}}],[10,"fmt_header","","Format a header to outgoing stream.",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"Formatter","","A formatter used to serialize headers to an output stream.",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"EntityTag","","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",2,null],[4,"MediaDesc","","A Media Descriptors Enum based on: [https://www.w3.org/TR/html401/types.html#h-6.13][url]",null,null],[13,"Screen","","screen.",3,null],[13,"Tty","","tty.",3,null],[13,"Tv","","tv.",3,null],[13,"Projection","","projection.",3,null],[13,"Handheld","","handheld.",3,null],[13,"Print","","print.",3,null],[13,"Braille","","braille.",3,null],[13,"Aural","","aural.",3,null],[13,"All","","all.",3,null],[13,"Extension","","Unrecognized media descriptor extension.",3,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",4,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",4,null],[13,"SameOrigin","","`same-origin`",4,null],[13,"Origin","","`origin`",4,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",4,null],[13,"UnsafeUrl","","`unsafe-url`",4,null],[13,"StrictOrigin","","`strict-origin`",4,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",4,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",5,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",6,null],[13,"Items","","Only the listed items are a match",6,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[3,"HttpDate","","A timestamp with HTTP formatting and parsing",null,null],[3,"CookieIter","","Iterator for cookie.",null,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",7,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",8,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",9,null],[3,"LanguageTag","","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",10,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",10,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",10,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",10,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",10,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",10,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",10,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",11,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",11,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",12,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",13,null],[3,"Host","","The `Host` header.",null,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",14,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input. Note: A compliant client MUST always send a password (which may be the empty string).",14,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",15,null],[12,"quality","","The quality (client or server preference) for the value.",15,null],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",null,null],[13,"Alternate","","alternate.",16,null],[13,"Appendix","","appendix.",16,null],[13,"Bookmark","","bookmark.",16,null],[13,"Chapter","","chapter.",16,null],[13,"Contents","","contents.",16,null],[13,"Copyright","","copyright.",16,null],[13,"Current","","current.",16,null],[13,"DescribedBy","","describedby.",16,null],[13,"Edit","","edit.",16,null],[13,"EditMedia","","edit-media.",16,null],[13,"Enclosure","","enclosure.",16,null],[13,"First","","first.",16,null],[13,"Glossary","","glossary.",16,null],[13,"Help","","help.",16,null],[13,"Hub","","hub.",16,null],[13,"Index","","index.",16,null],[13,"Last","","last.",16,null],[13,"LatestVersion","","latest-version.",16,null],[13,"License","","license.",16,null],[13,"Next","","next.",16,null],[13,"NextArchive","","next-archive.",16,null],[13,"Payment","","payment.",16,null],[13,"Prev","","prev.",16,null],[13,"PredecessorVersion","","predecessor-version.",16,null],[13,"Previous","","previous.",16,null],[13,"PrevArchive","","prev-archive.",16,null],[13,"Related","","related.",16,null],[13,"Replies","","replies.",16,null],[13,"Section","","section.",16,null],[13,"RelationTypeSelf","","self.",16,null],[13,"Service","","service.",16,null],[13,"Start","","start.",16,null],[13,"Stylesheet","","stylesheet.",16,null],[13,"Subsection","","subsection.",16,null],[13,"SuccessorVersion","","successor-version.",16,null],[13,"Up","","up.",16,null],[13,"VersionHistory","","versionHistory.",16,null],[13,"Via","","via.",16,null],[13,"WorkingCopy","","working-copy.",16,null],[13,"WorkingCopyOf","","working-copy-of.",16,null],[13,"ExtRelType","","ext-rel-type.",16,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",17,null],[13,"Date","","The date when the client retrieved the resource",17,null],[4,"RetryAfter","","The `Retry-After` header.",null,null],[13,"Delay","","Retry after this duration has elapsed",18,null],[13,"DateTime","","Retry after the given DateTime",18,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[3,"Te","","`TE` header, defined in RFC7230",null,null],[12,"0","","",19,null],[3,"ContentLocation","","`Content-Location` header, defined in RFC7231",null,null],[12,"0","","",20,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",21,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",22,null],[13,"Brotli","","The `br` encoding.",22,null],[13,"Gzip","","The `gzip` encoding.",22,null],[13,"Deflate","","The `deflate` encoding.",22,null],[13,"Compress","","The `compress` encoding.",22,null],[13,"Identity","","The `identity` encoding.",22,null],[13,"Trailers","","The `trailers` encoding.",22,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",22,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",23,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",24,null],[3,"LastEventId","","`Last-Event-ID` header, defined in RFC3864",null,null],[12,"0","","",25,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",26,null],[13,"NoStore","","\"no-store\"",26,null],[13,"NoTransform","","\"no-transform\"",26,null],[13,"OnlyIfCached","","\"only-if-cached\"",26,null],[13,"MaxAge","","\"max-age=delta\"",26,null],[13,"MaxStale","","\"max-stale=delta\"",26,null],[13,"MinFresh","","\"min-fresh=delta\"",26,null],[13,"MustRevalidate","","\"must-revalidate\"",26,null],[13,"Public","","\"public\"",26,null],[13,"Private","","\"private\"",26,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",26,null],[13,"SMaxAge","","\"s-maxage=delta\"",26,null],[13,"Extension","","Extension directives. Optionally include an argument.",26,null],[4,"Expect","","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",27,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",28,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",29,null],[13,"Items","","Only the listed items are a match",29,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",30,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",31,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",32,null],[13,"Items","","Only the listed items are a match",32,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",33,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",34,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",35,null],[8,"Scheme","","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",36,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",37,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",38,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",39,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",40,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",40,null],[3,"Link","","The `Link` header, defined in RFC5988",null,null],[3,"Raw","","A raw header value.",null,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",41,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[3,"ProxyAuthorization","","`Proxy-Authorization` header, defined in RFC7235",null,null],[12,"0","","",42,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",43,null],[5,"qitem","","Convenience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float or integer.",null,{"inputs":[{"name":"t"}],"output":{"name":"quality"}}],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",44,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",45,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",46,null],[13,"ReturnRepresentation","","\"return=representation\"",46,null],[13,"ReturnMinimal","","\"return=minimal\"",46,null],[13,"HandlingStrict","","\"handling=strict\"",46,null],[13,"HandlingLenient","","\"handling=lenient\"",46,null],[13,"Wait","","\"wait=delta\"",46,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",46,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",47,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",48,null],[12,"range","reqwest::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",48,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",48,null],[13,"Unregistered","reqwest::header","Custom range, with unit not registered at IANA",48,null],[12,"unit","reqwest::header::ContentRangeSpec","other-range-unit",48,null],[12,"resp","","other-range-resp",48,null],[4,"ConnectionOption","reqwest::header","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",49,null],[13,"Close","","The `close` connection value.",49,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",49,null],[4,"DispositionParam","","A parameter to the disposition type.",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",50,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",50,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",51,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",51,null],[13,"Unregistered","","The given range unit is not registered at IANA.",51,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",52,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",52,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",53,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",54,null],[3,"Warning","","`Warning` header, defined in RFC7234",null,null],[12,"code","","The 3 digit warn code.",55,null],[12,"agent","","The name or pseudonym of the server adding this header.",55,null],[12,"text","","The warning message describing the error.",55,null],[12,"date","","An optional warning date.",55,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",56,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",57,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[4,"ProtocolName","","A protocol name used to identify a specific protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",58,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",58,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",58,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",58,null],[13,"Unregistered","","Any other protocol name not known to hyper",58,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",59,null],[13,"Null","","A hidden origin",59,null],[13,"Value","","Allow one particular origin",59,null],[3,"Origin","","The `Origin` header.",null,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",60,null],[13,"Iso_8859_1","","ISO-8859-1",60,null],[13,"Iso_8859_2","","ISO-8859-2",60,null],[13,"Iso_8859_3","","ISO-8859-3",60,null],[13,"Iso_8859_4","","ISO-8859-4",60,null],[13,"Iso_8859_5","","ISO-8859-5",60,null],[13,"Iso_8859_6","","ISO-8859-6",60,null],[13,"Iso_8859_7","","ISO-8859-7",60,null],[13,"Iso_8859_8","","ISO-8859-8",60,null],[13,"Iso_8859_9","","ISO-8859-9",60,null],[13,"Iso_8859_10","","ISO-8859-10",60,null],[13,"Shift_Jis","","Shift_JIS",60,null],[13,"Euc_Jp","","EUC-JP",60,null],[13,"Iso_2022_Kr","","ISO-2022-KR",60,null],[13,"Euc_Kr","","EUC-KR",60,null],[13,"Iso_2022_Jp","","ISO-2022-JP",60,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",60,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",60,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",60,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",60,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",60,null],[13,"Gb2312","","GB2312",60,null],[13,"Big5","","Big5",60,null],[13,"Koi8_R","","KOI8-R",60,null],[13,"Ext","","An arbitrary charset specified as a string",60,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",61,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body.",null,null],[13,"Inline","","Inline implies default processing",62,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",62,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",62,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",63,null],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",null,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",64,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",65,null],[13,"Ext","","Every value other than `no-cache`.",65,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",66,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",67,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",67,null],[13,"Last","","Get last x bytes (\"-x\")",67,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266.",null,null],[12,"disposition","","The disposition",68,null],[12,"parameters","","Disposition parameters",68,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",69,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",70,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[3,"Mime","reqwest::mime","A parsed mime or media type.",null,null],[3,"Name","","A section of a `Mime`.",null,null],[3,"FromStrError","","An error when parsing a `Mime` from a string.",null,null],[3,"Params","","An iterator over the parameters of a MIME.",null,null],[17,"STAR","","",null,null],[17,"TEXT","","text",null,null],[17,"IMAGE","","image",null,null],[17,"AUDIO","","audio",null,null],[17,"VIDEO","","video",null,null],[17,"APPLICATION","","application",null,null],[17,"MULTIPART","","multipart",null,null],[17,"MESSAGE","","message",null,null],[17,"MODEL","","model",null,null],[17,"FONT","","font",null,null],[17,"PLAIN","","plain",null,null],[17,"HTML","","html",null,null],[17,"XML","","xml",null,null],[17,"JAVASCRIPT","","javascript",null,null],[17,"CSS","","css",null,null],[17,"CSV","","csv",null,null],[17,"EVENT_STREAM","","event-stream",null,null],[17,"JSON","","json",null,null],[17,"WWW_FORM_URLENCODED","","x-www-form-urlencoded",null,null],[17,"MSGPACK","","msgpack",null,null],[17,"OCTET_STREAM","","octet-stream",null,null],[17,"FORM_DATA","","form-data",null,null],[17,"PNG","","png",null,null],[17,"GIF","","gif",null,null],[17,"BMP","","bmp",null,null],[17,"JPEG","","jpeg",null,null],[17,"BASIC","","basic",null,null],[17,"MPEG","","mpeg",null,null],[17,"MP4","","mp4",null,null],[17,"OGG","","ogg",null,null],[17,"CHARSET","","charset",null,null],[17,"BOUNDARY","","boundary",null,null],[17,"UTF_8","","utf-8",null,null],[17,"STAR_STAR","","`*/*`",null,null],[17,"TEXT_STAR","","`text/*`",null,null],[17,"TEXT_PLAIN","","`text/plain`",null,null],[17,"TEXT_PLAIN_UTF_8","","`text/plain; charset=utf-8`",null,null],[17,"TEXT_HTML","","`text/html`",null,null],[17,"TEXT_HTML_UTF_8","","`text/html; charset=utf-8`",null,null],[17,"TEXT_CSS","","`text/css`",null,null],[17,"TEXT_JAVASCRIPT","","`text/javascript`",null,null],[17,"TEXT_XML","","`text/xml`",null,null],[17,"TEXT_EVENT_STREAM","","`text/event-stream`",null,null],[17,"TEXT_CSV","","`text/csv`",null,null],[17,"TEXT_CSV_UTF_8","","`text/csv; charset=utf-8`",null,null],[17,"TEXT_TAB_SEPARATED_VALUES","","`text/tab-separated-values`",null,null],[17,"TEXT_TAB_SEPARATED_VALUES_UTF_8","","`text/tab-separated-values; charset=utf-8`",null,null],[17,"IMAGE_STAR","","`image/*`",null,null],[17,"IMAGE_JPEG","","`image/jpeg`",null,null],[17,"IMAGE_GIF","","`image/gif`",null,null],[17,"IMAGE_PNG","","`image/png`",null,null],[17,"IMAGE_BMP","","`image/bmp`",null,null],[17,"APPLICATION_JSON","","`application/json`",null,null],[17,"APPLICATION_JAVASCRIPT","","`application/javascript`",null,null],[17,"APPLICATION_JAVASCRIPT_UTF_8","","`application/javascript; charset=utf-8`",null,null],[17,"APPLICATION_WWW_FORM_URLENCODED","","`application/x-www-form-urlencoded`",null,null],[17,"APPLICATION_OCTET_STREAM","","`application/octet-stream`",null,null],[17,"APPLICATION_MSGPACK","","`application/msgpack`",null,null],[17,"MULTIPART_FORM_DATA","","`multipart/form-data`",null,null],[4,"Method","reqwest","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",71,null],[13,"Get","","GET",71,null],[13,"Post","","POST",71,null],[13,"Put","","PUT",71,null],[13,"Delete","","DELETE",71,null],[13,"Head","","HEAD",71,null],[13,"Trace","","TRACE",71,null],[13,"Connect","","CONNECT",71,null],[13,"Patch","","PATCH",71,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",71,null],[4,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",72,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",72,null],[13,"Processing","","102 Processing [RFC2518]",72,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",72,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",72,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",72,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",72,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",72,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",72,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",72,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",72,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",72,null],[13,"ImUsed","","226 IM Used [RFC3229]",72,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",72,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",72,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",72,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",72,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",72,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",72,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",72,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",72,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",72,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",72,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",72,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",72,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",72,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",72,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",72,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",72,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",72,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",72,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",72,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",72,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",72,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",72,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",72,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",72,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",72,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",72,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",72,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",72,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",72,null],[13,"Locked","","423 Locked [RFC4918]",72,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",72,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",72,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",72,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",72,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",72,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",72,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",72,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",72,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",72,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",72,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",72,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",72,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",72,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",72,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",72,null],[13,"NotExtended","","510 Not Extended [RFC2774]",72,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",72,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",72,null],[3,"Url","","A parsed URL record.",null,null],[4,"UrlError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",73,null],[13,"IdnaError","","",73,null],[13,"InvalidPort","","",73,null],[13,"InvalidIpv4Address","","",73,null],[13,"InvalidIpv6Address","","",73,null],[13,"InvalidDomainCharacter","","",73,null],[13,"RelativeUrlWithoutBase","","",73,null],[13,"RelativeUrlWithCannotBeABaseBase","","",73,null],[13,"SetHostOnCannotBeABaseUrl","","",73,null],[13,"Overflow","","",73,null],[3,"Client","","A `Client` to make Requests with.",null,null],[3,"ClientBuilder","","A `ClientBuilder` can be used to create a `Client` with  custom configuration.",null,null],[3,"Error","","The Errors that may occur when processing a `Request`.",null,null],[3,"Body","","The body of a `Request`.",null,null],[3,"Proxy","","Configuration of a proxy that a `Client` should pass requests to.",null,null],[3,"RedirectAction","","An action to perform when a redirect status code is found.",null,null],[3,"RedirectAttempt","","A type that holds information on the next request and previous requests in redirect chain.",null,null],[3,"RedirectPolicy","","A type that controls the policy on how to handle the following of redirects.",null,null],[3,"Request","","A request which can be executed with `Client::execute()`.",null,null],[3,"RequestBuilder","","A builder to construct the properties of a `Request`.",null,null],[3,"Response","","A Response to a submitted `Request`.",null,null],[3,"Certificate","","Represent an X509 certificate.",null,null],[3,"Identity","","Represent a private key and X509 cert as a client certificate.",null,null],[5,"get","","Shortcut method to quickly make a `GET` request.",null,{"inputs":[{"name":"t"}],"output":{"generics":["response"],"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"url","","Returns a possible URL related to this error.",74,{"inputs":[{"name":"self"}],"output":{"generics":["url"],"name":"option"}}],[11,"get_ref","","Returns a reference to the internal error, if available.",74,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"is_http","","Returns true if the error is related to HTTP.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_serialization","","Returns true if the error is serialization related.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirect","","Returns true if the error is from a `RedirectPolicy`.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Returns true if the error is from a request returning a 4xx error.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Returns true if the error is from a request returning a 5xx error.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"status","","Returns the status code, if the error was generated from a response.",74,{"inputs":[{"name":"self"}],"output":{"generics":["statuscode"],"name":"option"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",74,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Instantiate a `Body` from a reader.",75,{"inputs":[{"name":"r"}],"output":{"name":"body"}}],[11,"sized","","Create a `Body` from a `Read` where the size is known in advance but the data should not be fully loaded into memory. This will set the `Content-Length` header and stream from the `Read`.",75,{"inputs":[{"name":"r"},{"name":"u64"}],"output":{"name":"body"}}],[11,"from","","",75,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"body"}}],[11,"from","","",75,{"inputs":[{"name":"string"}],"output":{"name":"body"}}],[11,"from","","",75,null],[11,"from","","",75,{"inputs":[{"name":"str"}],"output":{"name":"body"}}],[11,"from","","",75,{"inputs":[{"name":"file"}],"output":{"name":"body"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"client"}}],[11,"new","","Constructs a new `ClientBuilder`",77,{"inputs":[],"output":{"name":"clientbuilder"}}],[11,"build","","Returns a `Client` that uses this `ClientBuilder` configuration.",77,{"inputs":[{"name":"self"}],"output":{"generics":["client"],"name":"result"}}],[11,"add_root_certificate","","Add a custom root certificate.",77,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":{"name":"clientbuilder"}}],[11,"identity","","Sets the identity to be used for client certificate authentication.",77,{"inputs":[{"name":"self"},{"name":"identity"}],"output":{"name":"clientbuilder"}}],[11,"danger_disable_hostname_verification","","Disable hostname verification.",77,{"inputs":[{"name":"self"}],"output":{"name":"clientbuilder"}}],[11,"enable_hostname_verification","","Enable hostname verification.",77,{"inputs":[{"name":"self"}],"output":{"name":"clientbuilder"}}],[11,"default_headers","","Sets the default headers for every request.",77,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"clientbuilder"}}],[11,"gzip","","Enable auto gzip decompression by checking the ContentEncoding response header.",77,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"clientbuilder"}}],[11,"proxy","","Add a `Proxy` to the list of proxies the `Client` will use.",77,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"name":"clientbuilder"}}],[11,"redirect","","Set a `RedirectPolicy` for this client.",77,{"inputs":[{"name":"self"},{"name":"redirectpolicy"}],"output":{"name":"clientbuilder"}}],[11,"referer","","Enable or disable automatic setting of the `Referer` header.",77,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"clientbuilder"}}],[11,"timeout","","Set a timeout for connect, read and write operations of a `Client`.",77,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"clientbuilder"}}],[11,"new","","Constructs a new `Client`.",76,{"inputs":[],"output":{"name":"client"}}],[11,"builder","","Creates a `ClientBuilder` to configure a `Client`.",76,{"inputs":[],"output":{"name":"clientbuilder"}}],[11,"get","","Convenience method to make a `GET` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"post","","Convenience method to make a `POST` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"put","","Convenience method to make a `PUT` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"patch","","Convenience method to make a `PATCH` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"delete","","Convenience method to make a `DELETE` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"head","","Convenience method to make a `HEAD` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"request","","Start building a `Request` with the `Method` and `Url`.",76,{"inputs":[{"name":"self"},{"name":"method"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"execute","","Executes a `Request`.",76,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"generics":["response"],"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"proxy"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"http","","Proxy all HTTP traffic to the passed URL.",78,{"inputs":[{"name":"u"}],"output":{"generics":["proxy"],"name":"result"}}],[11,"https","","Proxy all HTTPS traffic to the passed URL.",78,{"inputs":[{"name":"u"}],"output":{"generics":["proxy"],"name":"result"}}],[11,"all","","Proxy all traffic to the passed URL.",78,{"inputs":[{"name":"u"}],"output":{"generics":["proxy"],"name":"result"}}],[11,"custom","","Provide a custom function to determine what traffix to proxy to where.",78,{"inputs":[{"name":"f"}],"output":{"name":"proxy"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"limited","","Create a RedirectPolicy with a maximum number of redirects.",79,{"inputs":[{"name":"usize"}],"output":{"name":"redirectpolicy"}}],[11,"none","","Create a RedirectPolicy that does not follow any redirect.",79,{"inputs":[],"output":{"name":"redirectpolicy"}}],[11,"custom","","Create a custom RedirectPolicy using the passed function.",79,{"inputs":[{"name":"t"}],"output":{"name":"redirectpolicy"}}],[11,"default","","",79,{"inputs":[],"output":{"name":"redirectpolicy"}}],[11,"url","","Get the next URL to redirect to.",80,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"previous","","Get the list of previous URLs that have already been requested in this chain.",80,null],[11,"follow","","Returns an action meaning reqwest should follow the next URL.",80,{"inputs":[{"name":"self"}],"output":{"name":"redirectaction"}}],[11,"stop","","Returns an action meaning reqwest should not follow the next URL.",80,{"inputs":[{"name":"self"}],"output":{"name":"redirectaction"}}],[11,"loop_detected","","Returns an action meaning there was a loop of redirects found.",80,{"inputs":[{"name":"self"}],"output":{"name":"redirectaction"}}],[11,"too_many_redirects","","Returns an action meaning there was a loop of redirects found.",80,{"inputs":[{"name":"self"}],"output":{"name":"redirectaction"}}],[11,"new","","Constructs a new request.",82,{"inputs":[{"name":"method"},{"name":"url"}],"output":{"name":"self"}}],[11,"method","","Get the method.",82,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"method_mut","","Get a mutable reference to the method.",82,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"url","","Get the url.",82,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"url_mut","","Get a mutable reference to the url.",82,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"headers","","Get the headers.",82,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"headers_mut","","Get a mutable reference to the headers.",82,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"body","","Get the body.",82,{"inputs":[{"name":"self"}],"output":{"generics":["body"],"name":"option"}}],[11,"body_mut","","Get a mutable reference to the body.",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"header","","Add a `Header` to this Request.",83,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"requestbuilder"}}],[11,"headers","","Add a set of Headers to the existing ones on this Request.",83,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"requestbuilder"}}],[11,"basic_auth","","Enable HTTP basic authentication.",83,{"inputs":[{"name":"self"},{"name":"u"},{"name":"option"}],"output":{"name":"requestbuilder"}}],[11,"body","","Set the request body.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"query","","Modify the query string of the URL.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"form","","Send a form body.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"json","","Send a JSON body.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"multipart","","Sends a multipart/form-data body.",83,{"inputs":[{"name":"self"},{"name":"form"}],"output":{"name":"requestbuilder"}}],[11,"build","","Build a `Request`, which can be inspected, modified and executed with `Client::execute()`.",83,{"inputs":[{"name":"self"}],"output":{"generics":["request"],"name":"result"}}],[11,"send","","Constructs the Request and sends it the target URL, returning a Response.",83,{"inputs":[{"name":"self"}],"output":{"generics":["response"],"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"url","","Get the final `Url` of this `Response`.",84,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"status","","Get the `StatusCode` of this `Response`.",84,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers","","Get the `Headers` of this `Response`.",84,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"json","","Try and deserialize the response body as JSON using `serde`.",84,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"text","","Get the response text.",84,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"copy_to","","Copy the response body into a writer.",84,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["u64"],"name":"result"}}],[11,"error_for_status","","Turn a response into an error if the server returned an error.",84,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",84,null],[11,"from_der","","Create a `Certificate` from a binary DER encoded certificate",85,null],[11,"from_pem","","Create a `Certificate` from a PEM encoded certificate",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_pkcs12_der","","Parses a DER-formatted PKCS #12 archive, using the specified password to decrypt the key.",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"multipart","","multipart/form-data",null,null],[3,"Form","reqwest::multipart","A multipart/form-data request.",null,null],[3,"Part","","A field in a multipart form.",null,null],[6,"Result","reqwest","A `Result` alias where the `Err` case is `reqwest::Error`.",null,null],[8,"IntoUrl","","A trait to try to convert some type into a `Url`.",null,null],[11,"default","","",71,{"inputs":[],"output":{"name":"method"}}],[11,"default","reqwest::header","",87,{"inputs":[],"output":{"name":"headers"}}],[11,"default","reqwest","",72,{"inputs":[],"output":{"name":"statuscode"}}],[11,"default","reqwest::header","",88,{"inputs":[],"output":{"name":"quality"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"generics":["qualityitem","error"],"name":"result"}}],[11,"from_str","","",67,{"inputs":[{"name":"str"}],"output":{"generics":["byterangespec","error"],"name":"result"}}],[11,"from_str","","",49,{"inputs":[{"name":"str"}],"output":{"generics":["connectionoption"],"name":"result"}}],[11,"from_str","","",58,{"inputs":[{"name":"str"}],"output":{"generics":["protocolname"],"name":"result"}}],[11,"from_str","","",40,{"inputs":[{"name":"str"}],"output":{"generics":["protocol"],"name":"result"}}],[11,"from_str","","",48,{"inputs":[{"name":"str"}],"output":{"generics":["contentrangespec","error"],"name":"result"}}],[11,"from_str","","",89,{"inputs":[{"name":"str"}],"output":{"generics":["origin","error"],"name":"result"}}],[11,"from_str","","",90,{"inputs":[{"name":"str"}],"output":{"generics":["link","error"],"name":"result"}}],[11,"from_str","","",47,{"inputs":[{"name":"str"}],"output":{"generics":["bearer","error"],"name":"result"}}],[11,"from_str","","",26,{"inputs":[{"name":"str"}],"output":{"generics":["cachedirective","option"],"name":"result"}}],[11,"from_str","","",91,{"inputs":[{"name":"str"}],"output":{"generics":["host","error"],"name":"result"}}],[11,"from_str","","",55,{"inputs":[{"name":"str"}],"output":{"generics":["warning","error"],"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"generics":["stricttransportsecurity","error"],"name":"result"}}],[11,"from_str","","",52,{"inputs":[{"name":"str"}],"output":{"generics":["range","error"],"name":"result"}}],[11,"from_str","","",14,{"inputs":[{"name":"str"}],"output":{"generics":["basic","error"],"name":"result"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"generics":["encoding","error"],"name":"result"}}],[11,"from_str","","",92,{"inputs":[{"name":"str"}],"output":{"generics":["httpdate","error"],"name":"result"}}],[11,"from_str","","",46,{"inputs":[{"name":"str"}],"output":{"generics":["preference","option"],"name":"result"}}],[11,"from_str","reqwest","",71,{"inputs":[{"name":"str"}],"output":{"generics":["method","error"],"name":"result"}}],[11,"from_str","reqwest::header","",16,{"inputs":[{"name":"str"}],"output":{"generics":["relationtype","error"],"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["entitytag","error"],"name":"result"}}],[11,"from_str","","",60,{"inputs":[{"name":"str"}],"output":{"generics":["charset","error"],"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["mediadesc","error"],"name":"result"}}],[11,"from_str","","",51,{"inputs":[{"name":"str"}],"output":{"generics":["rangeunit","error"],"name":"result"}}],[11,"as_ref","reqwest","",71,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","reqwest::header","",93,{"inputs":[{"name":"string"}],"output":{"name":"raw"}}],[11,"from","","",92,{"inputs":[{"name":"systemtime"}],"output":{"name":"httpdate"}}],[11,"from","","",93,{"inputs":[{"generics":["vec"],"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",93,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",93,{"inputs":[{"name":"bytes"}],"output":{"name":"raw"}}],[11,"from","","",93,{"inputs":[{"name":"str"}],"output":{"name":"raw"}}],[11,"from","","",93,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header::parsing","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",102,{"inputs":[{"name":"self"}],"output":{"generics":["headerview"],"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"eq","","",93,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",93,null],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"eq","","",93,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"proxyauthorization"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"proxyauthorization"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"retryafter"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"retryafter"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"lasteventid"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"lasteventid"}],"output":{"name":"bool"}}],[11,"eq","reqwest","",71,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"eq","reqwest::header","",90,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"eq","reqwest::header::parsing","",0,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"eq","reqwest::header","",39,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"eq","reqwest","",72,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"eq","reqwest::header","",31,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"te"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"te"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"eq","","",93,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"eq","","",93,null],[11,"header_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",55,{"inputs":[{"name":"raw"}],"output":{"generics":["warning","error"],"name":"result"}}],[11,"fmt_header","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",17,{"inputs":[{"name":"raw"}],"output":{"generics":["ifrange","error"],"name":"result"}}],[11,"fmt_header","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",8,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",8,{"inputs":[{"name":"raw"}],"output":{"generics":["expires","error"],"name":"result"}}],[11,"fmt_header","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolalloworigin","error"],"name":"result"}}],[11,"fmt_header","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",98,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",98,{"inputs":[{"name":"raw"}],"output":{"generics":["cookie","error"],"name":"result"}}],[11,"fmt_header","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",4,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",4,{"inputs":[{"name":"raw"}],"output":{"generics":["referrerpolicy","error"],"name":"result"}}],[11,"fmt_header","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,{"inputs":[{"name":"raw"}],"output":{"generics":["date","error"],"name":"result"}}],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",24,{"inputs":[{"name":"raw"}],"output":{"generics":["cachecontrol","error"],"name":"result"}}],[11,"fmt_header","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,{"inputs":[{"name":"raw"}],"output":{"generics":["proxyauthorization","error"],"name":"result"}}],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",29,{"inputs":[{"name":"raw"}],"output":{"generics":["ifmatch","error"],"name":"result"}}],[11,"fmt_header","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",30,{"inputs":[{"name":"raw"}],"output":{"generics":["acceptranges","error"],"name":"result"}}],[11,"fmt_header","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",70,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",70,{"inputs":[{"name":"raw"}],"output":{"generics":["contentencoding","error"],"name":"result"}}],[11,"fmt_header","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",64,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",64,{"inputs":[{"name":"raw"}],"output":{"generics":["allow","error"],"name":"result"}}],[11,"fmt_header","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",68,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",68,{"inputs":[{"name":"raw"}],"output":{"generics":["contentdisposition","error"],"name":"result"}}],[11,"fmt_header","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,{"inputs":[{"name":"raw"}],"output":{"generics":["connection","error"],"name":"result"}}],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",96,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",96,{"inputs":[{"name":"raw"}],"output":{"generics":["useragent","error"],"name":"result"}}],[11,"fmt_header","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",69,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",69,{"inputs":[{"name":"raw"}],"output":{"generics":["authorization","error"],"name":"result"}}],[11,"fmt_header","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",34,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",34,{"inputs":[{"name":"raw"}],"output":{"generics":["setcookie","error"],"name":"result"}}],[11,"fmt_header","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",33,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",33,{"inputs":[{"name":"raw"}],"output":{"generics":["etag","error"],"name":"result"}}],[11,"fmt_header","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,{"inputs":[{"name":"raw"}],"output":{"generics":["accept","error"],"name":"result"}}],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",97,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",97,{"inputs":[{"name":"raw"}],"output":{"generics":["location","error"],"name":"result"}}],[11,"fmt_header","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",43,{"inputs":[{"name":"raw"}],"output":{"generics":["ifunmodifiedsince","error"],"name":"result"}}],[11,"fmt_header","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,{"inputs":[{"name":"raw"}],"output":{"generics":["from","error"],"name":"result"}}],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",9,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",9,{"inputs":[{"name":"raw"}],"output":{"generics":["contenttype","error"],"name":"result"}}],[11,"fmt_header","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,{"inputs":[{"name":"raw"}],"output":{"generics":["lasteventid","error"],"name":"result"}}],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",63,{"inputs":[{"name":"raw"}],"output":{"generics":["contentrange","error"],"name":"result"}}],[11,"fmt_header","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",101,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",101,{"inputs":[{"name":"raw"}],"output":{"generics":["server","error"],"name":"result"}}],[11,"fmt_header","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",89,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",89,{"inputs":[{"name":"raw"}],"output":{"generics":["origin","error"],"name":"result"}}],[11,"fmt_header","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolallowheaders","error"],"name":"result"}}],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",13,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",13,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolmaxage","error"],"name":"result"}}],[11,"fmt_header","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,{"inputs":[{"name":"raw"}],"output":{"generics":["ifmodifiedsince","error"],"name":"result"}}],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",7,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",7,{"inputs":[{"name":"raw"}],"output":{"generics":["acceptlanguage","error"],"name":"result"}}],[11,"fmt_header","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",12,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",12,{"inputs":[{"name":"raw"}],"output":{"generics":["contentlanguage","error"],"name":"result"}}],[11,"fmt_header","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,{"inputs":[{"name":"raw"}],"output":{"generics":["upgrade","error"],"name":"result"}}],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",100,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",100,{"inputs":[{"name":"raw"}],"output":{"generics":["referer","error"],"name":"result"}}],[11,"fmt_header","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,{"inputs":[{"name":"raw"}],"output":{"generics":["preferenceapplied","error"],"name":"result"}}],[11,"fmt_header","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",53,{"inputs":[{"name":"raw"}],"output":{"generics":["prefer","error"],"name":"result"}}],[11,"fmt_header","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",90,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",90,{"inputs":[{"name":"raw"}],"output":{"generics":["link","error"],"name":"result"}}],[11,"fmt_header","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",66,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolrequestheaders","error"],"name":"result"}}],[11,"fmt_header","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolrequestmethod","error"],"name":"result"}}],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolallowmethods","error"],"name":"result"}}],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,{"inputs":[{"name":"raw"}],"output":{"generics":["vary","error"],"name":"result"}}],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",94,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",94,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolallowcredentials","error"],"name":"result"}}],[11,"fmt_header","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,{"inputs":[{"name":"raw"}],"output":{"generics":["acceptencoding","error"],"name":"result"}}],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",5,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",5,{"inputs":[{"name":"raw"}],"output":{"generics":["acceptcharset","error"],"name":"result"}}],[11,"fmt_header","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",6,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",6,{"inputs":[{"name":"raw"}],"output":{"generics":["ifnonematch","error"],"name":"result"}}],[11,"fmt_header","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",20,{"inputs":[{"name":"raw"}],"output":{"generics":["contentlocation","error"],"name":"result"}}],[11,"fmt_header","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,{"inputs":[{"name":"raw"}],"output":{"generics":["range","error"],"name":"result"}}],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",91,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",91,{"inputs":[{"name":"raw"}],"output":{"generics":["host","error"],"name":"result"}}],[11,"fmt_header","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,{"inputs":[{"name":"raw"}],"output":{"generics":["contentlength","error"],"name":"result"}}],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",35,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",35,{"inputs":[{"name":"raw"}],"output":{"generics":["transferencoding","error"],"name":"result"}}],[11,"fmt_header","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",56,{"inputs":[{"name":"raw"}],"output":{"generics":["lastmodified","error"],"name":"result"}}],[11,"fmt_header","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",65,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",65,{"inputs":[{"name":"raw"}],"output":{"generics":["pragma","error"],"name":"result"}}],[11,"fmt_header","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",18,{"inputs":[{"name":"raw"}],"output":{"generics":["retryafter","error"],"name":"result"}}],[11,"fmt_header","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",19,{"inputs":[{"name":"raw"}],"output":{"generics":["te","error"],"name":"result"}}],[11,"fmt_header","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,{"inputs":[{"name":"raw"}],"output":{"generics":["expect","error"],"name":"result"}}],[11,"fmt_header","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",11,{"inputs":[{"name":"raw"}],"output":{"generics":["stricttransportsecurity","error"],"name":"result"}}],[11,"fmt_header","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolexposeheaders","error"],"name":"result"}}],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"index","","",93,null],[11,"hash","reqwest","",71,null],[11,"hash","","",72,null],[11,"extend","reqwest::header","",87,null],[11,"extend","","",87,null],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",92,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",92,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",92,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",92,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","reqwest","",72,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","reqwest::header","",88,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",97,null],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",2,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",2,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",2,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",2,null],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"safe","reqwest","Whether a method is considered \"safe\", meaning the request is essentially read-only.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","reqwest::header","",54,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",96,null],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"type_","reqwest::mime","Get the top level media type for this `Mime`.",104,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"subtype","","Get the subtype of this `Mime`.",104,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"suffix","","Get an optional +suffix for this `Mime`.",104,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"get_param","","Look up a parameter by name.",104,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["name"],"name":"option"}}],[11,"params","","Returns an iterator over the parameters.",104,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"deref","reqwest::header","",9,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref","","",70,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",100,null],[11,"deref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",66,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",101,null],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",70,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",38,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",66,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header::parsing","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","reqwest::header","",18,{"inputs":[{"name":"self"}],"output":{"name":"retryafter"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"mediadesc"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"proxyauthorization"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"clone","reqwest","",72,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"clone","reqwest::header","",58,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"warning"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"linkvalue"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"relationtype"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"contentlocation"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"lasteventid"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"clone","reqwest","",71,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"clone","reqwest::header","",15,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"clone","reqwest::header::parsing","",0,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"clone","reqwest::header","",101,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"te"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"scheme","","",47,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"fmt_scheme","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"scheme","","",14,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"fmt_scheme","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","reqwest","",72,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"cmp","reqwest::header","",88,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"cmp","","",92,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"from_iter","","",87,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"languagetag"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"generics":["languagetag","error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","reqwest::mime","",104,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"result"}}],[11,"hash","","",104,null],[11,"hash","","",105,null],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"as_ref","","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"cmp","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"index","reqwest","",108,{"inputs":[{"name":"self"},{"generics":["position"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",108,{"inputs":[{"name":"self"},{"generics":["position"],"name":"range"}],"output":{"name":"str"}}],[11,"index","","",108,{"inputs":[{"name":"self"},{"generics":["position"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",108,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"from_str","","",108,{"inputs":[{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"hash","","",108,null],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"as_ref","","",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",73,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"cmp","","",108,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"description","","",73,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_socket_addrs","","",108,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt_line","reqwest::header","Format one 'line' of a header.",109,{"inputs":[{"name":"self"},{"name":"display"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates a new, empty headers map.",87,{"inputs":[],"output":{"name":"headers"}}],[11,"with_capacity","","Creates a new `Headers` struct with space reserved for `len` headers.",87,{"inputs":[{"name":"usize"}],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",87,null],[11,"get","","Get a reference to the header field's value, if it exists.",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns the header, if one has been removed and could be parsed.",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the header fields.",87,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",87,null],[11,"get_raw","","Access the raw value of a header.",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["raw"],"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",87,null],[11,"append_raw","","Append a value to raw value of this header.",87,null],[11,"remove_raw","","Remove a header by name.",87,null],[11,"is","","Check if a HeaderView is a certain Header.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"raw","","Access the raw value of the header.",95,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"text","","A constructor  to easily create a `Content-Type: text/plain` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"text_utf8","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"xml","","A constructor  to easily create a `Content-Type: text/xml` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"octet_stream","","A constructor  to easily create a `Content-Type: application/octet-stream` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",10,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",10,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",11,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",11,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"new","","Create a `Host` header, providing the hostname and optional port.",91,{"inputs":[{"name":"h"},{"name":"p"}],"output":{"name":"host"}}],[11,"hostname","","Get the hostname, such as example.domain.",91,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"port","","Get the optional port number.",91,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",15,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"new","","Creates a new $id",101,{"inputs":[{"name":"i"}],"output":{"name":"server"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",23,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",23,{"inputs":[],"output":{"name":"connection"}}],[11,"chunked","","Constructor for the most common Transfer-Encoding, `chunked`.",35,{"inputs":[],"output":{"name":"transferencoding"}}],[11,"new","","Creates a new Protocol with the given name and version",40,{"inputs":[{"name":"protocolname"},{"generics":["string"],"name":"option"}],"output":{"name":"protocol"}}],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",90,{"inputs":[{"generics":["linkvalue"],"name":"vec"}],"output":{"name":"link"}}],[11,"values","","Get the `Link` header's `LinkValue`s.",90,null],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",90,null],[11,"len","","Returns the amount of lines.",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"one","","Returns the line if there is only 1.",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Iterate the lines of raw bytes.",93,{"inputs":[{"name":"self"}],"output":{"name":"rawlines"}}],[11,"push","","Append a line to this `Raw` header value.",93,null],[11,"new","","Creates a new $id",97,{"inputs":[{"name":"i"}],"output":{"name":"location"}}],[11,"star","","A constructor to easily create `Accept: */*`.",45,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",45,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",45,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",45,{"inputs":[],"output":{"name":"accept"}}],[11,"new","","Creates a new $id",96,{"inputs":[{"name":"i"}],"output":{"name":"useragent"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",52,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",52,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"new","","Creates a new $id",100,{"inputs":[{"name":"i"}],"output":{"name":"referer"}}],[11,"new","","Creates a new `Origin` header.",89,{"inputs":[{"name":"s"},{"name":"h"},{"generics":["u16"],"name":"option"}],"output":{"name":"origin"}}],[11,"null","","Creates a `Null` `Origin` header.",89,{"inputs":[],"output":{"name":"origin"}}],[11,"is_null","","Checks if `Origin` is `Null`.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"scheme","","The scheme, such as http or https.",89,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","The host, such as `Host { hostname: \"hyper.rs\".to_owned(), port: None}`.",89,{"inputs":[{"name":"self"}],"output":{"generics":["host"],"name":"option"}}],[11,"new","","Create `LinkValue` from URI-Reference.",99,{"inputs":[{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"link","","Get the `LinkValue`'s value.",99,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",99,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title","","Get the `LinkValue`'s `title` parameter.",99,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",99,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",99,{"inputs":[{"name":"self"}],"output":{"generics":["mime"],"name":"option"}}],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",99,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",99,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",99,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",99,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"linkvalue"}}],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",99,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"linkvalue"}}],[11,"set_title","","Set `LinkValue`'s `title` parameter.",99,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",99,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",99,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"linkvalue"}}],[11,"to_satisfiable_range","","Given the full length of the entity, attempt to normalize the byte range into an satisfiable end-inclusive (from, to) range.",67,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"new","","Creates a new `Cookie` header.",98,{"inputs":[],"output":{"name":"cookie"}}],[11,"set","","Sets a name and value for the `Cookie`.",98,null],[11,"append","","Append a name and value for the `Cookie`.",98,null],[11,"get","","Get a value for the name, if it exists.",98,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[11,"iter","","Iterate cookies.",98,{"inputs":[{"name":"self"}],"output":{"name":"cookieiter"}}],[11,"as_str","reqwest::mime","Get the value of this `Name` as a string.",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"try_from","reqwest","Try to convert a `u16` into a `StatusCode`.",72,{"inputs":[{"name":"u16"}],"output":{"generics":["statuscode","invalidstatuscode"],"name":"result"}}],[11,"as_u16","","Get the `u16` code from this `StatusCode`.",72,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",72,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_informational","","Check if this `StatusCode` is within 100-199.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if this `StatusCode` is within 200-299.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if this `StatusCode` is within 300-399.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if this `StatusCode` is within 400-499.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if this `StatusCode` is within 500-599.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if this `StatusCode` is not within 100-599.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse","","Parse an absolute URL from a string.",108,{"inputs":[{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",108,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",108,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",108,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",108,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",108,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",108,{"inputs":[{"name":"self"}],"output":{"generics":["host"],"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",108,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",108,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",108,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["hostandport","error"],"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",108,{"inputs":[{"name":"self"}],"output":{"generics":["split"],"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",108,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",108,null],[11,"set_query","","Change this URL’s query string.",108,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",108,{"inputs":[{"name":"self"}],"output":{"generics":["urlquery"],"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",108,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",108,{"inputs":[{"name":"self"}],"output":{"generics":["pathsegmentsmut"],"name":"result"}}],[11,"set_port","","Change this URL’s port number.",108,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",108,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",108,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",108,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",108,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",108,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",108,{"inputs":[{"name":"p"}],"output":{"generics":["url"],"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",108,{"inputs":[{"name":"p"}],"output":{"generics":["url"],"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",108,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"new","reqwest::multipart","Creates a new Form without any content.",110,{"inputs":[],"output":{"name":"form"}}],[11,"boundary","","Get the boundary that this form will use.",110,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"text","","Add a data field with supplied name and value.",110,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"form"}}],[11,"file","","Adds a file field.",110,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"generics":["form"],"name":"result"}}],[11,"part","","Adds a customized Part.",110,{"inputs":[{"name":"self"},{"name":"t"},{"name":"part"}],"output":{"name":"form"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"text","","Makes a text parameter.",111,{"inputs":[{"name":"t"}],"output":{"name":"part"}}],[11,"reader","","Adds a generic reader.",111,{"inputs":[{"name":"t"}],"output":{"name":"part"}}],[11,"reader_with_length","","Adds a generic reader with known length.",111,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"part"}}],[11,"file","","Makes a file parameter.",111,{"inputs":[{"name":"t"}],"output":{"generics":["part"],"name":"result"}}],[11,"mime","","Sets the mime, builder style.",111,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"part"}}],[11,"file_name","","Sets the filename, builder style.",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"part"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ExtendedValue"],[8,"Header"],[3,"EntityTag"],[4,"MediaDesc"],[4,"ReferrerPolicy"],[3,"AcceptCharset"],[4,"IfNoneMatch"],[3,"AcceptLanguage"],[3,"Expires"],[3,"ContentType"],[3,"LanguageTag"],[3,"StrictTransportSecurity"],[3,"ContentLanguage"],[3,"AccessControlMaxAge"],[3,"Basic"],[3,"QualityItem"],[4,"RelationType"],[4,"IfRange"],[4,"RetryAfter"],[3,"Te"],[3,"ContentLocation"],[3,"AcceptEncoding"],[4,"Encoding"],[3,"Connection"],[3,"CacheControl"],[3,"LastEventId"],[4,"CacheDirective"],[4,"Expect"],[3,"From"],[4,"IfMatch"],[3,"AcceptRanges"],[3,"AccessControlExposeHeaders"],[4,"Vary"],[3,"ETag"],[3,"SetCookie"],[3,"TransferEncoding"],[8,"Scheme"],[3,"IfModifiedSince"],[3,"Upgrade"],[3,"AccessControlAllowHeaders"],[3,"Protocol"],[3,"Date"],[3,"ProxyAuthorization"],[3,"IfUnmodifiedSince"],[3,"ContentLength"],[3,"Accept"],[4,"Preference"],[3,"Bearer"],[4,"ContentRangeSpec"],[4,"ConnectionOption"],[4,"DispositionParam"],[4,"RangeUnit"],[4,"Range"],[3,"Prefer"],[3,"AccessControlRequestMethod"],[3,"Warning"],[3,"LastModified"],[3,"AccessControlAllowMethods"],[4,"ProtocolName"],[4,"AccessControlAllowOrigin"],[4,"Charset"],[3,"PreferenceApplied"],[4,"DispositionType"],[3,"ContentRange"],[3,"Allow"],[4,"Pragma"],[3,"AccessControlRequestHeaders"],[4,"ByteRangeSpec"],[3,"ContentDisposition"],[3,"Authorization"],[3,"ContentEncoding"],[4,"Method"],[4,"StatusCode"],[4,"UrlError"],[3,"Error"],[3,"Body"],[3,"Client"],[3,"ClientBuilder"],[3,"Proxy"],[3,"RedirectPolicy"],[3,"RedirectAttempt"],[3,"RedirectAction"],[3,"Request"],[3,"RequestBuilder"],[3,"Response"],[3,"Certificate"],[3,"Identity"],[3,"Headers"],[3,"Quality"],[3,"Origin"],[3,"Link"],[3,"Host"],[3,"HttpDate"],[3,"Raw"],[3,"AccessControlAllowCredentials"],[3,"HeaderView"],[3,"UserAgent"],[3,"Location"],[3,"Cookie"],[3,"LinkValue"],[3,"Referer"],[3,"Server"],[3,"HeadersItems"],[3,"CookieIter"],[3,"Mime"],[3,"Name"],[3,"Params"],[3,"FromStrError"],[3,"Url"],[3,"Formatter"],[3,"Form"],[3,"Part"]]};
searchIndex["safemem"] = {"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",null,null],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",null,null],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",null,null]],"paths":[]};
searchIndex["scoped_tls"] = {"doc":"Scoped thread-local storage","items":[[3,"ScopedKey","scoped_tls","Type representing a thread local storage key corresponding to a reference to the type parameter `T`.",null,null],[11,"set","","Inserts a value into this scoped thread local storage slot for a duration of a closure.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"scoped_thread_local","","",null,null]],"paths":[[3,"ScopedKey"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[4,"Always","","Always run on scope exit.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"generics":["always"],"name":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_run","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["security_framework"] = {"doc":"Wrappers around the OSX Security Framework.","items":[[0,"base","security_framework","Support types for other modules.",null,null],[3,"Error","security_framework::base","A Security Framework error.",null,null],[6,"Result","","A `Result` type commonly returned by functions.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_code","","Creates a new `Error` from a status code.",0,{"inputs":[{"name":"osstatus"}],"output":{"name":"error"}}],[11,"message","","Returns a string describing the current error, if available.",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"code","","Returns the code of the current error.",0,{"inputs":[{"name":"self"}],"output":{"name":"osstatus"}}],[11,"from","","",0,{"inputs":[{"name":"osstatus"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"certificate","security_framework","Certificate support.",null,null],[3,"SecCertificate","security_framework::certificate","A type representing a certificate.",null,null],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"seccertificate"}}],[11,"as_concrete_TypeRef","","",1,{"inputs":[{"name":"self"}],"output":{"name":"seccertificateref"}}],[11,"wrap_under_get_rule","","",1,{"inputs":[{"name":"seccertificateref"}],"output":{"name":"seccertificate"}}],[11,"as_CFTypeRef","","",1,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",1,{"inputs":[{"name":"seccertificateref"}],"output":{"name":"seccertificate"}}],[11,"type_id","","",1,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_der","","Creates a `SecCertificate` from DER encoded certificate data.",1,null],[11,"to_der","","Returns DER encoded data describing this certificate.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"subject_summary","","Returns a human readable summary of this certificate.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[0,"cipher_suite","security_framework","Cipher Suites supported by Secure Transport",null,null],[4,"CipherSuite","security_framework::cipher_suite","Specifies cipher suites",null,null],[13,"SSL_RSA_EXPORT_WITH_RC4_40_MD5","","",2,null],[13,"SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5","","",2,null],[13,"SSL_RSA_WITH_IDEA_CBC_SHA","","",2,null],[13,"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA","","",2,null],[13,"SSL_RSA_WITH_DES_CBC_SHA","","",2,null],[13,"SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA","","",2,null],[13,"SSL_DH_DSS_WITH_DES_CBC_SHA","","",2,null],[13,"SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA","","",2,null],[13,"SSL_DH_RSA_WITH_DES_CBC_SHA","","",2,null],[13,"SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA","","",2,null],[13,"SSL_DHE_DSS_WITH_DES_CBC_SHA","","",2,null],[13,"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA","","",2,null],[13,"SSL_DHE_RSA_WITH_DES_CBC_SHA","","",2,null],[13,"SSL_DH_anon_EXPORT_WITH_RC4_40_MD5","","",2,null],[13,"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA","","",2,null],[13,"SSL_DH_anon_WITH_DES_CBC_SHA","","",2,null],[13,"SSL_FORTEZZA_DMS_WITH_NULL_SHA","","",2,null],[13,"SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA","","",2,null],[13,"TLS_RSA_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_DH_DSS_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_DH_RSA_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_DHE_DSS_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_DHE_RSA_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_DH_anon_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_RSA_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_DH_DSS_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_DH_RSA_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_DHE_DSS_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_DHE_RSA_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_DH_anon_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_ECDH_ECDSA_WITH_NULL_SHA","","",2,null],[13,"TLS_ECDH_ECDSA_WITH_RC4_128_SHA","","",2,null],[13,"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_ECDHE_ECDSA_WITH_NULL_SHA","","",2,null],[13,"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA","","",2,null],[13,"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_ECDH_RSA_WITH_NULL_SHA","","",2,null],[13,"TLS_ECDH_RSA_WITH_RC4_128_SHA","","",2,null],[13,"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_ECDHE_RSA_WITH_NULL_SHA","","",2,null],[13,"TLS_ECDHE_RSA_WITH_RC4_128_SHA","","",2,null],[13,"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_ECDH_anon_WITH_NULL_SHA","","",2,null],[13,"TLS_ECDH_anon_WITH_RC4_128_SHA","","",2,null],[13,"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_ECDH_anon_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_ECDH_anon_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_NULL_WITH_NULL_NULL","","",2,null],[13,"TLS_RSA_WITH_NULL_MD5","","",2,null],[13,"TLS_RSA_WITH_NULL_SHA","","",2,null],[13,"TLS_RSA_WITH_RC4_128_MD5","","",2,null],[13,"TLS_RSA_WITH_RC4_128_SHA","","",2,null],[13,"TLS_RSA_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_RSA_WITH_NULL_SHA256","","",2,null],[13,"TLS_RSA_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_RSA_WITH_AES_256_CBC_SHA256","","",2,null],[13,"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_DH_DSS_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_DH_RSA_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_DH_DSS_WITH_AES_256_CBC_SHA256","","",2,null],[13,"TLS_DH_RSA_WITH_AES_256_CBC_SHA256","","",2,null],[13,"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256","","",2,null],[13,"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256","","",2,null],[13,"TLS_DH_anon_WITH_RC4_128_MD5","","",2,null],[13,"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_DH_anon_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_DH_anon_WITH_AES_256_CBC_SHA256","","",2,null],[13,"TLS_PSK_WITH_RC4_128_SHA","","",2,null],[13,"TLS_PSK_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_PSK_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_PSK_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_DHE_PSK_WITH_RC4_128_SHA","","",2,null],[13,"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_DHE_PSK_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_DHE_PSK_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_RSA_PSK_WITH_RC4_128_SHA","","",2,null],[13,"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA","","",2,null],[13,"TLS_RSA_PSK_WITH_AES_128_CBC_SHA","","",2,null],[13,"TLS_RSA_PSK_WITH_AES_256_CBC_SHA","","",2,null],[13,"TLS_PSK_WITH_NULL_SHA","","",2,null],[13,"TLS_DHE_PSK_WITH_NULL_SHA","","",2,null],[13,"TLS_RSA_PSK_WITH_NULL_SHA","","",2,null],[13,"TLS_RSA_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_RSA_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_DH_RSA_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_DH_RSA_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_DH_DSS_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_DH_DSS_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_DH_anon_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_DH_anon_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_PSK_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_PSK_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_DHE_PSK_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_DHE_PSK_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_PSK_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_PSK_WITH_AES_256_CBC_SHA384","","",2,null],[13,"TLS_PSK_WITH_NULL_SHA256","","",2,null],[13,"TLS_PSK_WITH_NULL_SHA384","","",2,null],[13,"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384","","",2,null],[13,"TLS_DHE_PSK_WITH_NULL_SHA256","","",2,null],[13,"TLS_DHE_PSK_WITH_NULL_SHA384","","",2,null],[13,"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384","","",2,null],[13,"TLS_RSA_PSK_WITH_NULL_SHA256","","",2,null],[13,"TLS_RSA_PSK_WITH_NULL_SHA384","","",2,null],[13,"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384","","",2,null],[13,"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384","","",2,null],[13,"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384","","",2,null],[13,"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256","","",2,null],[13,"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384","","",2,null],[13,"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256","","",2,null],[13,"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384","","",2,null],[13,"TLS_EMPTY_RENEGOTIATION_INFO_SCSV","","",2,null],[13,"SSL_RSA_WITH_RC2_CBC_MD5","","",2,null],[13,"SSL_RSA_WITH_IDEA_CBC_MD5","","",2,null],[13,"SSL_RSA_WITH_DES_CBC_MD5","","",2,null],[13,"SSL_RSA_WITH_3DES_EDE_CBC_MD5","","",2,null],[13,"SSL_NO_SUCH_CIPHERSUITE","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ciphersuite"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ciphersuite"}],"output":{"name":"bool"}}],[0,"identity","security_framework","Identity support.",null,null],[3,"SecIdentity","security_framework::identity","A type representing an identity.",null,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"secidentity"}}],[11,"as_concrete_TypeRef","","",3,{"inputs":[{"name":"self"}],"output":{"name":"secidentityref"}}],[11,"wrap_under_get_rule","","",3,{"inputs":[{"name":"secidentityref"}],"output":{"name":"secidentity"}}],[11,"as_CFTypeRef","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",3,{"inputs":[{"name":"secidentityref"}],"output":{"name":"secidentity"}}],[11,"type_id","","",3,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"certificate","","Returns the certificate corresponding to this identity.",3,{"inputs":[{"name":"self"}],"output":{"generics":["seccertificate"],"name":"result"}}],[11,"private_key","","Returns the private key corresponding to this identity.",3,{"inputs":[{"name":"self"}],"output":{"generics":["seckey"],"name":"result"}}],[0,"import_export","security_framework","Security Framework type import/export support.",null,null],[3,"ImportedIdentity","security_framework::import_export","Information about an imported identity.",null,null],[12,"label","","The label of the identity.",4,null],[12,"key_id","","The ID of the identity. Typically the SHA-1 hash of the public key.",4,null],[12,"trust","","A `SecTrust` object set up to validate this identity.",4,null],[12,"cert_chain","","A certificate chain validating this identity.",4,null],[12,"identity","","The identity itself.",4,null],[3,"ImportedIdentityOptions","","Information about an imported identity.",null,null],[12,"label","","The label of the identity.",5,null],[12,"key_id","","The ID of the identity. Typically the SHA-1 hash of the public key.",5,null],[12,"trust","","A `SecTrust` object set up to validate this identity.",5,null],[12,"cert_chain","","A certificate chain validating this identity.",5,null],[12,"identity","","The identity itself.",5,null],[3,"Pkcs12ImportOptions","","A builder type to import an identity from PKCS#12 formatted data.",null,null],[11,"default","","",6,{"inputs":[],"output":{"name":"pkcs12importoptions"}}],[11,"new","","Creates a new builder with default options.",6,{"inputs":[],"output":{"name":"pkcs12importoptions"}}],[11,"passphrase","","Specifies the passphrase to be used to decrypt the data.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"keychain","","Deprecated",6,{"inputs":[{"name":"self"},{"name":"seckeychain"}],"output":{"name":"self"}}],[11,"access","","Deprecated",6,{"inputs":[{"name":"self"},{"name":"secaccess"}],"output":{"name":"self"}}],[11,"import","","Imports identities from PKCS#12 encoded data.",6,null],[11,"import_optional","","Imports identities from PKCS#12 encoded data allowing missing items",6,null],[0,"item","security_framework","Support to search for items in a keychain.",null,null],[3,"ItemSearchOptions","security_framework::item","A builder type to search for items in keychains.",null,null],[3,"SearchResult","","An individual search result.",null,null],[12,"reference","","A reference to the Security Framework object, if asked for.",7,null],[4,"ItemClass","","Specifies the type of items to search for.",null,null],[13,"GenericPassword","","Look for `SecKeychainItem`s corresponding to generic passwords.",8,null],[13,"InternetPassword","","Look for `SecKeychainItem`s corresponding to internet passwords.",8,null],[13,"Certificate","","Look for `SecCertificate`s.",8,null],[13,"Key","","Look for `SecKey`s.",8,null],[13,"Identity","","Look for `SecIdentity`s.",8,null],[4,"Reference","","An enum including all objects which can be found by `ItemSearchOptions`.",null,null],[13,"Identity","","A `SecIdentity`.",9,null],[13,"Certificate","","A `SecCertificate`.",9,null],[13,"Key","","A `SecKey`.",9,null],[13,"KeychainItem","","A `SecKeychainItem`.",9,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"itemclass"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"itemsearchoptions"}}],[11,"new","","Creates a new builder with default options.",10,{"inputs":[],"output":{"name":"itemsearchoptions"}}],[11,"class","","Search only for items of the specified class.",10,{"inputs":[{"name":"self"},{"name":"itemclass"}],"output":{"name":"itemsearchoptions"}}],[11,"keychains","","Deprecated.",10,null],[11,"load_refs","","Load Security Framework objects (`SecCertificate`, `SecKey`, etc) for the results.",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"itemsearchoptions"}}],[11,"limit","","Limit the number of search results.",10,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"itemsearchoptions"}}],[11,"label","","Search for an item with the given label.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"itemsearchoptions"}}],[11,"search","","Search for objects.",10,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"key","security_framework","Encryption key support",null,null],[3,"SecKey","security_framework::key","A type representing an encryption key.",null,null],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"seckey"}}],[11,"as_concrete_TypeRef","","",11,{"inputs":[{"name":"self"}],"output":{"name":"seckeyref"}}],[11,"wrap_under_get_rule","","",11,{"inputs":[{"name":"seckeyref"}],"output":{"name":"seckey"}}],[11,"as_CFTypeRef","","",11,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",11,{"inputs":[{"name":"seckeyref"}],"output":{"name":"seckey"}}],[11,"type_id","","",11,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"os","security_framework","OS specific extensions.",null,null],[0,"macos","security_framework::os","OSX specific extensions.",null,null],[0,"identity","security_framework::os::macos","OSX specific extensions to identity functionality.",null,null],[8,"SecIdentityExt","security_framework::os::macos::identity","An extension trait adding OSX specific functionality to `SecIdentity`.",null,null],[10,"with_certificate","","Creates an identity corresponding to a certificate, looking in the provided keychains for the corresponding private key.",12,null],[11,"with_certificate","security_framework::identity","",3,null],[0,"access","security_framework::os::macos","Access control functionality.",null,null],[3,"SecAccess","security_framework::os::macos::access","A type representing access control settings.",null,null],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"secaccess"}}],[11,"as_concrete_TypeRef","","",13,{"inputs":[{"name":"self"}],"output":{"name":"secaccessref"}}],[11,"wrap_under_get_rule","","",13,{"inputs":[{"name":"secaccessref"}],"output":{"name":"secaccess"}}],[11,"as_CFTypeRef","","",13,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",13,{"inputs":[{"name":"secaccessref"}],"output":{"name":"secaccess"}}],[11,"type_id","","",13,{"inputs":[],"output":{"name":"cftypeid"}}],[0,"certificate","security_framework::os::macos","OSX specific extensions to certificate functionality.",null,null],[8,"SecCertificateExt","security_framework::os::macos::certificate","An extension trait adding OSX specific functionality to `SecCertificate`.",null,null],[10,"common_name","","Returns the common name associated with the certificate.",14,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[10,"public_key","","Returns the public key associated with the certificate.",14,{"inputs":[{"name":"self"}],"output":{"generics":["seckey"],"name":"result"}}],[11,"common_name","security_framework::certificate","",1,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"public_key","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["seckey"],"name":"result"}}],[0,"digest_transform","security_framework::os::macos","Digest Transform support",null,null],[3,"Builder","security_framework::os::macos::digest_transform","A builder for digest transform operations.",null,null],[4,"DigestType","","A type of digest.",null,null],[13,"HmacMd5","","",15,null],[13,"HmacSha1","","",15,null],[13,"HmacSha2","","",15,null],[13,"Md2","","",15,null],[13,"Md4","","",15,null],[13,"Md5","","",15,null],[13,"Sha1","","",15,null],[13,"Sha2","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"digesttype"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","Returns a new builder with default settings.",16,{"inputs":[],"output":{"name":"builder"}}],[11,"type_","","Sets the type of digest to perform.",16,{"inputs":[{"name":"self"},{"name":"digesttype"}],"output":{"name":"builder"}}],[11,"length","","Sets the output length of the digest.",16,{"inputs":[{"name":"self"},{"name":"cfindex"}],"output":{"name":"builder"}}],[11,"hmac_key","","Sets the key used for HMAC digests.",16,{"inputs":[{"name":"self"},{"name":"cfdata"}],"output":{"name":"builder"}}],[11,"execute","","Computes the digest of the data.",16,{"inputs":[{"name":"self"},{"name":"cfdata"}],"output":{"generics":["cfdata","cferror"],"name":"result"}}],[0,"encrypt_transform","security_framework::os::macos","Encryption and Decryption transform support.",null,null],[3,"Builder","security_framework::os::macos::encrypt_transform","A builder for encryption and decryption transform operations.",null,null],[4,"Padding","","The padding scheme to use for encryption.",null,null],[13,"None","","Do not pad.",17,null],[13,"Pkcs1","","Use PKCS#1 padding.",17,null],[13,"Pkcs5","","Use PKCS#5 padding.",17,null],[13,"Pkcs7","","Use PKCS#7 padding.",17,null],[13,"Oaep","","Use OAEP padding.",17,null],[4,"Mode","","The cipher mode to use.",null,null],[13,"None","","",18,null],[13,"Ecb","","",18,null],[13,"Cbc","","",18,null],[13,"Cfb","","",18,null],[13,"Ofb","","",18,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","Creates a new `Builder` with a default configuration.",19,{"inputs":[],"output":{"name":"builder"}}],[11,"padding","","Selects the padding scheme to use.",19,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"builder"}}],[11,"mode","","Selects the encryption mode to use.",19,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"builder"}}],[11,"iv","","Sets the initialization vector to use.",19,{"inputs":[{"name":"self"},{"name":"cfdata"}],"output":{"name":"builder"}}],[11,"encrypt","","Encrypts data with a provided key.",19,{"inputs":[{"name":"self"},{"name":"seckey"},{"name":"cfdata"}],"output":{"generics":["cfdata","cferror"],"name":"result"}}],[11,"decrypt","","Decrypts data with a provided key.",19,{"inputs":[{"name":"self"},{"name":"seckey"},{"name":"cfdata"}],"output":{"generics":["cfdata","cferror"],"name":"result"}}],[0,"import_export","security_framework::os::macos","OSX specific extensions to import/export functionality.",null,null],[3,"ImportOptions","security_framework::os::macos::import_export","A builder type to import Security Framework types from serialized formats.",null,null],[3,"SecItems","","A type which holds items imported from serialized data.",null,null],[12,"certificates","","Imported certificates.",20,null],[12,"identities","","Imported identities.",20,null],[12,"keys","","Imported keys.",20,null],[8,"Pkcs12ImportOptionsExt","","An extension trait adding OSX specific functionality to `Pkcs12ImportOptions`.",null,null],[10,"keychain","","Specifies the keychain in which to import the identity.",21,{"inputs":[{"name":"self"},{"name":"seckeychain"}],"output":{"name":"self"}}],[10,"access","","Specifies the access control to be associated with the identity.",21,{"inputs":[{"name":"self"},{"name":"secaccess"}],"output":{"name":"self"}}],[11,"keychain","security_framework::import_export","",6,{"inputs":[{"name":"self"},{"name":"seckeychain"}],"output":{"name":"self"}}],[11,"access","","",6,{"inputs":[{"name":"self"},{"name":"secaccess"}],"output":{"name":"self"}}],[11,"default","security_framework::os::macos::import_export","",22,{"inputs":[],"output":{"name":"importoptions"}}],[11,"new","","Creates a new builder with default options.",22,{"inputs":[],"output":{"name":"importoptions"}}],[11,"filename","","Sets the filename from which the imported data came.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"importoptions"}}],[11,"passphrase","","Sets the passphrase to be used to decrypt the imported data.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"importoptions"}}],[11,"passphrase_bytes","","Sets the passphrase to be used to decrypt the imported data.",22,null],[11,"secure_passphrase","","If set, the user will be prompted to imput the passphrase used to decrypt the imported data.",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"importoptions"}}],[11,"no_access_control","","If set, imported items will have no access controls imposed on them.",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"importoptions"}}],[11,"alert_title","","Sets the title of the alert popup used with the `secure_passphrase` option.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"importoptions"}}],[11,"alert_prompt","","Sets the prompt of the alert popup used with the `secure_passphrase` option.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"importoptions"}}],[11,"items","","Sets the object into which imported items will be placed.",22,{"inputs":[{"name":"self"},{"name":"secitems"}],"output":{"name":"importoptions"}}],[11,"keychain","","Sets the keychain into which items will be imported.",22,{"inputs":[{"name":"self"},{"name":"seckeychain"}],"output":{"name":"importoptions"}}],[11,"import","","Imports items from serialized data.",22,null],[11,"default","","",20,{"inputs":[],"output":{"name":"secitems"}}],[0,"item","security_framework::os::macos","OSX specific functionality for items.",null,null],[4,"KeyType","security_framework::os::macos::item","Types of `SecKey`s.",null,null],[13,"Rsa","","",23,null],[13,"Dsa","","",23,null],[13,"Aes","","",23,null],[13,"Des","","",23,null],[13,"TripleDes","","",23,null],[13,"Rc4","","",23,null],[13,"Cast","","",23,null],[8,"ItemSearchOptionsExt","","An extension trait adding OSX specific functionality to `ItemSearchOptions`.",null,null],[10,"keychains","","Search within the specified keychains.",24,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"keytype"}}],[11,"keychains","security_framework::item","",10,null],[0,"key","security_framework::os::macos","OSX specific functionality for keys.",null,null],[8,"SecKeyExt","security_framework::os::macos::key","An extension trait adding OSX specific functionality to `SecKey`.",null,null],[10,"from_data","","Creates a new `SecKey` from a buffer containing key data.",25,{"inputs":[{"name":"keytype"},{"name":"cfdata"}],"output":{"generics":["seckey","cferror"],"name":"result"}}],[11,"from_data","security_framework::key","",11,{"inputs":[{"name":"keytype"},{"name":"cfdata"}],"output":{"generics":["seckey","cferror"],"name":"result"}}],[0,"keychain","security_framework::os::macos","Keychain support.",null,null],[3,"SecKeychain","security_framework::os::macos::keychain","A type representing a keychain.",null,null],[3,"CreateOptions","","A builder type to create new keychains.",null,null],[3,"KeychainSettings","","Settings associated with a `SecKeychain`.",null,null],[8,"SecKeychainExt","","Deprecated.",null,null],[10,"default","","Deprecated.",26,{"inputs":[],"output":{"generics":["seckeychain"],"name":"result"}}],[10,"open","","Deprecated.",26,{"inputs":[{"name":"p"}],"output":{"generics":["seckeychain"],"name":"result"}}],[10,"unlock","","Deprecated.",26,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"seckeychain"}}],[11,"as_concrete_TypeRef","","",27,{"inputs":[{"name":"self"}],"output":{"name":"seckeychainref"}}],[11,"wrap_under_get_rule","","",27,{"inputs":[{"name":"seckeychainref"}],"output":{"name":"seckeychain"}}],[11,"as_CFTypeRef","","",27,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",27,{"inputs":[{"name":"seckeychainref"}],"output":{"name":"seckeychain"}}],[11,"type_id","","",27,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"default","","",27,{"inputs":[],"output":{"generics":["seckeychain"],"name":"result"}}],[11,"open","","",27,{"inputs":[{"name":"p"}],"output":{"generics":["seckeychain"],"name":"result"}}],[11,"unlock","","",27,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"default","","Creates a `SecKeychain` object corresponding to the user's default keychain.",27,{"inputs":[],"output":{"generics":["seckeychain"],"name":"result"}}],[11,"open","","Opens a keychain from a file.",27,{"inputs":[{"name":"p"}],"output":{"generics":["seckeychain"],"name":"result"}}],[11,"unlock","","Unlocks the keychain.",27,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"set_settings","","Sets settings of the keychain.",27,{"inputs":[{"name":"self"},{"name":"keychainsettings"}],"output":{"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"createoptions"}}],[11,"new","","Creates a new builder with default options.",28,{"inputs":[],"output":{"name":"createoptions"}}],[11,"password","","Sets the password to be used to protect the keychain.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"createoptions"}}],[11,"prompt_user","","If set, the user will be prompted to provide a password used to protect the keychain.",28,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"createoptions"}}],[11,"access","","Sets the access control applied to the keychain.",28,{"inputs":[{"name":"self"},{"name":"secaccess"}],"output":{"name":"createoptions"}}],[11,"create","","Creates a new keychain at the specified location on the filesystem.",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["seckeychain"],"name":"result"}}],[11,"new","","Creates a new `KeychainSettings` with default settings.",29,{"inputs":[],"output":{"name":"keychainsettings"}}],[11,"set_lock_on_sleep","","If set, the keychain will automatically lock when the computer sleeps.",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_lock_interval","","Sets the interval of time in seconds after which the keychain is automatically locked.",29,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":null}],[0,"keychain_item","security_framework::os::macos","Keychain item support.",null,null],[3,"SecKeychainItem","security_framework::os::macos::keychain_item","A type representing a keychain item.",null,null],[11,"drop","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"seckeychainitem"}}],[11,"as_concrete_TypeRef","","",30,{"inputs":[{"name":"self"}],"output":{"name":"seckeychainitemref"}}],[11,"wrap_under_get_rule","","",30,{"inputs":[{"name":"seckeychainitemref"}],"output":{"name":"seckeychainitem"}}],[11,"as_CFTypeRef","","",30,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",30,{"inputs":[{"name":"seckeychainitemref"}],"output":{"name":"seckeychainitem"}}],[11,"type_id","","",30,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"secure_transport","security_framework::os::macos","OSX specific extensions to Secure Transport functionality.",null,null],[8,"SslContextExt","security_framework::os::macos::secure_transport","An extension trait adding OSX specific functionality to the `SslContext` type.",null,null],[10,"diffie_hellman_params","","Returns the DER encoded data specifying the parameters used for Diffie-Hellman key exchange.",31,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_diffie_hellman_params","","Sets the parameters used for Diffie-Hellman key exchange, in the DER format used by OpenSSL.",31,null],[10,"certificate_authorities","","Returns the certificate authorities used to validate client certificates.",31,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_certificate_authorities","","Sets the certificate authorities used to validate client certificates, replacing any that are already present.",31,null],[10,"add_certificate_authorities","","Adds certificate authorities used to validate client certificates.",31,null],[8,"MidHandshakeSslStreamExt","","An extension trait adding OSX specific functionality to the `MidHandshakeSslStream` type.",null,null],[0,"transform","security_framework::os::macos","Transform support",null,null],[3,"SecTransform","security_framework::os::macos::transform","A type representing a transform.",null,null],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sectransform"}}],[11,"as_concrete_TypeRef","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sectransformref"}}],[11,"wrap_under_get_rule","","",32,{"inputs":[{"name":"sectransformref"}],"output":{"name":"sectransform"}}],[11,"as_CFTypeRef","","",32,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",32,{"inputs":[{"name":"sectransformref"}],"output":{"name":"sectransform"}}],[11,"type_id","","",32,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"set_attribute","","Sets an attribute of the transform.",32,{"inputs":[{"name":"self"},{"name":"cfstring"},{"name":"t"}],"output":{"generics":["cferror"],"name":"result"}}],[11,"execute","","Executes the transform.",32,{"inputs":[{"name":"self"}],"output":{"generics":["cftype","cferror"],"name":"result"}}],[0,"policy","security_framework","Security Policies support.",null,null],[3,"SecPolicy","security_framework::policy","A type representing a certificate validation policy.",null,null],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"secpolicy"}}],[11,"as_concrete_TypeRef","","",33,{"inputs":[{"name":"self"}],"output":{"name":"secpolicyref"}}],[11,"wrap_under_get_rule","","",33,{"inputs":[{"name":"secpolicyref"}],"output":{"name":"secpolicy"}}],[11,"as_CFTypeRef","","",33,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",33,{"inputs":[{"name":"secpolicyref"}],"output":{"name":"secpolicy"}}],[11,"type_id","","",33,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"for_ssl","","Deprecated",33,{"inputs":[{"name":"protocolside"},{"name":"str"}],"output":{"generics":["secpolicy"],"name":"result"}}],[11,"create_ssl","","Creates a `SecPolicy` for evaluating SSL certificate chains.",33,{"inputs":[{"name":"protocolside"},{"generics":["str"],"name":"option"}],"output":{"name":"secpolicy"}}],[0,"random","security_framework","Randomness support.",null,null],[3,"SecRandom","security_framework::random","A source of random data.",null,null],[11,"default","","",34,{"inputs":[],"output":{"name":"secrandom"}}],[11,"copy_bytes","","Fills the buffer with cryptographically secure random bytes.",34,null],[0,"secure_transport","security_framework","SSL/TLS encryption support using Secure Transport.",null,null],[3,"MidHandshakeSslStream","security_framework::secure_transport","An SSL stream midway through the handshake process.",null,null],[3,"MidHandshakeClientBuilder","","An SSL stream midway through the handshake process.",null,null],[3,"SslContext","","A Secure Transport SSL/TLS context object.",null,null],[3,"SslStream","","A type implementing SSL/TLS encryption over an underlying stream.",null,null],[3,"ClientBuilder","","A builder type to simplify the creation of client side `SslStream`s.",null,null],[3,"ServerBuilder","","A builder type to simplify the creation of server-side `SslStream`s.",null,null],[4,"ProtocolSide","","Specifies a side of a TLS session.",null,null],[13,"Server","","The server side of the session.",35,null],[13,"Client","","The client side of the session.",35,null],[4,"ConnectionType","","Specifies the type of TLS session.",null,null],[13,"Stream","","A traditional TLS stream.",36,null],[13,"Datagram","","A DTLS session.",36,null],[4,"HandshakeError","","An error or intermediate state after a TLS handshake attempt.",null,null],[13,"Failure","","The handshake failed.",37,null],[13,"Interrupted","","The handshake was interrupted midway through.",37,null],[4,"ClientHandshakeError","","An error or intermediate state after a TLS handshake attempt.",null,null],[13,"Failure","","The handshake failed.",38,null],[13,"Interrupted","","The handshake was interrupted midway through.",38,null],[4,"SessionState","","Specifies the state of a TLS session.",null,null],[13,"Idle","","The session has not yet started.",39,null],[13,"Handshake","","The session is in the handshake process.",39,null],[13,"Connected","","The session is connected.",39,null],[13,"Closed","","The session has been terminated.",39,null],[13,"Aborted","","The session has been aborted due to an error.",39,null],[4,"SslAuthenticate","","Specifies a server's requirement for client certificates.",null,null],[13,"Never","","Do not request a client certificate.",40,null],[13,"Always","","Require a client certificate.",40,null],[13,"Try","","Request but do not require a client certificate.",40,null],[4,"SslClientCertificateState","","Specifies the state of client certificate processing.",null,null],[13,"None","","A client certificate has not been requested or sent.",41,null],[13,"Requested","","A client certificate has been requested but not recieved.",41,null],[13,"Sent","","A client certificate has been received and successfully validated.",41,null],[13,"Rejected","","A client certificate has been received but has failed to validate.",41,null],[4,"SslProtocol","","Specifies protocol versions.",null,null],[13,"Unknown","","No protocol has been or should be negotiated or specified; use the default.",42,null],[13,"Ssl3","","The SSL 3.0 protocol is preferred, though SSL 2.0 may be used if the peer does not support SSL 3.0.",42,null],[13,"Tls1","","The TLS 1.0 protocol is preferred, though lower versions may be used if the peer does not support TLS 1.0.",42,null],[13,"Tls11","","The TLS 1.1 protocol is preferred, though lower versions may be used if the peer does not support TLS 1.1.",42,null],[13,"Tls12","","The TLS 1.2 protocol is preferred, though lower versions may be used if the peer does not support TLS 1.2.",42,null],[13,"Ssl2","","Only the SSL 2.0 protocol is accepted.",42,null],[13,"Dtls1","","The DTLSv1 protocol is preferred.",42,null],[13,"Ssl3Only","","Only the SSL 3.0 protocol is accepted.",42,null],[13,"Tls1Only","","Only the TLS 1.0 protocol is accepted.",42,null],[13,"All","","All supported TLS/SSL versions are accepted.",42,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"protocolside"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"connectiontype"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",37,{"inputs":[{"name":"error"}],"output":{"name":"handshakeerror"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",38,{"inputs":[{"name":"error"}],"output":{"name":"clienthandshakeerror"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",43,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",43,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"context","","Returns a shared reference to the `SslContext` of the stream.",43,{"inputs":[{"name":"self"}],"output":{"name":"sslcontext"}}],[11,"context_mut","","Returns a mutable reference to the `SslContext` of the stream.",43,{"inputs":[{"name":"self"}],"output":{"name":"sslcontext"}}],[11,"server_auth_completed","","Returns `true` iff `break_on_server_auth` was set and the handshake has progressed to that point.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"client_cert_requested","","Returns `true` iff `break_on_cert_requested` was set and the handshake has progressed to that point.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"would_block","","Returns `true` iff the underlying stream returned an error with the `WouldBlock` kind.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reason","","Deprecated",43,{"inputs":[{"name":"self"}],"output":{"name":"osstatus"}}],[11,"error","","Returns the error which caused the handshake interruption.",43,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"handshake","","Restarts the handshake process.",43,{"inputs":[{"name":"self"}],"output":{"generics":["sslstream","handshakeerror"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",44,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",44,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"error","","Returns the error which caused the handshake interruption.",44,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"handshake","","Restarts the handshake process.",44,{"inputs":[{"name":"self"}],"output":{"generics":["sslstream","clienthandshakeerror"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"sslauthenticate"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"sslprotocol"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"sslprotocol"}],"output":{"name":"bool"}}],[11,"drop","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"as_concrete_TypeRef","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"wrap_under_get_rule","","",45,{"inputs":[{"name":"sslcontextref"}],"output":{"name":"sslcontext"}}],[11,"as_CFTypeRef","","",45,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",45,{"inputs":[{"name":"sslcontextref"}],"output":{"name":"sslcontext"}}],[11,"type_id","","",45,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `SslContext` for the specified side and type of SSL connection.",45,{"inputs":[{"name":"protocolside"},{"name":"connectiontype"}],"output":{"generics":["sslcontext"],"name":"result"}}],[11,"set_peer_domain_name","","Sets the fully qualified domain name of the peer.",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"peer_domain_name","","Returns the peer domain name set by `set_peer_domain_name`.",45,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"set_certificate","","Sets the certificate to be used by this side of the SSL session.",45,null],[11,"set_peer_id","","Sets the peer ID of this session.",45,null],[11,"peer_id","","Returns the peer ID of this session.",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"supported_ciphers","","Returns the list of ciphers that are supported by Secure Transport.",45,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"enabled_ciphers","","Returns the list of ciphers that are eligible to be used for negotiation.",45,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"set_enabled_ciphers","","Sets the list of ciphers that are eligible to be used for negotiation.",45,null],[11,"negotiated_cipher","","Returns the cipher being used by the session.",45,{"inputs":[{"name":"self"}],"output":{"generics":["ciphersuite"],"name":"result"}}],[11,"set_client_side_authenticate","","Sets the requirements for client certificates.",45,{"inputs":[{"name":"self"},{"name":"sslauthenticate"}],"output":{"name":"result"}}],[11,"client_certificate_state","","Returns the state of client certificate processing.",45,{"inputs":[{"name":"self"}],"output":{"generics":["sslclientcertificatestate"],"name":"result"}}],[11,"peer_trust","","Returns the `SecTrust` object corresponding to the peer.",45,{"inputs":[{"name":"self"}],"output":{"generics":["sectrust"],"name":"result"}}],[11,"state","","Returns the state of the session.",45,{"inputs":[{"name":"self"}],"output":{"generics":["sessionstate"],"name":"result"}}],[11,"negotiated_protocol_version","","Returns the protocol version being used by the session.",45,{"inputs":[{"name":"self"}],"output":{"generics":["sslprotocol"],"name":"result"}}],[11,"protocol_version_max","","Returns the maximum protocol version allowed by the session.",45,{"inputs":[{"name":"self"}],"output":{"generics":["sslprotocol"],"name":"result"}}],[11,"set_protocol_version_max","","Sets the maximum protocol version allowed by the session.",45,{"inputs":[{"name":"self"},{"name":"sslprotocol"}],"output":{"name":"result"}}],[11,"protocol_version_min","","Returns the minimum protocol version allowed by the session.",45,{"inputs":[{"name":"self"}],"output":{"generics":["sslprotocol"],"name":"result"}}],[11,"set_protocol_version_min","","Sets the minimum protocol version allowed by the session.",45,{"inputs":[{"name":"self"},{"name":"sslprotocol"}],"output":{"name":"result"}}],[11,"set_protocol_version_enabled","","Sets whether a protocol is enabled or not.",45,{"inputs":[{"name":"self"},{"name":"sslprotocol"},{"name":"bool"}],"output":{"name":"result"}}],[11,"buffered_read_size","","Returns the number of bytes which can be read without triggering a `read` call in the underlying stream.",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_break_on_server_auth","","If enabled, the handshake process will pause and return instead of automatically validating a server's certificate.",45,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"break_on_server_auth","","If enabled, the handshake process will pause and return instead of automatically validating a server's certificate.",45,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_break_on_cert_requested","","If enabled, the handshake process will pause and return after the server requests a certificate from the client.",45,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"break_on_cert_requested","","If enabled, the handshake process will pause and return after the server requests a certificate from the client.",45,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_break_on_client_auth","","If enabled, the handshake process will pause and return instead of automatically validating a client's certificate.",45,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"break_on_client_auth","","If enabled, the handshake process will pause and return instead of automatically validating a client's certificate.",45,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"handshake","","Performs the SSL/TLS handshake.",45,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["sslstream","handshakeerror"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","Returns a shared reference to the inner stream.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"context","","Returns a shared reference to the `SslContext` of the stream.",46,{"inputs":[{"name":"self"}],"output":{"name":"sslcontext"}}],[11,"context_mut","","Returns a mutable reference to the `SslContext` of the stream.",46,{"inputs":[{"name":"self"}],"output":{"name":"sslcontext"}}],[11,"close","","Shuts down the connection.",46,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",46,null],[11,"write","","",46,null],[11,"flush","","",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"clientbuilder"}}],[11,"new","","Creates a new builder with default options.",47,{"inputs":[],"output":{"name":"self"}}],[11,"anchor_certificates","","Specifies the set of root certificates to trust when verifying the server's certificate.",47,null],[11,"trust_anchor_certificates_only","","Specifies whether to trust the built-in certificates in addition to specified anchor certificates.",47,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"whitelist_ciphers","","Set a whitelist of enabled ciphers. Any ciphers not whitelisted will be disabled.",47,null],[11,"blacklist_ciphers","","Set a blacklist of disabled ciphers. Blacklisted ciphers will be disabled.",47,null],[11,"identity","","Use the specified identity as a SSL/TLS client certificate.",47,null],[11,"protocol_min","","Configure the minimum protocol that this client will support.",47,{"inputs":[{"name":"self"},{"name":"sslprotocol"}],"output":{"name":"self"}}],[11,"protocol_max","","Configure the minimum protocol that this client will support.",47,{"inputs":[{"name":"self"},{"name":"sslprotocol"}],"output":{"name":"self"}}],[11,"handshake","","Initiates a new SSL/TLS session over a stream connected to the specified domain.",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"generics":["sslstream"],"name":"result"}}],[11,"handshake2","","Initiates a new SSL/TLS session over a stream connected to the specified domain.",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"generics":["sslstream","clienthandshakeerror"],"name":"result"}}],[11,"danger_handshake_without_providing_domain_for_certificate_validation_and_server_name_indication","","Initiates a new SSL/TLS session over a stream without providing a domain.",47,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["sslstream","clienthandshakeerror"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `ServerBuilder` which will use the specified identity and certificate chain for handshakes.",48,null],[11,"handshake","","Initiates a new SSL/TLS session over a stream.",48,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["sslstream"],"name":"result"}}],[0,"trust","security_framework","Trust evaluation support.",null,null],[3,"SecTrust","security_framework::trust","A type representing a trust evaluation for a certificate.",null,null],[4,"TrustResult","","The result of trust evaluation.",null,null],[13,"Invalid","","An invalid setting or result.",49,null],[13,"Proceed","","You may proceed.",49,null],[13,"Deny","","Indicates a denial by the user, do not proceed.",49,null],[13,"Unspecified","","The certificate is implicitly trusted.",49,null],[13,"RecoverableTrustFailure","","Indicates a trust policy failure that the user can override.",49,null],[13,"FatalTrustFailure","","Indicates a trust policy failure that the user cannot override.",49,null],[13,"OtherError","","An error not related to trust validation.",49,null],[11,"success","","Returns true if the result is \"successful\" - specifically `Proceed` or `Unspecified`.",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sectrust"}}],[11,"as_concrete_TypeRef","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sectrustref"}}],[11,"wrap_under_get_rule","","",50,{"inputs":[{"name":"sectrustref"}],"output":{"name":"sectrust"}}],[11,"as_CFTypeRef","","",50,{"inputs":[{"name":"self"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",50,{"inputs":[{"name":"sectrustref"}],"output":{"name":"sectrust"}}],[11,"type_id","","",50,{"inputs":[],"output":{"name":"cftypeid"}}],[11,"create_with_certificates","","Creates a SecTrustRef that is configured with a certificate chain, for validating that chain against a collection of policies.",50,null],[11,"set_anchor_certificates","","Sets additional anchor certificates used to validate trust.",50,null],[11,"set_trust_anchor_certificates_only","","If set to `true`, only the certificates specified by `set_anchor_certificates` will be trusted, but not globally trusted certificates.",50,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_policy","","Sets the policy used to evaluate trust.",50,{"inputs":[{"name":"self"},{"name":"secpolicy"}],"output":{"name":"result"}}],[11,"evaluate","","Evaluates trust.",50,{"inputs":[{"name":"self"}],"output":{"generics":["trustresult"],"name":"result"}}],[11,"certificate_count","","Returns the number of certificates in an evaluated certificate chain.",50,{"inputs":[{"name":"self"}],"output":{"name":"cfindex"}}],[11,"certificate_at_index","","Returns a specific certificate from the certificate chain used to evaluate trust.",50,{"inputs":[{"name":"self"},{"name":"cfindex"}],"output":{"generics":["seccertificate"],"name":"option"}}],[11,"diffie_hellman_params","security_framework::secure_transport","",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_diffie_hellman_params","","",45,null],[11,"certificate_authorities","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_certificate_authorities","","",45,null],[11,"add_certificate_authorities","","",45,null]],"paths":[[3,"Error"],[3,"SecCertificate"],[4,"CipherSuite"],[3,"SecIdentity"],[3,"ImportedIdentity"],[3,"ImportedIdentityOptions"],[3,"Pkcs12ImportOptions"],[3,"SearchResult"],[4,"ItemClass"],[4,"Reference"],[3,"ItemSearchOptions"],[3,"SecKey"],[8,"SecIdentityExt"],[3,"SecAccess"],[8,"SecCertificateExt"],[4,"DigestType"],[3,"Builder"],[4,"Padding"],[4,"Mode"],[3,"Builder"],[3,"SecItems"],[8,"Pkcs12ImportOptionsExt"],[3,"ImportOptions"],[4,"KeyType"],[8,"ItemSearchOptionsExt"],[8,"SecKeyExt"],[8,"SecKeychainExt"],[3,"SecKeychain"],[3,"CreateOptions"],[3,"KeychainSettings"],[3,"SecKeychainItem"],[8,"SslContextExt"],[3,"SecTransform"],[3,"SecPolicy"],[3,"SecRandom"],[4,"ProtocolSide"],[4,"ConnectionType"],[4,"HandshakeError"],[4,"ClientHandshakeError"],[4,"SessionState"],[4,"SslAuthenticate"],[4,"SslClientCertificateState"],[4,"SslProtocol"],[3,"MidHandshakeSslStream"],[3,"MidHandshakeClientBuilder"],[3,"SslContext"],[3,"SslStream"],[3,"ClientBuilder"],[3,"ServerBuilder"],[4,"TrustResult"],[3,"SecTrust"]]};
searchIndex["security_framework_sys"] = {"doc":"","items":[[0,"access","security_framework_sys","",null,null],[5,"SecAccessGetTypeID","security_framework_sys::access","",null,null],[0,"base","security_framework_sys","",null,null],[3,"OpaqueSecKeychainRef","security_framework_sys::base","",null,null],[3,"OpaqueSecKeychainItemRef","","",null,null],[3,"OpaqueSecCertificateRef","","",null,null],[3,"OpaqueSecAccessRef","","",null,null],[3,"OpaqueSecKeyRef","","",null,null],[3,"OpaqueSecIdentityRef","","",null,null],[3,"OpaqueSecPolicyRef","","",null,null],[5,"SecCopyErrorMessageString","","",null,null],[6,"SecKeychainRef","","",null,null],[6,"SecKeychainItemRef","","",null,null],[6,"SecCertificateRef","","",null,null],[6,"SecAccessRef","","",null,null],[6,"SecKeyRef","","",null,null],[6,"SecIdentityRef","","",null,null],[6,"SecPolicyRef","","",null,null],[17,"errSecSuccess","","",null,null],[17,"errSecIO","","",null,null],[17,"errSecParam","","",null,null],[17,"errSecBadReq","","",null,null],[17,"errSecAuthFailed","","",null,null],[17,"errSecTrustSettingDeny","","",null,null],[17,"errSecNotTrusted","","",null,null],[0,"certificate","security_framework_sys","",null,null],[5,"SecCertificateGetTypeID","security_framework_sys::certificate","",null,null],[5,"SecCertificateCreateWithData","","",null,null],[5,"SecCertificateCopyData","","",null,null],[5,"SecCertificateCopySubjectSummary","","",null,null],[5,"SecCertificateCopyCommonName","","",null,null],[5,"SecCertificateCopyPublicKey","","",null,null],[0,"cipher_suite","security_framework_sys","",null,null],[6,"SSLCipherSuite","security_framework_sys::cipher_suite","",null,null],[17,"SSL_NULL_WITH_NULL_NULL","","",null,null],[17,"SSL_RSA_WITH_NULL_MD5","","",null,null],[17,"SSL_RSA_WITH_NULL_SHA","","",null,null],[17,"SSL_RSA_EXPORT_WITH_RC4_40_MD5","","",null,null],[17,"SSL_RSA_WITH_RC4_128_MD5","","",null,null],[17,"SSL_RSA_WITH_RC4_128_SHA","","",null,null],[17,"SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5","","",null,null],[17,"SSL_RSA_WITH_IDEA_CBC_SHA","","",null,null],[17,"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA","","",null,null],[17,"SSL_RSA_WITH_DES_CBC_SHA","","",null,null],[17,"SSL_RSA_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA","","",null,null],[17,"SSL_DH_DSS_WITH_DES_CBC_SHA","","",null,null],[17,"SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA","","",null,null],[17,"SSL_DH_RSA_WITH_DES_CBC_SHA","","",null,null],[17,"SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA","","",null,null],[17,"SSL_DHE_DSS_WITH_DES_CBC_SHA","","",null,null],[17,"SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA","","",null,null],[17,"SSL_DHE_RSA_WITH_DES_CBC_SHA","","",null,null],[17,"SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"SSL_DH_anon_EXPORT_WITH_RC4_40_MD5","","",null,null],[17,"SSL_DH_anon_WITH_RC4_128_MD5","","",null,null],[17,"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA","","",null,null],[17,"SSL_DH_anon_WITH_DES_CBC_SHA","","",null,null],[17,"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"SSL_FORTEZZA_DMS_WITH_NULL_SHA","","",null,null],[17,"SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA","","",null,null],[17,"TLS_RSA_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_DH_DSS_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_DH_RSA_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_DHE_DSS_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_DHE_RSA_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_DH_anon_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_RSA_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_DH_DSS_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_DH_RSA_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_DHE_DSS_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_DHE_RSA_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_DH_anon_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_ECDH_ECDSA_WITH_NULL_SHA","","",null,null],[17,"TLS_ECDH_ECDSA_WITH_RC4_128_SHA","","",null,null],[17,"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_ECDHE_ECDSA_WITH_NULL_SHA","","",null,null],[17,"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA","","",null,null],[17,"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_ECDH_RSA_WITH_NULL_SHA","","",null,null],[17,"TLS_ECDH_RSA_WITH_RC4_128_SHA","","",null,null],[17,"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_ECDHE_RSA_WITH_NULL_SHA","","",null,null],[17,"TLS_ECDHE_RSA_WITH_RC4_128_SHA","","",null,null],[17,"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_ECDH_anon_WITH_NULL_SHA","","",null,null],[17,"TLS_ECDH_anon_WITH_RC4_128_SHA","","",null,null],[17,"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_ECDH_anon_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_ECDH_anon_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_NULL_WITH_NULL_NULL","","",null,null],[17,"TLS_RSA_WITH_NULL_MD5","","",null,null],[17,"TLS_RSA_WITH_NULL_SHA","","",null,null],[17,"TLS_RSA_WITH_RC4_128_MD5","","",null,null],[17,"TLS_RSA_WITH_RC4_128_SHA","","",null,null],[17,"TLS_RSA_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_RSA_WITH_NULL_SHA256","","",null,null],[17,"TLS_RSA_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_RSA_WITH_AES_256_CBC_SHA256","","",null,null],[17,"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_DH_DSS_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_DH_RSA_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_DH_DSS_WITH_AES_256_CBC_SHA256","","",null,null],[17,"TLS_DH_RSA_WITH_AES_256_CBC_SHA256","","",null,null],[17,"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256","","",null,null],[17,"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256","","",null,null],[17,"TLS_DH_anon_WITH_RC4_128_MD5","","",null,null],[17,"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_DH_anon_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_DH_anon_WITH_AES_256_CBC_SHA256","","",null,null],[17,"TLS_PSK_WITH_RC4_128_SHA","","",null,null],[17,"TLS_PSK_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_PSK_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_PSK_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_DHE_PSK_WITH_RC4_128_SHA","","",null,null],[17,"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_DHE_PSK_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_DHE_PSK_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_RSA_PSK_WITH_RC4_128_SHA","","",null,null],[17,"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA","","",null,null],[17,"TLS_RSA_PSK_WITH_AES_128_CBC_SHA","","",null,null],[17,"TLS_RSA_PSK_WITH_AES_256_CBC_SHA","","",null,null],[17,"TLS_PSK_WITH_NULL_SHA","","",null,null],[17,"TLS_DHE_PSK_WITH_NULL_SHA","","",null,null],[17,"TLS_RSA_PSK_WITH_NULL_SHA","","",null,null],[17,"TLS_RSA_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_RSA_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_DH_RSA_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_DH_RSA_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_DH_DSS_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_DH_DSS_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_DH_anon_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_DH_anon_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_PSK_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_PSK_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_DHE_PSK_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_DHE_PSK_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_PSK_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_PSK_WITH_AES_256_CBC_SHA384","","",null,null],[17,"TLS_PSK_WITH_NULL_SHA256","","",null,null],[17,"TLS_PSK_WITH_NULL_SHA384","","",null,null],[17,"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384","","",null,null],[17,"TLS_DHE_PSK_WITH_NULL_SHA256","","",null,null],[17,"TLS_DHE_PSK_WITH_NULL_SHA384","","",null,null],[17,"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384","","",null,null],[17,"TLS_RSA_PSK_WITH_NULL_SHA256","","",null,null],[17,"TLS_RSA_PSK_WITH_NULL_SHA384","","",null,null],[17,"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384","","",null,null],[17,"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384","","",null,null],[17,"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384","","",null,null],[17,"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256","","",null,null],[17,"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384","","",null,null],[17,"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256","","",null,null],[17,"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384","","",null,null],[17,"TLS_EMPTY_RENEGOTIATION_INFO_SCSV","","",null,null],[17,"SSL_RSA_WITH_RC2_CBC_MD5","","",null,null],[17,"SSL_RSA_WITH_IDEA_CBC_MD5","","",null,null],[17,"SSL_RSA_WITH_DES_CBC_MD5","","",null,null],[17,"SSL_RSA_WITH_3DES_EDE_CBC_MD5","","",null,null],[17,"SSL_NO_SUCH_CIPHERSUITE","","",null,null],[0,"digest_transform","security_framework_sys","",null,null],[7,"kSecDigestHMACKeyAttribute","security_framework_sys::digest_transform","",null,null],[7,"kSecDigestHMACMD5","","",null,null],[7,"kSecDigestHMACSHA1","","",null,null],[7,"kSecDigestHMACSHA2","","",null,null],[7,"kSecDigestLengthAttribute","","",null,null],[7,"kSecDigestMD2","","",null,null],[7,"kSecDigestMD4","","",null,null],[7,"kSecDigestMD5","","",null,null],[7,"kSecDigestSHA1","","",null,null],[7,"kSecDigestSHA2","","",null,null],[7,"kSecDigestTypeAttribute","","",null,null],[5,"SecDigestTransformCreate","","",null,null],[5,"SecDigestTransformGetTypeID","","",null,null],[0,"encrypt_transform","security_framework_sys","",null,null],[7,"kSecEncryptionMode","security_framework_sys::encrypt_transform","",null,null],[7,"kSecEncryptKey","","",null,null],[7,"kSecIVKey","","",null,null],[7,"kSecModeCBCKey","","",null,null],[7,"kSecModeCFBKey","","",null,null],[7,"kSecModeECBKey","","",null,null],[7,"kSecModeNoneKey","","",null,null],[7,"kSecModeOFBKey","","",null,null],[7,"kSecPaddingKey","","",null,null],[7,"kSecPaddingNoneKey","","",null,null],[7,"kSecPaddingOAEPKey","","",null,null],[7,"kSecPaddingPKCS1Key","","",null,null],[7,"kSecPaddingPKCS5Key","","",null,null],[7,"kSecPaddingPKCS7Key","","",null,null],[5,"SecDecryptTransformCreate","","",null,null],[5,"SecDecryptTransformGetTypeID","","",null,null],[5,"SecEncryptTransformCreate","","",null,null],[5,"SecEncryptTransformGetTypeID","","",null,null],[0,"identity","security_framework_sys","",null,null],[5,"SecIdentityGetTypeID","security_framework_sys::identity","",null,null],[5,"SecIdentityCopyCertificate","","",null,null],[5,"SecIdentityCopyPrivateKey","","",null,null],[5,"SecIdentityCreateWithCertificate","","",null,null],[0,"import_export","security_framework_sys","",null,null],[3,"SecItemImportExportKeyParameters","security_framework_sys::import_export","",null,null],[12,"version","","",0,null],[12,"flags","","",0,null],[12,"passphrase","","",0,null],[12,"alert_title","","",0,null],[12,"alert_prompt","","",0,null],[12,"access_ref","","",0,null],[12,"key_usage","","",0,null],[12,"key_attributes","","",0,null],[5,"SecItemImport","","",null,null],[5,"SecItemExport","","",null,null],[7,"kSecImportExportPassphrase","","",null,null],[7,"kSecImportExportKeychain","","",null,null],[7,"kSecImportExportAccess","","",null,null],[7,"kSecImportItemLabel","","",null,null],[7,"kSecImportItemKeyID","","",null,null],[7,"kSecImportItemTrust","","",null,null],[7,"kSecImportItemCertChain","","",null,null],[7,"kSecImportItemIdentity","","",null,null],[5,"SecPKCS12Import","","",null,null],[6,"SecExternalFormat","","",null,null],[6,"SecExternalItemType","","",null,null],[6,"SecItemImportExportFlags","","",null,null],[6,"SecKeyImportExportFlags","","",null,null],[17,"kSecKeyImportOnlyOne","","",null,null],[17,"kSecKeySecurePassphrase","","",null,null],[17,"kSecKeyNoAccessControl","","",null,null],[17,"SEC_KEY_IMPORT_EXPORT_PARAMS_VERSION","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"secitemimportexportkeyparameters"}}],[0,"item","security_framework_sys","",null,null],[7,"kSecClass","security_framework_sys::item","",null,null],[7,"kSecClassInternetPassword","","",null,null],[7,"kSecClassGenericPassword","","",null,null],[7,"kSecClassCertificate","","",null,null],[7,"kSecClassKey","","",null,null],[7,"kSecClassIdentity","","",null,null],[7,"kSecMatchLimit","","",null,null],[7,"kSecReturnData","","",null,null],[7,"kSecReturnAttributes","","",null,null],[7,"kSecReturnRef","","",null,null],[7,"kSecReturnPersistentRef","","",null,null],[7,"kSecMatchSearchList","","",null,null],[7,"kSecAttrKeyType","","",null,null],[7,"kSecAttrLabel","","",null,null],[7,"kSecAttrKeyTypeRSA","","",null,null],[7,"kSecAttrKeyTypeDSA","","",null,null],[7,"kSecAttrKeyTypeAES","","",null,null],[7,"kSecAttrKeyTypeDES","","",null,null],[7,"kSecAttrKeyType3DES","","",null,null],[7,"kSecAttrKeyTypeRC4","","",null,null],[7,"kSecAttrKeyTypeRC2","","",null,null],[7,"kSecAttrKeyTypeCAST","","",null,null],[5,"SecItemCopyMatching","","",null,null],[0,"key","security_framework_sys","",null,null],[5,"SecKeyGetTypeID","security_framework_sys::key","",null,null],[5,"SecKeyCreateFromData","","",null,null],[0,"keychain","security_framework_sys","",null,null],[3,"SecKeychainSettings","security_framework_sys::keychain","",null,null],[12,"version","","",1,null],[12,"lockOnSleep","","",1,null],[12,"useLockInterval","","",1,null],[12,"lockInterval","","",1,null],[5,"SecKeychainGetTypeID","","",null,null],[5,"SecKeychainCopyDefault","","",null,null],[5,"SecKeychainCreate","","",null,null],[5,"SecKeychainOpen","","",null,null],[5,"SecKeychainUnlock","","",null,null],[5,"SecKeychainSetSettings","","",null,null],[17,"SEC_KEYCHAIN_SETTINGS_VERS1","","",null,null],[0,"keychain_item","security_framework_sys","",null,null],[5,"SecKeychainItemGetTypeID","security_framework_sys::keychain_item","",null,null],[0,"policy","security_framework_sys","",null,null],[5,"SecPolicyCreateSSL","security_framework_sys::policy","",null,null],[5,"SecPolicyGetTypeID","","",null,null],[0,"random","security_framework_sys","",null,null],[3,"__SecRandom","security_framework_sys::random","",null,null],[7,"kSecRandomDefault","","",null,null],[5,"SecRandomCopyBytes","","",null,null],[6,"SecRandomRef","","",null,null],[0,"secure_transport","security_framework_sys","",null,null],[5,"SSLContextGetTypeID","security_framework_sys::secure_transport","",null,null],[5,"SSLCreateContext","","",null,null],[5,"SSLNewContext","","",null,null],[5,"SSLDisposeContext","","",null,null],[5,"SSLSetConnection","","",null,null],[5,"SSLGetConnection","","",null,null],[5,"SSLSetIOFuncs","","",null,null],[5,"SSLHandshake","","",null,null],[5,"SSLClose","","",null,null],[5,"SSLRead","","",null,null],[5,"SSLWrite","","",null,null],[5,"SSLSetPeerDomainName","","",null,null],[5,"SSLGetPeerDomainNameLength","","",null,null],[5,"SSLGetPeerDomainName","","",null,null],[5,"SSLSetCertificate","","",null,null],[5,"SSLSetCertificateAuthorities","","",null,null],[5,"SSLCopyCertificateAuthorities","","",null,null],[5,"SSLSetSessionOption","","",null,null],[5,"SSLGetSessionOption","","",null,null],[5,"SSLCopyPeerTrust","","",null,null],[5,"SSLGetSessionState","","",null,null],[5,"SSLGetSupportedCiphers","","",null,null],[5,"SSLGetNumberSupportedCiphers","","",null,null],[5,"SSLGetEnabledCiphers","","",null,null],[5,"SSLGetNumberEnabledCiphers","","",null,null],[5,"SSLSetEnabledCiphers","","",null,null],[5,"SSLGetNegotiatedCipher","","",null,null],[5,"SSLSetClientSideAuthenticate","","",null,null],[5,"SSLSetDiffieHellmanParams","","",null,null],[5,"SSLGetDiffieHellmanParams","","",null,null],[5,"SSLSetPeerID","","",null,null],[5,"SSLGetPeerID","","",null,null],[5,"SSLGetBufferedReadSize","","",null,null],[5,"SSLGetClientCertificateState","","",null,null],[5,"SSLGetNegotiatedProtocolVersion","","",null,null],[5,"SSLGetProtocolVersionMax","","",null,null],[5,"SSLGetProtocolVersionMin","","",null,null],[5,"SSLSetProtocolVersionMax","","",null,null],[5,"SSLSetProtocolVersionMin","","",null,null],[5,"SSLSetProtocolVersionEnabled","","",null,null],[6,"SSLContext","","",null,null],[6,"SSLContextRef","","",null,null],[6,"SSLConnectionRef","","",null,null],[6,"SSLProtocol","","",null,null],[6,"SSLSessionOption","","",null,null],[6,"SSLSessionState","","",null,null],[6,"SSLReadFunc","","",null,null],[6,"SSLWriteFunc","","",null,null],[6,"SSLProtocolSide","","",null,null],[6,"SSLConnectionType","","",null,null],[6,"SSLAuthenticate","","",null,null],[6,"SSLClientCertificateState","","",null,null],[17,"kSSLProtocolUnknown","","",null,null],[17,"kSSLProtocol3","","",null,null],[17,"kTLSProtocol1","","",null,null],[17,"kTLSProtocol11","","",null,null],[17,"kTLSProtocol12","","",null,null],[17,"kDTLSProtocol1","","",null,null],[17,"kSSLProtocol2","","",null,null],[17,"kSSLProtocol3Only","","",null,null],[17,"kTLSProtocol1Only","","",null,null],[17,"kSSLProtocolAll","","",null,null],[17,"kSSLSessionOptionBreakOnServerAuth","","",null,null],[17,"kSSLSessionOptionBreakOnCertRequested","","",null,null],[17,"kSSLSessionOptionBreakOnClientAuth","","",null,null],[17,"kSSLIdle","","",null,null],[17,"kSSLHandshake","","",null,null],[17,"kSSLConnected","","",null,null],[17,"kSSLClosed","","",null,null],[17,"kSSLAborted","","",null,null],[17,"kSSLServerSide","","",null,null],[17,"kSSLClientSide","","",null,null],[17,"kSSLStreamType","","",null,null],[17,"kSSLDatagramType","","",null,null],[17,"errSSLProtocol","","",null,null],[17,"errSSLNegotiation","","",null,null],[17,"errSSLFatalAlert","","",null,null],[17,"errSSLWouldBlock","","",null,null],[17,"errSSLSessionNotFound","","",null,null],[17,"errSSLClosedGraceful","","",null,null],[17,"errSSLClosedAbort","","",null,null],[17,"errSSLXCertChainInvalid","","",null,null],[17,"errSSLBadCert","","",null,null],[17,"errSSLCrypto","","",null,null],[17,"errSSLInternal","","",null,null],[17,"errSSLModuleAttach","","",null,null],[17,"errSSLUnknownRootCert","","",null,null],[17,"errSSLNoRootCert","","",null,null],[17,"errSSLCertExpired","","",null,null],[17,"errSSLCertNotYetValid","","",null,null],[17,"errSSLClosedNoNotify","","",null,null],[17,"errSSLBufferOverflow","","",null,null],[17,"errSSLBadCipherSuite","","",null,null],[17,"errSSLPeerUnexpectedMsg","","",null,null],[17,"errSSLPeerBadRecordMac","","",null,null],[17,"errSSLPeerDecryptionFail","","",null,null],[17,"errSSLPeerRecordOverflow","","",null,null],[17,"errSSLPeerDecompressFail","","",null,null],[17,"errSSLPeerHandshakeFail","","",null,null],[17,"errSSLPeerBadCert","","",null,null],[17,"errSSLPeerUnsupportedCert","","",null,null],[17,"errSSLPeerCertRevoked","","",null,null],[17,"errSSLPeerCertExpired","","",null,null],[17,"errSSLPeerCertUnknown","","",null,null],[17,"errSSLIllegalParam","","",null,null],[17,"errSSLPeerUnknownCA","","",null,null],[17,"errSSLPeerAccessDenied","","",null,null],[17,"errSSLPeerDecodeError","","",null,null],[17,"errSSLPeerDecryptError","","",null,null],[17,"errSSLPeerExportRestriction","","",null,null],[17,"errSSLPeerProtocolVersion","","",null,null],[17,"errSSLPeerInsufficientSecurity","","",null,null],[17,"errSSLPeerInternalError","","",null,null],[17,"errSSLPeerUserCancelled","","",null,null],[17,"errSSLPeerNoRenegotiation","","",null,null],[17,"errSSLPeerAuthCompleted","","",null,null],[17,"errSSLClientCertRequested","","",null,null],[17,"errSSLHostNameMismatch","","",null,null],[17,"errSSLConnectionRefused","","",null,null],[17,"errSSLDecryptionFail","","",null,null],[17,"errSSLBadRecordMac","","",null,null],[17,"errSSLRecordOverflow","","",null,null],[17,"errSSLBadConfiguration","","",null,null],[17,"errSSLClientHelloReceived","","",null,null],[17,"kNeverAuthenticate","","",null,null],[17,"kAlwaysAuthenticate","","",null,null],[17,"kTryAuthenticate","","",null,null],[17,"kSSLClientCertNone","","",null,null],[17,"kSSLClientCertRequested","","",null,null],[17,"kSSLClientCertSent","","",null,null],[17,"kSSLClientCertRejected","","",null,null],[0,"transform","security_framework_sys","",null,null],[7,"kSecTransformInputAttributeName","security_framework_sys::transform","",null,null],[5,"SecTransformGetTypeID","","",null,null],[5,"SecTransformSetAttribute","","",null,null],[5,"SecTransformExecute","","",null,null],[6,"SecTransformRef","","",null,null],[0,"trust","security_framework_sys","",null,null],[3,"__SecTrust","security_framework_sys::trust","",null,null],[5,"SecTrustGetTypeID","","",null,null],[5,"SecTrustGetCertificateCount","","",null,null],[5,"SecTrustGetCertificateAtIndex","","",null,null],[5,"SecTrustSetAnchorCertificates","","",null,null],[5,"SecTrustSetAnchorCertificatesOnly","","",null,null],[5,"SecTrustEvaluate","","",null,null],[5,"SecTrustCreateWithCertificates","","",null,null],[5,"SecTrustSetPolicies","","",null,null],[6,"SecTrustResultType","","",null,null],[6,"SecTrustRef","","",null,null],[17,"kSecTrustResultInvalid","","",null,null],[17,"kSecTrustResultProceed","","",null,null],[17,"kSecTrustResultDeny","","",null,null],[17,"kSecTrustResultUnspecified","","",null,null],[17,"kSecTrustResultRecoverableTrustFailure","","",null,null],[17,"kSecTrustResultFatalTrustFailure","","",null,null],[17,"kSecTrustResultOtherError","","",null,null]],"paths":[[3,"SecItemImportExportKeyParameters"],[3,"SecKeychainSettings"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",3,null],[11,"deserialize_enum","","",3,null],[11,"deserialize_identifier","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",4,null],[11,"deserialize_enum","","",4,null],[11,"deserialize_identifier","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_identifier","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_identifier","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_identifier","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_identifier","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_identifier","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_identifier","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_identifier","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_identifier","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",16,null],[11,"variant_seed","","",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",17,null],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",18,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",18,null],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",19,null],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",21,null],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",23,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",24,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",24,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_element_seed","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",25,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",26,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",26,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",26,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",26,null],[11,"deserialize","","",26,{"inputs":[{"name":"d"}],"output":{"generics":["ignoredany"],"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",27,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",27,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",27,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",27,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",27,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",27,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",27,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",27,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",29,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",30,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",30,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",31,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",31,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",31,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",32,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",32,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",32,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",32,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",32,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",32,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",32,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",32,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",32,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",32,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",32,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",32,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",32,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",32,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",32,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",32,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",32,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",33,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",34,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",34,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",34,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",34,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",34,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",34,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",35,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",36,null],[10,"unit_variant","","Called when deserializing a variant with no values.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",36,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",37,null],[10,"into_deserializer","","Convert this value into a deserializer.",37,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",40,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",41,null],[16,"Error","","The error type when some error occurs during serialization.",41,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",41,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",41,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",41,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",41,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",41,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",41,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",41,null],[10,"serialize_bool","","Serialize a `bool` value.",41,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",41,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",41,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",41,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",41,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",41,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",41,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",41,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",41,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",41,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",41,null],[10,"serialize_none","","Serialize a [`None`] value.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",42,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",42,null],[10,"serialize_element","","Serialize a sequence element.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",43,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",43,null],[10,"serialize_element","","Serialize a tuple element.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_field","","Serialize a tuple struct field.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_field","","Serialize a tuple variant field.",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_key","","Serialize a map key.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",46,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_field","","Serialize a struct field.",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_field","","Serialize a struct variant field.",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",48,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",29,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",31,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",31,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",31,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",40,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",41,null],[16,"Error","","The error type when some error occurs during serialization.",41,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",41,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",41,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",41,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",41,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",41,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",41,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",41,null],[10,"serialize_bool","","Serialize a `bool` value.",41,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",41,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",41,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",41,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",41,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",41,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",41,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",41,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",41,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",41,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",41,null],[10,"serialize_none","","Serialize a [`None`] value.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"inputs":[{"name":"self"}],"output":{"name":"streamdeserializer"}}],[11,"from_str","serde_json","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",5,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",6,null],[13,"Occupied","","An occupied Entry.",6,null],[11,"new","","Makes a new empty Map.",7,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",7,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"key","","Returns a reference to this entry's key.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","Gets a reference to the value in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",7,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",16,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,null],[13,"Solidus","","An escaped solidus `/`",16,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"charescape"}],"output":{"name":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","Called after every array value.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","Called before every object key.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","Called after every object value.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",18,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",18,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"compactformatter"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"prettyformatter"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","",20,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","",20,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"begin_object_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"generics":["string","value"],"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"clone","serde_json","",2,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,{"inputs":[{"name":"f64"}],"output":{"generics":["number"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"generics":["number"],"name":"result"}}],[11,"deserialize_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serde_urlencoded"] = {"doc":"`x-www-form-urlencoded` meets Serde","items":[[3,"Deserializer","serde_urlencoded","A deserializer for the `application/x-www-form-urlencoded` format.",null,null],[3,"Serializer","","A serializer for the `application/x-www-form-urlencoded` format.",null,null],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",null,null],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",null,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","error"],"name":"result"}}],[0,"de","","Deserialization support for the `application/x-www-form-urlencoded` format.",null,null],[3,"Error","serde_urlencoded::de","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"Deserializer","","A deserializer for the `application/x-www-form-urlencoded` format.",null,null],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",null,null],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",null,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Returns a new `Deserializer`.",0,{"inputs":[{"name":"urlencodedparse"}],"output":{"name":"self"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[0,"ser","serde_urlencoded","Serialization support for the `application/x-www-form-urlencoded` format.",null,null],[3,"Serializer","serde_urlencoded::ser","A serializer for the `application/x-www-form-urlencoded` format.",null,null],[3,"SeqSerializer","","Sequence serializer.",null,null],[3,"TupleSerializer","","Tuple serializer.",null,null],[3,"TupleStructSerializer","","Tuple struct serializer.",null,null],[3,"TupleVariantSerializer","","Tuple variant serializer.",null,null],[3,"MapSerializer","","Map serializer.",null,null],[3,"StructSerializer","","Struct serializer.",null,null],[3,"StructVariantSerializer","","Struct variant serializer.",null,null],[4,"Error","","Errors returned during serializing to `application/x-www-form-urlencoded`.",null,null],[13,"Custom","","",1,null],[13,"Utf8","","",1,null],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"new","","Returns a new `Serializer`.",2,{"inputs":[{"name":"urlencodedserializer"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, in the case of a `Utf8` error.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"serialize_bool","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i8","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i16","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u8","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u16","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_char","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_str","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_bytes","","Returns an error.",2,null],[11,"serialize_unit","","Returns an error.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_struct","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_struct","","Serializes the inner value, ignoring the newtype name.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_none","","Returns `Ok`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_some","","Serializes the given value.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq","","Serialize a sequence, given length (if any) is ignored.",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map","","Serializes a map, given length is ignored.",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct","","Serializes a struct, given length is ignored.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_element","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_element","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_entry","","",7,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_key","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_value","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"custom","serde_urlencoded::de","",10,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",10,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}]],"paths":[[3,"Deserializer"],[4,"Error"],[3,"Serializer"],[3,"SeqSerializer"],[3,"TupleSerializer"],[3,"TupleStructSerializer"],[3,"TupleVariantSerializer"],[3,"MapSerializer"],[3,"StructSerializer"],[3,"StructVariantSerializer"],[3,"Error"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",7,null],[11,"finish128","","Return a 128-bit hash",7,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",5,null],[11,"finish128","","Return a 128-bit hash",5,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",6,null],[11,"finish128","","Return a 128-bit hash",6,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_bytes","","Convert into a 16-bytes vector",3,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"Entry","","A handle to an occupied slot in the `Slab`",null,null],[3,"VacantEntry","","A handle to a vacant slot in the `Slab`",null,null],[3,"Iter","","An iterator over the values stored in the `Slab`",null,null],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",null,null],[11,"with_capacity","","Returns an empty `Slab` with the requested capacity",0,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"len","","Returns the number of values stored by the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Returns the total capacity of the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Slab` is storing no values",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"available","","Returns the number of available slots remaining in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_available","","Returns true if the `Slab` has available slots",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns true if the `Slab` contains a value for the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","Get a reference to the value associated with the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the value associated with the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","Insert a value into the slab, returning the associated token",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"entry","","Returns a handle to an entry.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["entry"],"name":"option"}}],[11,"vacant_entry","","Returns a handle to a vacant entry.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vacantentry"],"name":"option"}}],[11,"remove","","Releases the given slot",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"retain","","Retain only the elements specified by the predicate.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"iter","","An iterator for visiting all elements stored in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","A mutable iterator for visiting all elements stored in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Empty the slab, by freeing all entries",0,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Slab`. Does nothing if the capacity is already sufficient.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace","","Replace the value stored in the entry",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Apply the function to the current value, replacing it with the result of the function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"remove","","Remove and return the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Get a reference to the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_mut","","Convert the entry handle to a mutable reference",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"index","","Return the entry index",1,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"insert","","Insert a value into the entry",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"entry"}}],[11,"index","","Returns the entry index",2,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Slab"],[3,"Entry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline and fall back to the heap for larger allocations.","items":[[3,"Drain","smallvec","",null,null],[3,"SmallVec","","",null,null],[3,"IntoIter","","",null,null],[6,"SmallVec1","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec2","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec4","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec8","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec16","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec24","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec32","","Deprecated alias to ease transition from an earlier version.",null,null],[8,"VecLike","","",null,null],[10,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"push","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"Array","","",null,null],[16,"Item","","",1,null],[10,"size","","",1,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","",1,null],[10,"ptr_mut","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","",3,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","",3,null],[11,"push_all_move","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"pop","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"swap_remove","","",3,null],[11,"clear","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","",3,null],[11,"insert","","",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"from","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",3,null]],"paths":[[8,"VecLike"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["socket2"] = {"doc":"Utilities for handling sockets","items":[[3,"Socket","socket2","Newtype, owned, wrapper around a system socket.",null,null],[3,"SockAddr","","The address of a socket.",null,null],[3,"Domain","","Specification of the communication domain for a socket.",null,null],[3,"Type","","Specification of communication semantics on a socket.",null,null],[3,"Protocol","","Protocol specification used for creating sockets via `Socket::new`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw_parts","","Constructs a `SockAddr` from its raw components.",0,null],[11,"as_inet","","Returns this address as a `SocketAddrV4` if it is in the `AF_INET` family.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddrv4"],"name":"option"}}],[11,"as_inet6","","Returns this address as a `SocketAddrV4` if it is in the `AF_INET6` family.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddrv6"],"name":"option"}}],[11,"family","","Returns this address's family.",0,{"inputs":[{"name":"self"}],"output":{"name":"sa_family_t"}}],[11,"len","","Returns the size of this address in bytes.",0,{"inputs":[{"name":"self"}],"output":{"name":"socklen_t"}}],[11,"as_ptr","","Returns a raw pointer to the address.",0,null],[11,"from","","",0,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"sockaddr"}}],[11,"from","","",0,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"sockaddr"}}],[11,"from","","",0,{"inputs":[{"name":"socketaddr"}],"output":{"name":"sockaddr"}}],[11,"new","","Creates a new socket ready to be configured.",1,{"inputs":[{"name":"domain"},{"name":"type"},{"generics":["protocol"],"name":"option"}],"output":{"generics":["socket"],"name":"result"}}],[11,"into_tcp_stream","","Consumes this `Socket`, converting it to a `TcpStream`.",1,{"inputs":[{"name":"self"}],"output":{"name":"tcpstream"}}],[11,"into_tcp_listener","","Consumes this `Socket`, converting it to a `TcpListener`.",1,{"inputs":[{"name":"self"}],"output":{"name":"tcplistener"}}],[11,"into_udp_socket","","Consumes this `Socket`, converting it to a `UdpSocket`.",1,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",1,{"inputs":[{"name":"self"},{"name":"sockaddr"}],"output":{"name":"result"}}],[11,"connect_timeout","","Initiate a connection on this socket to the specified address, only only waiting for a certain period of time for the connection to be established.",1,{"inputs":[{"name":"self"},{"name":"sockaddr"},{"name":"duration"}],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"self"},{"name":"sockaddr"}],"output":{"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",1,{"inputs":[{"name":"self"}],"output":{"generics":["sockaddr"],"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",1,{"inputs":[{"name":"self"}],"output":{"generics":["sockaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socket"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",1,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"recv","","Receives data on the socket from the remote address to which it is connected.",1,null],[11,"peek","","Receives data on the socket from the remote adress to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",1,null],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",1,null],[11,"peek_from","","Receives data from the socket, without removing it from the queue.",1,null],[11,"send","","Sends data on the socket to a connected peer.",1,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",1,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",1,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",1,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"result"}}],[11,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the SO_LINGER option",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",1,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",1,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"from","","",1,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"from","","",1,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"ipv4","","Domain for IPv4 communication, corresponding to `AF_INET`.",2,{"inputs":[],"output":{"name":"domain"}}],[11,"ipv6","","Domain for IPv6 communication, corresponding to `AF_INET6`.",2,{"inputs":[],"output":{"name":"domain"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"domain"}}],[11,"stream","","Type corresponding to `SOCK_STREAM`",3,{"inputs":[],"output":{"name":"type"}}],[11,"dgram","","Type corresponding to `SOCK_DGRAM`",3,{"inputs":[],"output":{"name":"type"}}],[11,"seqpacket","","Type corresponding to `SOCK_SEQPACKET`",3,{"inputs":[],"output":{"name":"type"}}],[11,"raw","","Type corresponding to `SOCK_RAW`",3,{"inputs":[],"output":{"name":"type"}}],[11,"icmpv4","","Protocol corresponding to `ICMPv4`",4,{"inputs":[],"output":{"name":"self"}}],[11,"icmpv6","","Protocol corresponding to `ICMPv6`",4,{"inputs":[],"output":{"name":"self"}}],[11,"tcp","","Protocol corresponding to `TCP`",4,{"inputs":[],"output":{"name":"self"}}],[11,"udp","","Protocol corresponding to `UDP`",4,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"type"}}],[11,"from","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"protocol"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"into_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"socket"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"domain"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}]],"paths":[[3,"SockAddr"],[3,"Socket"],[3,"Domain"],[3,"Type"],[3,"Protocol"]]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[6,"HammingResult","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"strsimerror"}],"output":{"name":"bool"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["subdomain_enumerator"] = {"doc":"A concurrent subdomain enumerator that utilizes both passive and active subdomain enumeration techniques.  It will help penetration testers and bug bounty hunters gather subdomain information for the domain that they are targeting.  This tool is capable of performing subdomain enumeration in two ways:  1. It queres VirusTotal for subdomain information. 2. It also performs a dictionary based enumeration based on a user-defined word list.  # Examples","items":[[0,"enumerator","subdomain_enumerator","A subdomain enumerator. Finds subdomains of a given subdomain by querying a public dataset (virustotal.com). ",null,null],[5,"query_database","subdomain_enumerator::enumerator","Takes a domain, a store, and a limit. Queries virustotal.com with the domain, and returns as many subdomains as it finds or as many fit in the limit.  Please note that virustotal, the database we query, will not accept a limit greater than 35. Thus this function will always limit itself to 35 at most. ",null,{"inputs":[{"name":"string"},{"generics":["mutex"],"name":"arc"},{"name":"usize"}],"output":null}],[0,"library_enumerator","subdomain_enumerator","Contains code for a subdomain enumerator that finds subdomain by trying subdomains generated with a library of common words.",null,null],[5,"enumerate","subdomain_enumerator::library_enumerator","Takes a domain, a library, a store, and a thread pool. For each word supplied in library, checkes to see whether the word specifies a subdomain of domain. If it does, the found subdomain is added to store.  The thread pool is used to concurrently check possible subdomains. This means that this function should be somewhat efficient even with large libraries. ",null,{"inputs":[{"name":"string"},{"name":"string"},{"generics":["mutex"],"name":"arc"},{"name":"threadpool"}],"output":null}],[0,"query","subdomain_enumerator","Builds a query that for subdomain enumeration.",null,null],[3,"Query","subdomain_enumerator::query","Represents a user supplied query, where domains is the list of domains that will have their subdomains enumerated and library is a wordlist supplied for library enumeration.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"query"}}],[11,"new","","Initializes a new Query instance.",0,{"inputs":[],"output":{"name":"self"}}],[11,"add_domain","","Add a domain (as a string) to be enumerated. ",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"add_domains","","Add multiple domains (as a vector of strings) to be enumerated. ",0,{"inputs":[{"name":"self"},{"generics":["string"],"name":"vec"}],"output":null}],[11,"set_library","","Sets the path of library file for dictionary based enumeration. ",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"set_limit","","Sets the limit of number of subdomains to be retrieved from the public dataset.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"enumerate","","Performs subdomain enumeration on all domains held in the domains variable. The found subdomains will be returned collectively in a single Results object. If a library is supplied, then both library enumeration and a database query will be performed. If no library is supplied, then only a database query will be performed. ",0,{"inputs":[{"name":"self"}],"output":{"name":"results"}}],[0,"results","subdomain_enumerator","Builds the results for subdomain enumeration.",null,null],[3,"Results","subdomain_enumerator::results","A struct holding results of a subdomain enumeration.  domain_list is the list of original domains that were supplied, eg \"Facebook.com\".  store holds the subdomains found for each supplied domain, eg \"messenger.facebook.com\". ",null,null],[12,"domains","","",1,null],[12,"store","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"results"}}],[11,"new","","Initiates a new Results instance.",1,{"inputs":[{"name":"usize"},{"generics":["string"],"name":"vec"}],"output":{"name":"self"}}],[11,"print_subdomains","","Print the associated subdomains found for each domain.",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Query"],[3,"Results"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",13,null],[12,"expr","","",13,null],[12,"bracket_token","","",13,null],[12,"index","","",13,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",14,null],[12,"lit","","",14,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",15,null],[12,"paren_token","","",15,null],[12,"expr","","",15,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",16,null],[12,"qself","","",16,null],[12,"path","","",16,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",17,null],[12,"op","","",17,null],[12,"expr","","",17,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",18,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",19,null],[12,"span","","",19,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",20,null],[12,"lt_token","","",20,null],[12,"lifetimes","","",20,null],[12,"gt_token","","",20,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",21,null],[12,"const_token","","",21,null],[12,"ident","","",21,null],[12,"colon_token","","",21,null],[12,"ty","","",21,null],[12,"eq_token","","",21,null],[12,"default","","",21,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",22,null],[12,"params","","",22,null],[12,"gt_token","","",22,null],[12,"where_clause","","",22,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",23,null],[12,"lifetime","","",23,null],[12,"colon_token","","",23,null],[12,"bounds","","",23,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",24,null],[12,"eq_token","","",24,null],[12,"rhs_ty","","",24,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",25,null],[12,"colon_token","","",25,null],[12,"bounds","","",25,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",26,null],[12,"bounded_ty","","The type being bounded",26,null],[12,"colon_token","","",26,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",26,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",27,null],[12,"modifier","","",27,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",27,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",27,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",28,null],[12,"ident","","",28,null],[12,"colon_token","","",28,null],[12,"bounds","","",28,null],[12,"eq_token","","",28,null],[12,"default","","",28,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",29,null],[12,"predicates","","",29,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",30,null],[12,"ident","","",30,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",31,null],[12,"span","","",31,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",32,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",33,null],[12,"bang_token","","",33,null],[12,"delimiter","","",33,null],[12,"tts","","",33,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",34,null],[12,"brace_token","","",34,null],[12,"variants","","",34,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",35,null],[12,"fields","","",35,null],[12,"semi_token","","",35,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",36,null],[12,"fields","","",36,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",37,null],[12,"vis","","Visibility of the struct or enum.",37,null],[12,"ident","","Name of the struct or enum.",37,null],[12,"generics","","Generics required to complete the definition.",37,null],[12,"data","","Data within the struct or enum.",37,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",38,null],[12,"name","","",38,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",39,null],[12,"ty","","",39,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",40,null],[12,"elem","","",40,null],[12,"semi_token","","",40,null],[12,"len","","",40,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",41,null],[12,"abi","","",41,null],[12,"fn_token","","",41,null],[12,"lifetimes","","",41,null],[12,"paren_token","","",41,null],[12,"inputs","","",41,null],[12,"variadic","","",41,null],[12,"output","","",41,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",42,null],[12,"elem","","",42,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",43,null],[12,"bounds","","",43,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",44,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",45,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",46,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",47,null],[12,"elem","","",47,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",48,null],[12,"path","","",48,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",49,null],[12,"const_token","","",49,null],[12,"mutability","","",49,null],[12,"elem","","",49,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",50,null],[12,"lifetime","","",50,null],[12,"mutability","","",50,null],[12,"elem","","",50,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",51,null],[12,"elem","","",51,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",52,null],[12,"bounds","","",52,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",53,null],[12,"elems","","",53,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",54,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",55,null],[12,"1","","",55,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",56,null],[12,"lt_token","","",56,null],[12,"args","","",56,null],[12,"gt_token","","",56,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",57,null],[12,"eq_token","","",57,null],[12,"ty","","",57,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",58,null],[12,"inputs","","`(A, B)`",58,null],[12,"output","","`C`",58,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",59,null],[12,"segments","","",59,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",60,null],[12,"arguments","","",60,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",61,null],[12,"ty","","",61,null],[12,"position","","",61,null],[12,"as_token","","",61,null],[12,"gt_token","","",61,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",62,null],[13,"Inner","","",62,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",63,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",63,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",63,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",64,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",64,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",65,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",65,null],[13,"Unit","","Unit struct or unit variant such as `None`.",65,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",66,null],[13,"Crate","","A crate-level visibility: `crate`.",66,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",66,null],[13,"Inherited","","An inherited visibility, which usually means private.",66,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",67,null],[13,"InPlace","","A placement expression: `place <- value`.",67,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",67,null],[13,"Call","","A function call expression: `invoke(a, b)`.",67,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",67,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",67,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",67,null],[13,"Unary","","A unary operation: `!x`, `*x`.",67,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",67,null],[13,"Cast","","A cast expression: `foo as f64`.",67,null],[13,"Type","","A type ascription expression: `foo: f64`.",67,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",67,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",67,null],[13,"While","","A while loop: `while expr { ... }`.",67,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",67,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",67,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",67,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",67,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",67,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",67,null],[13,"Block","","A blocked scope: `{ ... }`.",67,null],[13,"Assign","","An assignment expression: `a = compute()`.",67,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",67,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",67,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",67,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",67,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",67,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",67,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",67,null],[13,"Continue","","A `continue`, with an optional label.",67,null],[13,"Return","","A `return`, with an optional value to be returned.",67,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",67,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",67,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",67,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",67,null],[13,"Group","","An expression contained within invisible delimiters.",67,null],[13,"Try","","A try-expression: `expr?`.",67,null],[13,"Catch","","A catch expression: `do catch { ... }`.",67,null],[13,"Yield","","A yield expression: `yield expr`.",67,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",67,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",68,null],[13,"Unnamed","","An unnamed field like `self.0`.",68,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",69,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",69,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",69,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",70,null],[13,"Maybe","","",70,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",71,null],[13,"Lifetime","","",71,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",72,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",72,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",72,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",73,null],[13,"F64","","",73,null],[13,"None","","",73,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",74,null],[13,"I16","","",74,null],[13,"I32","","",74,null],[13,"I64","","",74,null],[13,"I128","","",74,null],[13,"Isize","","",74,null],[13,"U8","","",74,null],[13,"U16","","",74,null],[13,"U32","","",74,null],[13,"U64","","",74,null],[13,"U128","","",74,null],[13,"Usize","","",74,null],[13,"None","","",74,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",75,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",75,null],[13,"Byte","","A byte literal: `b'f'`.",75,null],[13,"Char","","A character literal: `'a'`.",75,null],[13,"Int","","An integer literal: `1` or `1u16`.",75,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",75,null],[13,"Bool","","A boolean literal: `true` or `false`.",75,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",75,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",76,null],[13,"Raw","","A raw string like `r##\"data\"##`.",76,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",77,null],[13,"Brace","","",77,null],[13,"Bracket","","",77,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",78,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",78,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",78,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",79,null],[13,"Sub","","The `-` operator (subtraction)",79,null],[13,"Mul","","The `*` operator (multiplication)",79,null],[13,"Div","","The `/` operator (division)",79,null],[13,"Rem","","The `%` operator (modulus)",79,null],[13,"And","","The `&&` operator (logical and)",79,null],[13,"Or","","The `||` operator (logical or)",79,null],[13,"BitXor","","The `^` operator (bitwise xor)",79,null],[13,"BitAnd","","The `&` operator (bitwise and)",79,null],[13,"BitOr","","The `|` operator (bitwise or)",79,null],[13,"Shl","","The `<<` operator (shift left)",79,null],[13,"Shr","","The `>>` operator (shift right)",79,null],[13,"Eq","","The `==` operator (equality)",79,null],[13,"Lt","","The `<` operator (less than)",79,null],[13,"Le","","The `<=` operator (less than or equal to)",79,null],[13,"Ne","","The `!=` operator (not equal to)",79,null],[13,"Ge","","The `>=` operator (greater than or equal to)",79,null],[13,"Gt","","The `>` operator (greater than)",79,null],[13,"AddEq","","The `+=` operator",79,null],[13,"SubEq","","The `-=` operator",79,null],[13,"MulEq","","The `*=` operator",79,null],[13,"DivEq","","The `/=` operator",79,null],[13,"RemEq","","The `%=` operator",79,null],[13,"BitXorEq","","The `^=` operator",79,null],[13,"BitAndEq","","The `&=` operator",79,null],[13,"BitOrEq","","The `|=` operator",79,null],[13,"ShlEq","","The `<<=` operator",79,null],[13,"ShrEq","","The `>>=` operator",79,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",80,null],[13,"Not","","The `!` operator for logical inversion",80,null],[13,"Neg","","The `-` operator for negation",80,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",81,null],[13,"Wild","","Argument not given a name, matched with `_`.",81,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",82,null],[13,"Type","","A particular type is returned.",82,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",83,null],[13,"Array","","A fixed size array type: `[T; n]`.",83,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",83,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",83,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",83,null],[13,"Never","","The never type: `!`.",83,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",83,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",83,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",83,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",83,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",83,null],[13,"Group","","A type contained within invisible delimiters.",83,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",83,null],[13,"Macro","","A macro in the type position.",83,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",83,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",84,null],[13,"Type","","A type argument.",84,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",84,null],[13,"Const","","A const expression. Must be inside of a block.",84,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",85,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",85,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",85,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"0","","",86,null],[3,"Apostrophe","","`'`",null,null],[12,"0","","",87,null],[3,"Add","","`+`",null,null],[12,"0","","",88,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",89,null],[3,"And","","`&`",null,null],[12,"0","","",90,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",91,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",92,null],[3,"At","","`@`",null,null],[12,"0","","",93,null],[3,"Bang","","`!`",null,null],[12,"0","","",94,null],[3,"Caret","","`^`",null,null],[12,"0","","",95,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",96,null],[3,"Colon","","`:`",null,null],[12,"0","","",97,null],[3,"Colon2","","`::`",null,null],[12,"0","","",98,null],[3,"Comma","","`,`",null,null],[12,"0","","",99,null],[3,"Div","","`/`",null,null],[12,"0","","",100,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",101,null],[3,"Dollar","","`$`",null,null],[12,"0","","",102,null],[3,"Dot","","`.`",null,null],[12,"0","","",103,null],[3,"Dot2","","`..`",null,null],[12,"0","","",104,null],[3,"Dot3","","`...`",null,null],[12,"0","","",105,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",106,null],[3,"Eq","","`=`",null,null],[12,"0","","",107,null],[3,"EqEq","","`==`",null,null],[12,"0","","",108,null],[3,"Ge","","`>=`",null,null],[12,"0","","",109,null],[3,"Gt","","`>`",null,null],[12,"0","","",110,null],[3,"Le","","`<=`",null,null],[12,"0","","",111,null],[3,"Lt","","`<`",null,null],[12,"0","","",112,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",113,null],[3,"Ne","","`!=`",null,null],[12,"0","","",114,null],[3,"Or","","`|`",null,null],[12,"0","","",115,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",116,null],[3,"OrOr","","`||`",null,null],[12,"0","","",117,null],[3,"Pound","","`#`",null,null],[12,"0","","",118,null],[3,"Question","","`?`",null,null],[12,"0","","",119,null],[3,"RArrow","","`->`",null,null],[12,"0","","",120,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",121,null],[3,"Rem","","`%`",null,null],[12,"0","","",122,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",123,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",124,null],[3,"Semi","","`;`",null,null],[12,"0","","",125,null],[3,"Shl","","`<<`",null,null],[12,"0","","",126,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",127,null],[3,"Shr","","`>>`",null,null],[12,"0","","",128,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",129,null],[3,"Star","","`*`",null,null],[12,"0","","",130,null],[3,"Sub","","`-`",null,null],[12,"0","","",131,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",132,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",133,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",134,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",135,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",136,null],[3,"As","","`as`",null,null],[12,"0","","",137,null],[3,"Auto","","`auto`",null,null],[12,"0","","",138,null],[3,"Box","","`box`",null,null],[12,"0","","",139,null],[3,"Break","","`break`",null,null],[12,"0","","",140,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",141,null],[3,"Catch","","`catch`",null,null],[12,"0","","",142,null],[3,"Const","","`const`",null,null],[12,"0","","",143,null],[3,"Continue","","`continue`",null,null],[12,"0","","",144,null],[3,"Crate","","`crate`",null,null],[12,"0","","",145,null],[3,"Default","","`default`",null,null],[12,"0","","",146,null],[3,"Do","","`do`",null,null],[12,"0","","",147,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",148,null],[3,"Else","","`else`",null,null],[12,"0","","",149,null],[3,"Enum","","`enum`",null,null],[12,"0","","",150,null],[3,"Extern","","`extern`",null,null],[12,"0","","",151,null],[3,"Fn","","`fn`",null,null],[12,"0","","",152,null],[3,"For","","`for`",null,null],[12,"0","","",153,null],[3,"If","","`if`",null,null],[12,"0","","",154,null],[3,"Impl","","`impl`",null,null],[12,"0","","",155,null],[3,"In","","`in`",null,null],[12,"0","","",156,null],[3,"Let","","`let`",null,null],[12,"0","","",157,null],[3,"Loop","","`loop`",null,null],[12,"0","","",158,null],[3,"Macro","","`macro`",null,null],[12,"0","","",159,null],[3,"Match","","`match`",null,null],[12,"0","","",160,null],[3,"Mod","","`mod`",null,null],[12,"0","","",161,null],[3,"Move","","`move`",null,null],[12,"0","","",162,null],[3,"Mut","","`mut`",null,null],[12,"0","","",163,null],[3,"Pub","","`pub`",null,null],[12,"0","","",164,null],[3,"Ref","","`ref`",null,null],[12,"0","","",165,null],[3,"Return","","`return`",null,null],[12,"0","","",166,null],[3,"Self_","","`self`",null,null],[12,"0","","",167,null],[3,"Static","","`static`",null,null],[12,"0","","",168,null],[3,"Struct","","`struct`",null,null],[12,"0","","",169,null],[3,"Super","","`super`",null,null],[12,"0","","",170,null],[3,"Trait","","`trait`",null,null],[12,"0","","",171,null],[3,"Type","","`type`",null,null],[12,"0","","",172,null],[3,"Union","","`union`",null,null],[12,"0","","",173,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",174,null],[3,"Use","","`use`",null,null],[12,"0","","",175,null],[3,"Where","","`where`",null,null],[12,"0","","",176,null],[3,"While","","`while`",null,null],[12,"0","","",177,null],[3,"Yield","","`yield`",null,null],[12,"0","","",178,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"underscore"}}],[11,"new","","",86,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",86,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",86,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",86,{"inputs":[{"name":"cursor"}],"output":{"generics":["underscore"],"name":"presult"}}],[11,"description","","",86,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"apostrophe"}}],[11,"new","","",87,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",87,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",87,{"inputs":[{"name":"cursor"}],"output":{"generics":["apostrophe"],"name":"presult"}}],[11,"description","","",87,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"add"}}],[11,"new","","",88,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",88,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"addeq"}}],[11,"new","","",89,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",89,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"and"}}],[11,"new","","",90,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",90,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"andand"}}],[11,"new","","",91,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",91,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"andeq"}}],[11,"new","","",92,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",92,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"at"}}],[11,"new","","",93,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",93,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bang"}}],[11,"new","","",94,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",94,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"caret"}}],[11,"new","","",95,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",95,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"careteq"}}],[11,"new","","",96,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",96,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"colon"}}],[11,"new","","",97,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",97,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"colon2"}}],[11,"new","","",98,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",98,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"comma"}}],[11,"new","","",99,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",99,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"div"}}],[11,"new","","",100,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",100,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"diveq"}}],[11,"new","","",101,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",101,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"dollar"}}],[11,"new","","",102,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",102,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"dot"}}],[11,"new","","",103,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",103,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"dot2"}}],[11,"new","","",104,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",104,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"dot3"}}],[11,"new","","",105,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"dotdoteq"}}],[11,"new","","",106,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",106,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"eq"}}],[11,"new","","",107,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"eqeq"}}],[11,"new","","",108,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",108,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",108,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"ge"}}],[11,"new","","",109,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",109,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"gt"}}],[11,"new","","",110,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",110,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"le"}}],[11,"new","","",111,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",111,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"lt"}}],[11,"new","","",112,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",112,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"muleq"}}],[11,"new","","",113,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",113,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"ne"}}],[11,"new","","",114,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",114,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"or"}}],[11,"new","","",115,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"oreq"}}],[11,"new","","",116,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",116,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"oror"}}],[11,"new","","",117,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"pound"}}],[11,"new","","",118,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",118,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"question"}}],[11,"new","","",119,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",119,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"rarrow"}}],[11,"new","","",120,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",120,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"larrow"}}],[11,"new","","",121,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",121,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"rem"}}],[11,"new","","",122,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",122,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",122,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"remeq"}}],[11,"new","","",123,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"fatarrow"}}],[11,"new","","",124,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",124,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"semi"}}],[11,"new","","",125,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"shl"}}],[11,"new","","",126,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",126,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"shleq"}}],[11,"new","","",127,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"shr"}}],[11,"new","","",128,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",128,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"shreq"}}],[11,"new","","",129,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"new","","",130,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",130,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"sub"}}],[11,"new","","",131,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"subeq"}}],[11,"new","","",132,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",132,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",88,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",88,{"inputs":[{"name":"cursor"}],"output":{"generics":["add"],"name":"presult"}}],[11,"description","","",88,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",89,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",89,{"inputs":[{"name":"cursor"}],"output":{"generics":["addeq"],"name":"presult"}}],[11,"description","","",89,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",90,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",90,{"inputs":[{"name":"cursor"}],"output":{"generics":["and"],"name":"presult"}}],[11,"description","","",90,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",91,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",91,{"inputs":[{"name":"cursor"}],"output":{"generics":["andand"],"name":"presult"}}],[11,"description","","",91,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",92,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",92,{"inputs":[{"name":"cursor"}],"output":{"generics":["andeq"],"name":"presult"}}],[11,"description","","",92,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",93,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",93,{"inputs":[{"name":"cursor"}],"output":{"generics":["at"],"name":"presult"}}],[11,"description","","",93,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",94,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",94,{"inputs":[{"name":"cursor"}],"output":{"generics":["bang"],"name":"presult"}}],[11,"description","","",94,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",95,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",95,{"inputs":[{"name":"cursor"}],"output":{"generics":["caret"],"name":"presult"}}],[11,"description","","",95,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",96,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",96,{"inputs":[{"name":"cursor"}],"output":{"generics":["careteq"],"name":"presult"}}],[11,"description","","",96,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",97,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",97,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon"],"name":"presult"}}],[11,"description","","",97,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",98,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",98,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon2"],"name":"presult"}}],[11,"description","","",98,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",99,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",99,{"inputs":[{"name":"cursor"}],"output":{"generics":["comma"],"name":"presult"}}],[11,"description","","",99,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",100,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",100,{"inputs":[{"name":"cursor"}],"output":{"generics":["div"],"name":"presult"}}],[11,"description","","",100,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",101,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",101,{"inputs":[{"name":"cursor"}],"output":{"generics":["diveq"],"name":"presult"}}],[11,"description","","",101,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",102,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",102,{"inputs":[{"name":"cursor"}],"output":{"generics":["dollar"],"name":"presult"}}],[11,"description","","",102,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",103,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",103,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot"],"name":"presult"}}],[11,"description","","",103,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",104,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",104,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot2"],"name":"presult"}}],[11,"description","","",104,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",105,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",105,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot3"],"name":"presult"}}],[11,"description","","",105,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",106,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",106,{"inputs":[{"name":"cursor"}],"output":{"generics":["dotdoteq"],"name":"presult"}}],[11,"description","","",106,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",107,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",107,{"inputs":[{"name":"cursor"}],"output":{"generics":["eq"],"name":"presult"}}],[11,"description","","",107,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",108,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",108,{"inputs":[{"name":"cursor"}],"output":{"generics":["eqeq"],"name":"presult"}}],[11,"description","","",108,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",109,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",109,{"inputs":[{"name":"cursor"}],"output":{"generics":["ge"],"name":"presult"}}],[11,"description","","",109,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",110,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",110,{"inputs":[{"name":"cursor"}],"output":{"generics":["gt"],"name":"presult"}}],[11,"description","","",110,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",111,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",111,{"inputs":[{"name":"cursor"}],"output":{"generics":["le"],"name":"presult"}}],[11,"description","","",111,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",112,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",112,{"inputs":[{"name":"cursor"}],"output":{"generics":["lt"],"name":"presult"}}],[11,"description","","",112,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",113,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",113,{"inputs":[{"name":"cursor"}],"output":{"generics":["muleq"],"name":"presult"}}],[11,"description","","",113,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",114,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",114,{"inputs":[{"name":"cursor"}],"output":{"generics":["ne"],"name":"presult"}}],[11,"description","","",114,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",115,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",115,{"inputs":[{"name":"cursor"}],"output":{"generics":["or"],"name":"presult"}}],[11,"description","","",115,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",116,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",116,{"inputs":[{"name":"cursor"}],"output":{"generics":["oreq"],"name":"presult"}}],[11,"description","","",116,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",117,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",117,{"inputs":[{"name":"cursor"}],"output":{"generics":["oror"],"name":"presult"}}],[11,"description","","",117,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",118,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",118,{"inputs":[{"name":"cursor"}],"output":{"generics":["pound"],"name":"presult"}}],[11,"description","","",118,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",119,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",119,{"inputs":[{"name":"cursor"}],"output":{"generics":["question"],"name":"presult"}}],[11,"description","","",119,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",120,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",120,{"inputs":[{"name":"cursor"}],"output":{"generics":["rarrow"],"name":"presult"}}],[11,"description","","",120,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",121,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",121,{"inputs":[{"name":"cursor"}],"output":{"generics":["larrow"],"name":"presult"}}],[11,"description","","",121,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",122,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",122,{"inputs":[{"name":"cursor"}],"output":{"generics":["rem"],"name":"presult"}}],[11,"description","","",122,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",123,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",123,{"inputs":[{"name":"cursor"}],"output":{"generics":["remeq"],"name":"presult"}}],[11,"description","","",123,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",124,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",124,{"inputs":[{"name":"cursor"}],"output":{"generics":["fatarrow"],"name":"presult"}}],[11,"description","","",124,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",125,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",125,{"inputs":[{"name":"cursor"}],"output":{"generics":["semi"],"name":"presult"}}],[11,"description","","",125,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",126,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",126,{"inputs":[{"name":"cursor"}],"output":{"generics":["shl"],"name":"presult"}}],[11,"description","","",126,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",127,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",127,{"inputs":[{"name":"cursor"}],"output":{"generics":["shleq"],"name":"presult"}}],[11,"description","","",127,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",128,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",128,{"inputs":[{"name":"cursor"}],"output":{"generics":["shr"],"name":"presult"}}],[11,"description","","",128,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",129,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",129,{"inputs":[{"name":"cursor"}],"output":{"generics":["shreq"],"name":"presult"}}],[11,"description","","",129,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",130,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",130,{"inputs":[{"name":"cursor"}],"output":{"generics":["star"],"name":"presult"}}],[11,"description","","",130,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",131,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",131,{"inputs":[{"name":"cursor"}],"output":{"generics":["sub"],"name":"presult"}}],[11,"description","","",131,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",132,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",132,{"inputs":[{"name":"cursor"}],"output":{"generics":["subeq"],"name":"presult"}}],[11,"description","","",132,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"brace"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",133,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",133,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",133,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"bracket"}}],[11,"default","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",134,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",134,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",134,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"paren"}}],[11,"default","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",135,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",135,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",135,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"default","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",136,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",136,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",136,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"as"}}],[11,"default","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",137,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",137,{"inputs":[{"name":"cursor"}],"output":{"generics":["as"],"name":"presult"}}],[11,"description","","",137,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",137,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"auto"}}],[11,"default","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",138,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",138,{"inputs":[{"name":"cursor"}],"output":{"generics":["auto"],"name":"presult"}}],[11,"description","","",138,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",138,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",139,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",139,{"inputs":[{"name":"cursor"}],"output":{"generics":["box"],"name":"presult"}}],[11,"description","","",139,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",139,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"default","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",140,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",140,{"inputs":[{"name":"cursor"}],"output":{"generics":["break"],"name":"presult"}}],[11,"description","","",140,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",140,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"capself"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",141,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",141,{"inputs":[{"name":"cursor"}],"output":{"generics":["capself"],"name":"presult"}}],[11,"description","","",141,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",141,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"catch"}}],[11,"default","","",142,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",142,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",142,{"inputs":[{"name":"cursor"}],"output":{"generics":["catch"],"name":"presult"}}],[11,"description","","",142,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",142,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"default","","",143,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",143,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",143,{"inputs":[{"name":"cursor"}],"output":{"generics":["const"],"name":"presult"}}],[11,"description","","",143,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",143,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"continue"}}],[11,"default","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",144,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",144,{"inputs":[{"name":"cursor"}],"output":{"generics":["continue"],"name":"presult"}}],[11,"description","","",144,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",144,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",145,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",145,{"inputs":[{"name":"cursor"}],"output":{"generics":["crate"],"name":"presult"}}],[11,"description","","",145,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",145,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"default","","",146,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",146,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",146,{"inputs":[{"name":"cursor"}],"output":{"generics":["default"],"name":"presult"}}],[11,"description","","",146,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",146,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"do"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",147,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",147,{"inputs":[{"name":"cursor"}],"output":{"generics":["do"],"name":"presult"}}],[11,"description","","",147,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",147,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"dyn"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",148,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",148,{"inputs":[{"name":"cursor"}],"output":{"generics":["dyn"],"name":"presult"}}],[11,"description","","",148,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",148,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"else"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",149,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",149,{"inputs":[{"name":"cursor"}],"output":{"generics":["else"],"name":"presult"}}],[11,"description","","",149,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",149,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",150,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",150,{"inputs":[{"name":"cursor"}],"output":{"generics":["enum"],"name":"presult"}}],[11,"description","","",150,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",150,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"extern"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",151,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",151,{"inputs":[{"name":"cursor"}],"output":{"generics":["extern"],"name":"presult"}}],[11,"description","","",151,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",151,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"fn"}}],[11,"default","","",152,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",152,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",152,{"inputs":[{"name":"cursor"}],"output":{"generics":["fn"],"name":"presult"}}],[11,"description","","",152,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",152,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"for"}}],[11,"default","","",153,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",153,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",153,{"inputs":[{"name":"cursor"}],"output":{"generics":["for"],"name":"presult"}}],[11,"description","","",153,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",153,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"if"}}],[11,"default","","",154,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",154,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",154,{"inputs":[{"name":"cursor"}],"output":{"generics":["if"],"name":"presult"}}],[11,"description","","",154,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",154,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"default","","",155,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",155,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",155,{"inputs":[{"name":"cursor"}],"output":{"generics":["impl"],"name":"presult"}}],[11,"description","","",155,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",155,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"in"}}],[11,"default","","",156,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",156,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",156,{"inputs":[{"name":"cursor"}],"output":{"generics":["in"],"name":"presult"}}],[11,"description","","",156,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",156,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"let"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",157,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",157,{"inputs":[{"name":"cursor"}],"output":{"generics":["let"],"name":"presult"}}],[11,"description","","",157,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",157,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"loop"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",158,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",158,{"inputs":[{"name":"cursor"}],"output":{"generics":["loop"],"name":"presult"}}],[11,"description","","",158,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",158,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",159,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",159,{"inputs":[{"name":"cursor"}],"output":{"generics":["macro"],"name":"presult"}}],[11,"description","","",159,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",159,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",160,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",160,{"inputs":[{"name":"cursor"}],"output":{"generics":["match"],"name":"presult"}}],[11,"description","","",160,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",160,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",161,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",161,{"inputs":[{"name":"cursor"}],"output":{"generics":["mod"],"name":"presult"}}],[11,"description","","",161,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",161,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"default","","",162,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",162,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",162,{"inputs":[{"name":"cursor"}],"output":{"generics":["move"],"name":"presult"}}],[11,"description","","",162,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",162,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"mut"}}],[11,"default","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",163,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",163,{"inputs":[{"name":"cursor"}],"output":{"generics":["mut"],"name":"presult"}}],[11,"description","","",163,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",163,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"pub"}}],[11,"default","","",164,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",164,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",164,{"inputs":[{"name":"cursor"}],"output":{"generics":["pub"],"name":"presult"}}],[11,"description","","",164,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",164,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",165,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",165,{"inputs":[{"name":"cursor"}],"output":{"generics":["ref"],"name":"presult"}}],[11,"description","","",165,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",165,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"return"}}],[11,"default","","",166,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",166,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",166,{"inputs":[{"name":"cursor"}],"output":{"generics":["return"],"name":"presult"}}],[11,"description","","",166,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",166,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"self_"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",167,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",167,{"inputs":[{"name":"cursor"}],"output":{"generics":["self_"],"name":"presult"}}],[11,"description","","",167,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",167,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"default","","",168,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",168,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",168,{"inputs":[{"name":"cursor"}],"output":{"generics":["static"],"name":"presult"}}],[11,"description","","",168,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",168,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"default","","",169,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",169,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",169,{"inputs":[{"name":"cursor"}],"output":{"generics":["struct"],"name":"presult"}}],[11,"description","","",169,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",169,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"super"}}],[11,"default","","",170,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",170,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",170,{"inputs":[{"name":"cursor"}],"output":{"generics":["super"],"name":"presult"}}],[11,"description","","",170,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",170,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"trait"}}],[11,"default","","",171,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",171,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",171,{"inputs":[{"name":"cursor"}],"output":{"generics":["trait"],"name":"presult"}}],[11,"description","","",171,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",171,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"default","","",172,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",172,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",172,{"inputs":[{"name":"cursor"}],"output":{"generics":["type"],"name":"presult"}}],[11,"description","","",172,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",172,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"default","","",173,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",173,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",173,{"inputs":[{"name":"cursor"}],"output":{"generics":["union"],"name":"presult"}}],[11,"description","","",173,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",173,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"unsafe"}}],[11,"default","","",174,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",174,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",174,{"inputs":[{"name":"cursor"}],"output":{"generics":["unsafe"],"name":"presult"}}],[11,"description","","",174,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",174,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"default","","",175,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",175,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",175,{"inputs":[{"name":"cursor"}],"output":{"generics":["use"],"name":"presult"}}],[11,"description","","",175,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",175,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"where"}}],[11,"default","","",176,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",176,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",176,{"inputs":[{"name":"cursor"}],"output":{"generics":["where"],"name":"presult"}}],[11,"description","","",176,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",176,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"while"}}],[11,"default","","",177,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",177,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",177,{"inputs":[{"name":"cursor"}],"output":{"generics":["while"],"name":"presult"}}],[11,"description","","",177,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",177,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"yield"}}],[11,"default","","",178,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",178,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",178,{"inputs":[{"name":"cursor"}],"output":{"generics":["yield"],"name":"presult"}}],[11,"description","","",178,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",178,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"from","syn","",179,{"inputs":[{"name":"self_"}],"output":{"name":"ident"}}],[11,"from","","",179,{"inputs":[{"name":"capself"}],"output":{"name":"ident"}}],[11,"from","","",179,{"inputs":[{"name":"super"}],"output":{"name":"ident"}}],[11,"from","","",179,{"inputs":[{"name":"crate"}],"output":{"name":"ident"}}],[11,"parse_inner","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_outer","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"inputs":[{"name":"self"}],"output":{"generics":["meta"],"name":"option"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"from","","",63,{"inputs":[{"name":"ident"}],"output":{"name":"meta"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"metalist"}}],[11,"from","","",63,{"inputs":[{"name":"metalist"}],"output":{"name":"meta"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"metanamevalue"}}],[11,"from","","",63,{"inputs":[{"name":"metanamevalue"}],"output":{"name":"meta"}}],[11,"to_tokens","","",63,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"name","","Returns the identifier that begins this structured meta item.",63,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"nestedmeta"}}],[11,"from","","",64,{"inputs":[{"name":"meta"}],"output":{"name":"nestedmeta"}}],[11,"from","","",64,{"inputs":[{"name":"lit"}],"output":{"name":"nestedmeta"}}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",6,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",6,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",4,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",5,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_named","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_unnamed","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",66,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",66,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldsnamed"}}],[11,"from","","",65,{"inputs":[{"name":"fieldsnamed"}],"output":{"name":"fields"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fieldsunnamed"}}],[11,"from","","",65,{"inputs":[{"name":"fieldsunnamed"}],"output":{"name":"fields"}}],[11,"to_tokens","","",65,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",65,{"inputs":[{"name":"self"}],"output":{"generics":["field"],"name":"iter"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vispublic"}}],[11,"from","","",66,{"inputs":[{"name":"vispublic"}],"output":{"name":"visibility"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"viscrate"}}],[11,"from","","",66,{"inputs":[{"name":"viscrate"}],"output":{"name":"visibility"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"visrestricted"}}],[11,"from","","",66,{"inputs":[{"name":"visrestricted"}],"output":{"name":"visibility"}}],[11,"to_tokens","","",66,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",67,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",67,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",14,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",14,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",15,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",15,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",16,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",16,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",68,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"exprbox"}}],[11,"from","","",67,{"inputs":[{"name":"exprbox"}],"output":{"name":"expr"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"exprinplace"}}],[11,"from","","",67,{"inputs":[{"name":"exprinplace"}],"output":{"name":"expr"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"exprarray"}}],[11,"from","","",67,{"inputs":[{"name":"exprarray"}],"output":{"name":"expr"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"exprcall"}}],[11,"from","","",67,{"inputs":[{"name":"exprcall"}],"output":{"name":"expr"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"exprmethodcall"}}],[11,"from","","",67,{"inputs":[{"name":"exprmethodcall"}],"output":{"name":"expr"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"exprtuple"}}],[11,"from","","",67,{"inputs":[{"name":"exprtuple"}],"output":{"name":"expr"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"exprbinary"}}],[11,"from","","",67,{"inputs":[{"name":"exprbinary"}],"output":{"name":"expr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"exprunary"}}],[11,"from","","",67,{"inputs":[{"name":"exprunary"}],"output":{"name":"expr"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"exprlit"}}],[11,"from","","",67,{"inputs":[{"name":"exprlit"}],"output":{"name":"expr"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exprcast"}}],[11,"from","","",67,{"inputs":[{"name":"exprcast"}],"output":{"name":"expr"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"exprtype"}}],[11,"from","","",67,{"inputs":[{"name":"exprtype"}],"output":{"name":"expr"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"exprif"}}],[11,"from","","",67,{"inputs":[{"name":"exprif"}],"output":{"name":"expr"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"expriflet"}}],[11,"from","","",67,{"inputs":[{"name":"expriflet"}],"output":{"name":"expr"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"exprwhile"}}],[11,"from","","",67,{"inputs":[{"name":"exprwhile"}],"output":{"name":"expr"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"exprwhilelet"}}],[11,"from","","",67,{"inputs":[{"name":"exprwhilelet"}],"output":{"name":"expr"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"exprforloop"}}],[11,"from","","",67,{"inputs":[{"name":"exprforloop"}],"output":{"name":"expr"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"exprloop"}}],[11,"from","","",67,{"inputs":[{"name":"exprloop"}],"output":{"name":"expr"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"exprmatch"}}],[11,"from","","",67,{"inputs":[{"name":"exprmatch"}],"output":{"name":"expr"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"exprclosure"}}],[11,"from","","",67,{"inputs":[{"name":"exprclosure"}],"output":{"name":"expr"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"exprunsafe"}}],[11,"from","","",67,{"inputs":[{"name":"exprunsafe"}],"output":{"name":"expr"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"exprblock"}}],[11,"from","","",67,{"inputs":[{"name":"exprblock"}],"output":{"name":"expr"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"exprassign"}}],[11,"from","","",67,{"inputs":[{"name":"exprassign"}],"output":{"name":"expr"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"exprassignop"}}],[11,"from","","",67,{"inputs":[{"name":"exprassignop"}],"output":{"name":"expr"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"exprfield"}}],[11,"from","","",67,{"inputs":[{"name":"exprfield"}],"output":{"name":"expr"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exprindex"}}],[11,"from","","",67,{"inputs":[{"name":"exprindex"}],"output":{"name":"expr"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"exprrange"}}],[11,"from","","",67,{"inputs":[{"name":"exprrange"}],"output":{"name":"expr"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"exprpath"}}],[11,"from","","",67,{"inputs":[{"name":"exprpath"}],"output":{"name":"expr"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"exprreference"}}],[11,"from","","",67,{"inputs":[{"name":"exprreference"}],"output":{"name":"expr"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"exprbreak"}}],[11,"from","","",67,{"inputs":[{"name":"exprbreak"}],"output":{"name":"expr"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"exprcontinue"}}],[11,"from","","",67,{"inputs":[{"name":"exprcontinue"}],"output":{"name":"expr"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"exprreturn"}}],[11,"from","","",67,{"inputs":[{"name":"exprreturn"}],"output":{"name":"expr"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"exprmacro"}}],[11,"from","","",67,{"inputs":[{"name":"exprmacro"}],"output":{"name":"expr"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"exprstruct"}}],[11,"from","","",67,{"inputs":[{"name":"exprstruct"}],"output":{"name":"expr"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"exprrepeat"}}],[11,"from","","",67,{"inputs":[{"name":"exprrepeat"}],"output":{"name":"expr"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"exprparen"}}],[11,"from","","",67,{"inputs":[{"name":"exprparen"}],"output":{"name":"expr"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"exprgroup"}}],[11,"from","","",67,{"inputs":[{"name":"exprgroup"}],"output":{"name":"expr"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"exprtry"}}],[11,"from","","",67,{"inputs":[{"name":"exprtry"}],"output":{"name":"expr"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"exprcatch"}}],[11,"from","","",67,{"inputs":[{"name":"exprcatch"}],"output":{"name":"expr"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"expryield"}}],[11,"from","","",67,{"inputs":[{"name":"expryield"}],"output":{"name":"expr"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"exprverbatim"}}],[11,"from","","",67,{"inputs":[{"name":"exprverbatim"}],"output":{"name":"expr"}}],[11,"to_tokens","","",67,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"member"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"index"}}],[11,"parse","","",22,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",22,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",69,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",69,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",23,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",23,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",20,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",20,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",28,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",28,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",71,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",71,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",27,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",27,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",70,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",70,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",21,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",21,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",29,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",29,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",72,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",72,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",211,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",212,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",213,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"default","","",22,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"genericparam"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"typeparam"}}],[11,"from","","",69,{"inputs":[{"name":"typeparam"}],"output":{"name":"genericparam"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"from","","",69,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"genericparam"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"constparam"}}],[11,"from","","",69,{"inputs":[{"name":"constparam"}],"output":{"name":"genericparam"}}],[11,"to_tokens","","",69,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",22,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"implgenerics"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"typegenerics"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",22,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",212,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"boundlifetimes"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"boundlifetimes"}}],[11,"new","","",23,{"inputs":[{"name":"lifetime"}],"output":{"name":"self"}}],[11,"from","","",28,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"typeparambound"}}],[11,"from","","",71,{"inputs":[{"name":"traitbound"}],"output":{"name":"typeparambound"}}],[11,"from","","",71,{"inputs":[{"name":"lifetime"}],"output":{"name":"typeparambound"}}],[11,"to_tokens","","",71,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"traitbound"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"predicatetype"}}],[11,"from","","",72,{"inputs":[{"name":"predicatetype"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"predicatelifetime"}}],[11,"from","","",72,{"inputs":[{"name":"predicatelifetime"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"predicateeq"}}],[11,"from","","",72,{"inputs":[{"name":"predicateeq"}],"output":{"name":"wherepredicate"}}],[11,"to_tokens","","",72,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",30,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",30,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"new","","",30,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"hash","","",30,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"parse","","",75,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",75,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",214,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",214,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",215,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",215,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",216,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",216,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",217,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",217,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",218,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",218,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",219,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",219,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",31,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",31,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",214,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",215,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",216,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",217,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",218,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",219,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",75,{"inputs":[{"name":"literal"}],"output":{"name":"self"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"litstr"}}],[11,"from","","",75,{"inputs":[{"name":"litstr"}],"output":{"name":"lit"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"litbytestr"}}],[11,"from","","",75,{"inputs":[{"name":"litbytestr"}],"output":{"name":"lit"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"litbyte"}}],[11,"from","","",75,{"inputs":[{"name":"litbyte"}],"output":{"name":"lit"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"litchar"}}],[11,"from","","",75,{"inputs":[{"name":"litchar"}],"output":{"name":"lit"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"litint"}}],[11,"from","","",75,{"inputs":[{"name":"litint"}],"output":{"name":"lit"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"litfloat"}}],[11,"from","","",75,{"inputs":[{"name":"litfloat"}],"output":{"name":"lit"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"litbool"}}],[11,"from","","",75,{"inputs":[{"name":"litbool"}],"output":{"name":"lit"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"litverbatim"}}],[11,"from","","",75,{"inputs":[{"name":"litverbatim"}],"output":{"name":"lit"}}],[11,"to_tokens","","",75,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"new","","",214,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",214,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",214,{"inputs":[{"name":"self"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"span","","",214,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",215,null],[11,"value","","",215,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"span","","",215,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",215,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",216,{"inputs":[{"name":"u8"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",216,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"span","","",216,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",216,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",217,{"inputs":[{"name":"char"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",217,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"span","","",217,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",217,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",218,{"inputs":[{"name":"u64"},{"name":"intsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",218,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"suffix","","",218,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"span","","",218,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",218,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",219,{"inputs":[{"name":"f64"},{"name":"floatsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",219,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"suffix","","",219,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"span","","",219,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",219,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"span","","",32,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",32,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"parse","","",33,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",33,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"macrodelimiter"}}],[11,"parse","","",37,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",37,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"datastruct"}}],[11,"from","","",78,{"inputs":[{"name":"datastruct"}],"output":{"name":"data"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dataenum"}}],[11,"from","","",78,{"inputs":[{"name":"dataenum"}],"output":{"name":"data"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dataunion"}}],[11,"from","","",78,{"inputs":[{"name":"dataunion"}],"output":{"name":"data"}}],[11,"parse_binop","","",79,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",80,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",80,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",80,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"parse","","",83,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",83,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",83,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",51,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",51,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",40,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",40,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",49,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",49,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",50,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",50,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",41,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",41,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",46,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",46,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",44,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",44,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",53,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",53,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",45,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",45,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",48,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",48,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",82,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",82,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",82,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",52,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",52,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",52,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",43,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",43,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",42,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",42,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",47,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",39,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",39,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",81,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",81,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",38,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",38,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",81,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"typeslice"}}],[11,"from","","",83,{"inputs":[{"name":"typeslice"}],"output":{"name":"type"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"typearray"}}],[11,"from","","",83,{"inputs":[{"name":"typearray"}],"output":{"name":"type"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"typeptr"}}],[11,"from","","",83,{"inputs":[{"name":"typeptr"}],"output":{"name":"type"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"typereference"}}],[11,"from","","",83,{"inputs":[{"name":"typereference"}],"output":{"name":"type"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"typebarefn"}}],[11,"from","","",83,{"inputs":[{"name":"typebarefn"}],"output":{"name":"type"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"typenever"}}],[11,"from","","",83,{"inputs":[{"name":"typenever"}],"output":{"name":"type"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"typetuple"}}],[11,"from","","",83,{"inputs":[{"name":"typetuple"}],"output":{"name":"type"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"typepath"}}],[11,"from","","",83,{"inputs":[{"name":"typepath"}],"output":{"name":"type"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"typetraitobject"}}],[11,"from","","",83,{"inputs":[{"name":"typetraitobject"}],"output":{"name":"type"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"typeimpltrait"}}],[11,"from","","",83,{"inputs":[{"name":"typeimpltrait"}],"output":{"name":"type"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"typeparen"}}],[11,"from","","",83,{"inputs":[{"name":"typeparen"}],"output":{"name":"type"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"typegroup"}}],[11,"from","","",83,{"inputs":[{"name":"typegroup"}],"output":{"name":"type"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"typeinfer"}}],[11,"from","","",83,{"inputs":[{"name":"typeinfer"}],"output":{"name":"type"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"typemacro"}}],[11,"from","","",83,{"inputs":[{"name":"typemacro"}],"output":{"name":"type"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"typeverbatim"}}],[11,"from","","",83,{"inputs":[{"name":"typeverbatim"}],"output":{"name":"type"}}],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"barefnargname"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"returntype"}}],[11,"parse","","",59,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",59,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",84,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",56,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",56,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",58,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",58,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",60,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",60,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",57,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",57,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_mod_style","","",59,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",59,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",85,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",84,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"global","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"pathtokens"}}],[11,"from","","",59,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"from","","",60,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"patharguments"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"genericargument"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",220,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",221,{"inputs":[],"output":{"name":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",221,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",221,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"option"}}],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",221,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",221,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",222,null],[13,"End","","",222,null],[11,"to_tokens","","",223,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",222,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",223,{"inputs":[],"output":{"name":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"insert","","Inserts an element at position `index`.",223,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",223,null],[11,"default","","",223,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",224,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",225,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",226,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",227,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",228,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",229,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,null],[11,"index","","",223,null],[11,"index_mut","","",223,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[0,"ext","","Extension traits that are made available within the `call!` parser.",null,null],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",null,null],[10,"parse_any","","Parses any identifier including keywords.",230,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_any","syn","",179,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[6,"PResult","syn::synom","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",231,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","A short name of the type being parsed.",231,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",232,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",232,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",232,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",232,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","syn","",179,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",179,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",233,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":null}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":null}],[5,"visit_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":null}],[5,"visit_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":null}],[5,"visit_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":null}],[5,"visit_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":null}],[5,"visit_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":null}],[5,"visit_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":null}],[5,"visit_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":null}],[5,"visit_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":null}],[5,"visit_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":null}],[5,"visit_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":null}],[5,"visit_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":null}],[5,"visit_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":null}],[5,"visit_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"visit_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"visit_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":null}],[5,"visit_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":null}],[5,"visit_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":null}],[5,"visit_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":null}],[5,"visit_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":null}],[5,"visit_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":null}],[5,"visit_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":null}],[5,"visit_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":null}],[5,"visit_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":null}],[5,"visit_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"visit_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":null}],[5,"visit_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":null}],[5,"visit_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":null}],[5,"visit_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":null}],[5,"visit_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":null}],[5,"visit_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"visit_ident","","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":null}],[5,"visit_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":null}],[5,"visit_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"visit_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"visit_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":null}],[5,"visit_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":null}],[5,"visit_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":null}],[5,"visit_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":null}],[5,"visit_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":null}],[5,"visit_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":null}],[5,"visit_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":null}],[5,"visit_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":null}],[5,"visit_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":null}],[5,"visit_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":null}],[5,"visit_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":null}],[5,"visit_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":null}],[5,"visit_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":null}],[5,"visit_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":null}],[5,"visit_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":null}],[5,"visit_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":null}],[5,"visit_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":null}],[5,"visit_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"visit_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":null}],[5,"visit_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"visit_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":null}],[5,"visit_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":null}],[5,"visit_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":null}],[5,"visit_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":null}],[5,"visit_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":null}],[5,"visit_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":null}],[5,"visit_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":null}],[5,"visit_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":null}],[5,"visit_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":null}],[5,"visit_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":null}],[5,"visit_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":null}],[5,"visit_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":null}],[5,"visit_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":null}],[5,"visit_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":null}],[5,"visit_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":null}],[5,"visit_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":null}],[5,"visit_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":null}],[5,"visit_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":null}],[5,"visit_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":null}],[5,"visit_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":null}],[5,"visit_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":null}],[5,"visit_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":null}],[5,"visit_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":null}],[5,"visit_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":null}],[5,"visit_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":null}],[5,"visit_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":null}],[5,"visit_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":null}],[5,"visit_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":null}],[5,"visit_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":null}],[5,"visit_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":null}],[5,"visit_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":null}],[5,"visit_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"visit_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":null}],[5,"visit_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",234,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_attr_style","","",234,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",234,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",234,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",234,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",234,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",234,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_bound_lifetimes","","",234,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",234,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",234,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",234,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",234,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",234,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",234,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",234,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_binary","","",234,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_call","","",234,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",234,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_index","","",234,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",234,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_paren","","",234,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",234,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_unary","","",234,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_field","","",234,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_fields","","",234,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",234,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",234,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_generic_argument","","",234,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_param","","",234,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",234,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",234,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_index","","",234,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",234,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",234,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",234,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",234,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",234,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",234,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",234,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",234,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",234,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_macro","","",234,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",234,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",234,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",234,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",234,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",234,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_nested_meta","","",234,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_path","","",234,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",234,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",234,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",234,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",234,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",234,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_return_type","","",234,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",234,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_trait_bound","","",234,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",234,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_type","","",234,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",234,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",234,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",234,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",234,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",234,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",234,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",234,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",234,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",234,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",234,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",234,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",234,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",234,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",234,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",234,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",234,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",234,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_variant","","",234,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",234,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",234,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",234,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",234,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",234,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",234,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[11,"fmt","syn::synom","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",235,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"custom_keyword","","Parse the given word as a keyword.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",179,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"ident"}}],[11,"span","","Returns the span of this `Ident`.",179,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",179,null],[11,"hash","","",179,null],[11,"partial_cmp","","",179,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"cmp","","",179,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"to_tokens","","",179,null],[11,"visit_abi","syn::visit","",234,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_attr_style","","",234,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",234,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",234,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",234,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",234,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",234,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_bound_lifetimes","","",234,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",234,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",234,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",234,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",234,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",234,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",234,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",234,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_binary","","",234,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_call","","",234,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",234,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_index","","",234,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",234,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_paren","","",234,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",234,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_unary","","",234,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_field","","",234,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_fields","","",234,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",234,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",234,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_generic_argument","","",234,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_param","","",234,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",234,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",234,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_index","","",234,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",234,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",234,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",234,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",234,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",234,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",234,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",234,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",234,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",234,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_macro","","",234,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",234,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",234,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",234,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",234,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",234,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_nested_meta","","",234,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_path","","",234,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",234,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",234,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",234,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",234,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",234,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_return_type","","",234,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",234,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_trait_bound","","",234,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",234,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_type","","",234,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",234,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",234,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",234,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",234,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",234,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",234,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",234,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",234,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",234,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",234,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",234,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",234,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",234,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",234,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",234,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",234,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",234,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_variant","","",234,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",234,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",234,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",234,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",234,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",234,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",234,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprField"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["take"] = {"doc":"Cell allowing the inner value to be consumed without a mutable reference.","items":[[3,"Take","take","Cell allowing the inner value to be consumed without a mutable reference.",null,null],[11,"new","","Create and return a new `Take` value containing the given inner value.",0,{"inputs":[{"name":"t"}],"output":{"name":"take"}}],[11,"take","","Consume and return the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Take"]]};
searchIndex["tempdir"] = {"doc":"Temporary directories of files.","items":[[3,"TempDir","tempdir","A directory in the filesystem that is automatically deleted when it goes out of scope.",null,null],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"inputs":[{"name":"str"}],"output":{"generics":["tempdir"],"name":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["tempdir"],"name":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","Unwraps the [`Path`] contained in the `TempDir` and returns it. This destroys the `TempDir` without deleting the directory represented by the returned `Path`.",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"TempDir"]]};
searchIndex["textwrap"] = {"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",null,null],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",null,null],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",null,null],[12,"width","","The width in columns at which the text will be wrapped.",0,null],[12,"initial_indent","","Indentation used for the first line of output.",0,null],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,null],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,null],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,null],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",null,null],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",null,null],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["cow"],"name":"vec"}}],[5,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["hyphensplitter"],"name":"intowrapiter"}}],[5,"indent","","Add prefix to each non-empty line.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[5,"dedent","","Removes common leading whitespace from each line.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[8,"WordSplitter","","An interface for splitting words.",null,null],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"nohyphenation"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphensplitter"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapper"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,{"inputs":[{"name":"usize"}],"output":{"generics":["hyphensplitter"],"name":"wrapper"}}],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"wrapper"}}],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"wrapper"}}],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cow"],"name":"vec"}}],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapiter"}}],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"intowrapiter"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]};
searchIndex["threadpool"] = {"doc":"A thread pool used to execute functions in parallel.","items":[[3,"Builder","threadpool","[`ThreadPool`] factory, which can be used in order to configure the properties of the [`ThreadPool`].",null,null],[3,"ThreadPool","","Abstraction of a thread pool for basic parallelism.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","Initiate a new [`Builder`].",0,{"inputs":[],"output":{"name":"builder"}}],[11,"num_threads","","Set the maximum number of worker-threads that will be alive at any given moment by the built [`ThreadPool`]. If not specified, defaults the number of threads to the number of CPUs.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"thread_name","","Set the thread name for each of the threads spawned by the built [`ThreadPool`]. If not specified, threads spawned by the thread pool will be unnamed.",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"builder"}}],[11,"thread_stack_size","","Set the stack size (in bytes) for each of the threads spawned by the built [`ThreadPool`]. If not specified, threads spawned by the threadpool will have a stack size [as specified in the `std::thread` documentation][thread].",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"build","","Finalize the [`Builder`] and build the [`ThreadPool`].",0,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"new","","Creates a new thread pool capable of executing `num_threads` number of jobs concurrently.",1,{"inputs":[{"name":"usize"}],"output":{"name":"threadpool"}}],[11,"with_name","","Creates a new thread pool capable of executing `num_threads` number of jobs concurrently. Each thread will have the [name][thread name] `name`.",1,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"threadpool"}}],[11,"new_with_name","","Deprecated: Use `ThreadPool::with_name`",1,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"threadpool"}}],[11,"execute","","Executes the function `job` on a thread in the pool.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"queued_count","","Returns the number of jobs waiting to executed in the pool.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"active_count","","Returns the number of currently active threads.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_count","","Returns the maximum number of threads the pool will execute concurrently.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"panic_count","","Returns the number of panicked threads over the lifetime of the pool.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_threads","","Deprecated: Use `ThreadPool::set_num_threads`",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"set_num_threads","","Sets the number of worker-threads to use as `num_threads`. Can be used to change the threadpool size during runtime. Will not abort already running or waiting threads.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"join","","Block the current thread until all jobs in the pool have been executed.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","Cloning a pool will create a new handle to the pool. The behavior is similar to Arc.",1,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","Check if you are working with the same pool",1,{"inputs":[{"name":"self"},{"name":"threadpool"}],"output":{"name":"bool"}}]],"paths":[[3,"Builder"],[3,"ThreadPool"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"generics":["stdduration","outofrangeerror"],"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["tokio"] = {"doc":"A runtime for writing reliable, asynchronous, and slim applications.","items":[[0,"executor","tokio","Task execution utilities.",null,null],[8,"Executor","tokio::executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",0,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",0,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[3,"Spawn","","Return value from the `spawn` function.",null,null],[5,"spawn","","Spawns a future on the default executor.",null,{"inputs":[{"name":"f"}],"output":{"name":"spawn"}}],[0,"current_thread","","Execute many tasks concurrently on the current thread.",null,null],[3,"CurrentThread","tokio::executor::current_thread","Executes tasks on the current thread",null,null],[3,"TaskExecutor","","Executes futures on the current thread.",null,null],[3,"Turn","","Returned by the `turn` function.",null,null],[3,"Entered","","A `CurrentThread` instance bound to a supplied execution conext.",null,null],[3,"RunError","","Error returned by the `run` function.",null,null],[3,"RunTimeoutError","","Error returned by the `run_timeout` function.",null,null],[3,"TurnError","","Error returned by the `turn` function.",null,null],[3,"BlockError","","Error returned by the `block_on` function.",null,null],[5,"block_on_all","","Run the executor bootstrapping the execution with the provided future.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"spawn","","Executes a future on the current thread.",null,{"inputs":[{"name":"f"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_polled","","`true` if any futures were polled at all and `false` otherwise.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of `CurrentThread`.",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_park","","Create a new instance of `CurrentThread` backed by the given park handle.",7,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"is_idle","","Returns `true` if the executor is currently idle.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spawn","","Spawn the future on the executor.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",7,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["runtimeouterror"],"name":"result"}}],[11,"turn","","Perform a single iteration of the event loop.",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","turnerror"],"name":"result"}}],[11,"enter","","Bind `CurrentThread` instance with an execution context.",7,{"inputs":[{"name":"self"},{"name":"enter"}],"output":{"name":"entered"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",7,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",7,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"spawn","","",7,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn the future on the executor.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",8,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["runtimeouterror"],"name":"result"}}],[11,"turn","","Perform a single iteration of the event loop.",8,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","turnerror"],"name":"result"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",8,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",8,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","Returns an executor that executes futures on the current thread.",1,{"inputs":[],"output":{"name":"taskexecutor"}}],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",1,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",1,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"is_timeout","","Returns `true` if the error was caused by the operation timeing out.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"entererror"}],"output":{"name":"self"}}],[11,"into_inner","","Returns the error yielded by the future being blocked on",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"entererror"}],"output":{"name":"self"}}],[0,"thread_pool","tokio::executor","Maintains a pool of threads across which the set of spawned tasks are executed.",null,null],[3,"Builder","tokio::executor::thread_pool","Builds a thread pool with custom configuration values.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",null,null],[11,"fmt","tokio::executor","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_future","","",9,null],[0,"fs","tokio","Asynchronous filesystem manipulation operations.",null,null],[0,"file","tokio::fs","Types for working with [`File`].",null,null],[3,"File","tokio::fs::file","A reference to an open file on the filesystem.",null,null],[3,"CreateFuture","","Future returned by `File::create` and resolves to a `File` instance.",null,null],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",null,null],[3,"File","tokio::fs","A reference to an open file on the filesystem.",null,null],[0,"net","tokio","TCP/UDP bindings for `tokio`.",null,null],[3,"TcpStream","tokio::net","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[0,"reactor","tokio","Event loop that drives Tokio I/O resources.",null,null],[3,"Reactor","tokio::reactor","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Background","","Handle to the reactor running on a background thread.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",null,null],[0,"runtime","tokio","A batteries included runtime for applications using Tokio.",null,null],[3,"Builder","tokio::runtime","Builds Tokio Runtime with custom configuration values.",null,null],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",null,null],[3,"TaskExecutor","","Executes futures on the runtime",null,null],[3,"Runtime","","Handle to the Tokio runtime.",null,null],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",null,{"inputs":[{"name":"f"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new runtime builder initialized with default configuration values.",10,{"inputs":[],"output":{"name":"builder"}}],[11,"threadpool_builder","","Set builder to set up the thread pool instance.",10,{"inputs":[{"name":"self"},{"name":"threadpoolbuilder"}],"output":{"name":"self"}}],[11,"build","","Create the configured `Runtime`.",10,{"inputs":[{"name":"self"}],"output":{"generics":["runtime"],"name":"result"}}],[0,"current_thread","","A runtime implementation that runs everything on the current thread.",null,null],[3,"Runtime","tokio::runtime::current_thread","Single-threaded runtime provides a way to start reactor and executor on the current thread.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new runtime initialized with default configuration values.",11,{"inputs":[],"output":{"generics":["runtime"],"name":"result"}}],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",11,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"poll","tokio::runtime","",12,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"execute","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"spawn","","",13,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new runtime instance with default configuration values.",14,{"inputs":[],"output":{"name":"result"}}],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",14,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"executor","","Return a handle to the runtime's executor.",14,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",14,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",14,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[0,"timer","tokio","Utilities for tracking time.",null,null],[3,"Deadline","tokio::timer","Allows a given `Future` to execute until the specified deadline.",null,null],[3,"DeadlineError","","Error returned by `Deadline` future.",null,null],[3,"Error","","Errors encountered by the timer implementation.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"Delay","","A future that completes at a specified instant in time.",null,null],[0,"util","tokio","Utilities for working with Tokio.",null,null],[8,"FutureExt","tokio::util","An extension trait for `Future` that provides a variety of convenient combinator functions.",null,null],[11,"deadline","","Creates a new future which allows `self` until `deadline`.",15,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[0,"io","tokio","Asynchronous I/O.",null,null],[8,"AsyncRead","tokio::io","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",16,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",16,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",16,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",16,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",17,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",17,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",17,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",17,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[3,"Stdout","","A handle to the standard output stream of a process.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readuntil"}}],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",18,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",18,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",18,null],[13,"ConnectionReset","","The connection was reset by the remote server.",18,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",18,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",18,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",18,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",18,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",18,null],[13,"AlreadyExists","","An entity already exists, often a file.",18,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",18,null],[13,"InvalidInput","","A parameter was incorrect.",18,null],[13,"InvalidData","","Data not valid for the operation were encountered.",18,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",18,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",18,null],[13,"Interrupted","","This operation was interrupted.",18,null],[13,"Other","","Any I/O error not part of this list.",18,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",18,null],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",19,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",19,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",19,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",19,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",19,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",19,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",20,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",20,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",20,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"prelude","tokio","A \"prelude\" for users of the `tokio` crate.",null,null],[8,"AsyncRead","tokio::prelude","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",16,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",16,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",16,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",16,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",17,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",17,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",17,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",17,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",19,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",19,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",19,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",19,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",19,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",19,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",20,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",20,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",20,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",21,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",21,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",21,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",21,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",21,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",21,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",21,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",21,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[0,"future","","Futures",null,null],[8,"Future","tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",21,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",21,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",21,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",21,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",21,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",21,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",21,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",21,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",21,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",22,null],[16,"Item","","The item that the future may resolve with.",22,null],[16,"Error","","The error that the future may resolve with.",22,null],[10,"into_future","","Consumes this object and produces a future.",22,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",23,null],[16,"Error","","Possible errors during conversion.",23,null],[10,"future_from","","Consume the given value, beginning the conversion.",23,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",25,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",25,null],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Done","","A future representing a value that is immediately ready.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"collect","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Empty","","A future which is never resolved.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",26,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",26,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",27,null],[13,"B","","Second branch of the type",27,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[8,"Stream","tokio::prelude","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",28,null],[16,"Error","","The type of error this stream may generate.",28,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",28,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",28,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",28,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",28,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",28,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",28,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",28,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",28,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",28,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",28,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[0,"stream","","Asynchronous streams",null,null],[0,"futures_unordered","tokio::prelude::stream","An unbounded set of futures.",null,null],[3,"FuturesUnordered","tokio::prelude::stream::futures_unordered","An unbounded set of futures.",null,null],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",null,null],[8,"Stream","tokio::prelude::stream","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",28,null],[16,"Error","","The type of error this stream may generate.",28,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",28,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",28,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",28,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",28,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",28,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",28,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",28,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",28,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",28,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",28,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",28,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",29,null],[12,"1","","",29,null],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",null,null],[3,"FutureSender","","Future returned by `Sender::send`.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"Sender","","The transmission end of a channel which is used to send values.",null,null],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",30,null],[13,"Second","","An item from the second stream",30,null],[13,"Both","","Items from both streams",30,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"FuturesUnordered","","An unbounded set of futures.",null,null],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[8,"Sink","tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",31,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",31,null],[10,"start_send","","Begin the process of sending a value to the sink.",31,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",31,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",31,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",31,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",31,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"fanout","","Fanout items to multiple sinks.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",31,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",31,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",22,null],[16,"Item","","The item that the future may resolve with.",22,null],[16,"Error","","The error that the future may resolve with.",22,null],[10,"into_future","","Consumes this object and produces a future.",22,null],[4,"Async","","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",32,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",32,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",33,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",33,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[0,"task","","Tasks used to drive a future computation",null,null],[3,"Spawn","tokio::prelude::task","Representation of a spawned future/stream.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",34,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",null,null],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",35,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",36,null],[5,"init","","Initialize the `futures` task system.",null,null],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",null,null],[8,"FutureExt","tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",null,null],[11,"deadline","tokio::util","Creates a new future which allows `self` until `deadline`.",15,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"from","tokio::io","",37,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","","",37,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"from","","",37,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"description","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"hash","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"next","tokio::prelude::stream::futures_unordered","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next","tokio::prelude::stream","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","tokio::prelude::future","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","tokio::prelude","",32,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"from","tokio::prelude::future","",42,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[11,"default","tokio::prelude::task","",43,{"inputs":[],"output":{"name":"atomictask"}}],[11,"from_iter","tokio::prelude::stream","",44,{"inputs":[{"name":"t"}],"output":{"name":"futuresunordered"}}],[11,"from_iter","","",45,{"inputs":[{"name":"t"}],"output":{"name":"futuresordered"}}],[11,"start_send","","",46,null],[11,"poll_complete","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",47,null],[11,"poll_complete","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",48,null],[11,"poll_complete","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",49,null],[11,"poll_complete","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",50,null],[11,"poll_complete","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",51,null],[11,"poll_complete","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",52,null],[11,"poll_complete","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",53,null],[11,"poll_complete","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",54,null],[11,"poll_complete","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",55,null],[11,"poll_complete","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",57,null],[11,"poll_complete","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",58,null],[11,"poll_complete","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",60,null],[11,"poll_complete","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",61,null],[11,"poll_complete","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",62,null],[11,"poll_complete","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",63,null],[11,"poll_complete","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",64,null],[11,"poll_complete","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",65,null],[11,"poll_complete","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",66,null],[11,"poll_complete","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",68,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",70,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",72,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",74,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",75,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",82,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",83,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",84,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",85,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",89,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",90,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",95,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",96,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"clone","tokio::prelude::task","",100,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"clone","tokio::prelude","",32,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"clone","tokio::prelude::future","",41,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"clone","tokio::prelude","",33,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"clone","tokio::prelude::task","",101,{"inputs":[{"name":"self"}],"output":{"name":"taskrc"}}],[11,"clone","tokio::prelude::future","",102,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"clone","tokio::prelude::task","",103,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"clone","tokio::prelude::future","",72,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream::futures_unordered","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",123,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",114,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",48,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",121,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",104,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",117,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",116,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"deref","tokio::prelude::future","",41,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"deref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","tokio::prelude::stream","",44,null],[11,"drop","tokio::prelude::future","",72,null],[11,"eq","tokio::prelude","",32,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"eq","tokio::prelude::future","",25,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"eq","tokio::prelude","",33,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"fmt","tokio::prelude::stream","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::io","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",130,null],[11,"flush","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",132,null],[11,"shutdown","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","",130,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"read_buf","","",132,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",134,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",128,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",129,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",135,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",133,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",131,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",126,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","tokio::executor","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"defaultexecutor"}}],[11,"spawn","","",137,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","tokio::fs::file","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::fs","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::io","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::fs::file","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::io","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","tokio::fs","",139,null],[11,"flush","","",139,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","tokio::io","",142,null],[11,"flush","","",142,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",143,null],[11,"flush","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","tokio::fs","",139,null],[11,"read","tokio::io","",140,null],[11,"prepare_uninitialized_buffer","tokio::fs","",139,null],[11,"prepare_uninitialized_buffer","tokio::io","",140,null],[11,"shutdown","","",142,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"shutdown","tokio::fs","",139,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"shutdown","tokio::io","",143,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","tokio::fs::file","",141,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",138,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"drop","tokio::fs","",139,null],[11,"status","tokio::executor::thread_pool","",144,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",144,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"poll","","",145,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"execute","","",144,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"drop","","",146,null],[11,"default","tokio::reactor","",148,{"inputs":[],"output":{"name":"handle"}}],[11,"shutdown","","",149,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"unpark","","",148,null],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"write","","",149,null],[11,"flush","","",149,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",149,null],[11,"drop","","",149,null],[11,"drop","","",151,null],[11,"unpark","","",152,null],[11,"park","","",152,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"park_timeout","","",152,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","tokio::timer","",154,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",155,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",158,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",157,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","","",156,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"as_raw_fd","tokio::net","",159,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",160,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"poll","","",161,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",160,null],[11,"flush","","",160,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",160,null],[11,"shutdown","","",160,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","",160,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"prepare_uninitialized_buffer","","",160,null],[11,"read_buf","","",160,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",162,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"as_raw_fd","","",163,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"start_send","","",164,null],[11,"poll_complete","","",164,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",164,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",165,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",166,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","","",164,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"current","tokio::executor","Returns a handle to the default executor for the current context.",137,{"inputs":[],"output":{"name":"defaultexecutor"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",136,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",136,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","tokio::executor::thread_pool","Returns a new thread pool builder initialized with default configuration values.",147,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"keep_alive","","Set the worker thread keep alive duration",147,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"builder"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",147,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"builder"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"around_worker","","Execute function `f` on each worker thread.",147,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",147,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"before_stop","","Execute function `f` before each thread stops.",147,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"custom_park","","Customize the `park` instance used by each worker thread.",147,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"build","","Create the configured `ThreadPool`.",147,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool",144,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"new","","Create a new `ThreadPool` with default values.",146,{"inputs":[],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",146,null],[11,"sender","","Return a reference to the sender handle",146,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",146,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",146,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown","","Shutdown the pool",146,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",146,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"open","tokio::fs","Attempts to open a file in read-only mode.",139,{"inputs":[{"name":"p"}],"output":{"name":"openfuture"}}],[11,"create","","Opens a file in write-only mode.",139,{"inputs":[{"name":"p"}],"output":{"name":"createfuture"}}],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",139,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",139,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",139,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",139,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_metadata","","Queries metadata about the underlying file.",139,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",139,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",139,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"connect","tokio::net","Create a new TCP stream connected to the specified address.",160,{"inputs":[{"name":"socketaddr"}],"output":{"name":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",160,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream","error"],"name":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",160,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connectfuture"}}],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",160,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",160,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",160,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",160,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",160,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",160,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"generics":["error"],"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",160,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",160,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",160,{"inputs":[{"name":"self"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",160,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",160,{"inputs":[{"name":"self"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",160,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",160,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",160,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",160,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",160,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",160,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",160,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",159,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",159,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",159,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",159,{"inputs":[{"name":"tcplistener"},{"name":"handle"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",159,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",159,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",159,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",159,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",163,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",163,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",163,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",163,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",163,null],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",163,null],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",163,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",163,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",163,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",163,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",163,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",163,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",163,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",163,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",163,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",163,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",163,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",163,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",163,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",163,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",163,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",163,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",163,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",163,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",164,{"inputs":[{"name":"udpsocket"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",164,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",164,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",164,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"new","tokio::reactor","Creates a new event loop, returning any error that happened during the creation.",152,{"inputs":[],"output":{"generics":["reactor","error"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",152,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",152,{"inputs":[{"name":"self"}],"output":{"generics":["setfallbackerror"],"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",152,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","error"],"name":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"background","","Run this reactor on a background thread.",152,{"inputs":[{"name":"self"}],"output":{"generics":["background","error"],"name":"result"}}],[11,"current","","Returns a handle to the current reactor.",148,{"inputs":[],"output":{"name":"handle"}}],[11,"handle","","Returns a reference to the reactor handle.",151,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",151,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",151,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",151,null],[11,"new","","Create a new `Registration`.",153,{"inputs":[],"output":{"name":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",153,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"deregister","","Deregister the I/O resource from the reactor it is associatd with.",153,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",153,{"inputs":[{"name":"self"},{"name":"t"},{"name":"handle"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",153,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"take_read_ready","","Consume any pending read readiness event.",153,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",153,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"take_write_ready","","Consume any pending write readiness event.",153,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",149,{"inputs":[{"name":"e"}],"output":{"name":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",149,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"generics":["pollevented","error"],"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",149,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",149,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",149,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",149,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",149,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",149,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",149,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","tokio::timer","Create a new `Deadline` that completes when `future` completes or when `deadline` is reached.",154,{"inputs":[{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"get_ref","","Gets a reference to the underlying future in this deadline.",154,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying future in this deadline.",154,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this deadline, returning the underlying future.",154,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"inner","","Create a new `DeadlineError` representing the inner future completing with `Err`.",157,{"inputs":[{"name":"t"}],"output":{"name":"deadlineerror"}}],[11,"is_inner","","Returns `true` if the error was caused by the inner future completing with `Err`.",157,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes `self`, returning the inner future error.",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"elapsed","","Create a new `DeadlineError` representing the inner future not completing before the deadline is reached.",157,{"inputs":[],"output":{"name":"deadlineerror"}}],[11,"is_elapsed","","Returns `true` if the error was caused by the inner future not completing before the deadline is reached.",157,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timer","","Creates a new `DeadlineError` representing an error encountered by the timer implementation",157,{"inputs":[{"name":"error"}],"output":{"name":"deadlineerror"}}],[11,"is_timer","","Returns `true` if the error was caused by the timer.",157,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",157,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"shutdown","","Create an error representing a shutdown timer.",158,{"inputs":[],"output":{"name":"error"}}],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"at_capacity","","Create an error representing a timer at capacity.",158,{"inputs":[],"output":{"name":"error"}}],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",156,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",155,{"inputs":[{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Returns the instant at which the future will complete.",155,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Reset the `Delay` instance to a new deadline.",155,null],[11,"deadline","tokio::util","Creates a new future which allows `self` until `deadline`.",15,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"into_inner","tokio::io","Returns the underlying I/O object.",126,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",37,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",37,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",37,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",37,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",37,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",37,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",37,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",37,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"new","tokio::prelude::future","Create a new `ExecuteError`",118,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",118,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",118,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"is_done","","Returns whether the underlying future has finished or not.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",27,null],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",72,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"new","tokio::prelude::stream","Constructs a new, empty `FuturesUnordered`",44,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",44,null],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",44,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",65,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",65,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",65,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",63,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",64,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",64,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",64,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"send","","Sends a new value along this channel to the receiver.",120,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"futuresender"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",45,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",45,null],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",49,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",49,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",49,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",48,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",48,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",48,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",105,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",47,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",47,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",47,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",39,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",39,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",39,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"map","tokio::prelude","Change the success value of this `Async` with the closure provided",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll_future","tokio::prelude::task","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",125,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",125,null],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",125,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",125,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",125,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",125,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",125,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",125,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",103,{"inputs":[{"generics":["eventset"],"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",108,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",100,null],[11,"is_current","","Returns `true` when called from within the context of the task.",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",113,null],[11,"new","","Create an `AtomicTask` initialized with the given `Task`",43,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",43,null],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",43,null],[11,"notify","","Notifies the task that last called `register`.",43,null],[11,"new","","Inserts a new piece of task-local data into this task, returning a reference to it.",101,{"inputs":[{"name":"a"}],"output":{"name":"taskrc"}}],[11,"with","","Operate with a reference to the underlying data.",101,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}]],"paths":[[8,"Executor"],[3,"TaskExecutor"],[3,"Turn"],[3,"RunError"],[3,"RunTimeoutError"],[3,"TurnError"],[3,"BlockError"],[3,"CurrentThread"],[3,"Entered"],[3,"Spawn"],[3,"Builder"],[3,"Runtime"],[3,"Shutdown"],[3,"TaskExecutor"],[3,"Runtime"],[8,"FutureExt"],[8,"AsyncRead"],[8,"AsyncWrite"],[4,"ErrorKind"],[8,"Read"],[8,"Write"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Stream"],[3,"ReuniteError"],[4,"MergedItem"],[8,"Sink"],[4,"Async"],[4,"AsyncSink"],[8,"Executor"],[8,"Unpark"],[8,"EventSet"],[3,"Error"],[3,"IterMut"],[3,"Wait"],[3,"SendError"],[3,"SharedError"],[3,"Done"],[3,"AtomicTask"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[3,"AndThen"],[3,"Buffered"],[3,"Flatten"],[3,"Fuse"],[3,"Filter"],[3,"Then"],[3,"Skip"],[3,"Take"],[3,"Peekable"],[3,"Chunks"],[3,"OrElse"],[3,"Map"],[3,"Inspect"],[3,"FilterMap"],[3,"MapErr"],[3,"BufferUnordered"],[3,"InspectErr"],[3,"SplitSink"],[3,"FromErr"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Collect"],[3,"Join4"],[3,"Join5"],[3,"Concat2"],[3,"StreamFuture"],[3,"Shared"],[3,"CatchUnwind"],[3,"Fold"],[3,"LoopFn"],[3,"Select2"],[3,"SelectOk"],[3,"Inspect"],[3,"Join3"],[3,"Join"],[3,"Then"],[3,"ForEach"],[3,"SelectAll"],[3,"Concat"],[3,"FromErr"],[3,"SelectNext"],[3,"Map"],[3,"AndThen"],[3,"Forward"],[3,"Lazy"],[3,"Flatten"],[3,"Empty"],[3,"PollFn"],[3,"OrElse"],[3,"FutureSender"],[3,"MapErr"],[3,"Fuse"],[3,"JoinAll"],[3,"Select"],[3,"Task"],[3,"TaskRc"],[3,"SharedItem"],[3,"UnparkEvent"],[3,"IterOk"],[3,"SplitStream"],[3,"CatchUnwind"],[3,"IterResult"],[3,"LocalKey"],[3,"Unfold"],[3,"PollFn"],[3,"Repeat"],[3,"Select"],[3,"Run"],[3,"IntoStream"],[3,"Empty"],[3,"FlattenStream"],[3,"Receiver"],[3,"ExecuteError"],[3,"Chain"],[3,"Sender"],[3,"IterStream"],[3,"Merge"],[3,"Once"],[3,"Zip"],[3,"Spawn"],[3,"Lines"],[3,"Shutdown"],[3,"Copy"],[3,"Flush"],[3,"WriteHalf"],[3,"ReadToEnd"],[3,"ReadHalf"],[3,"WriteAll"],[3,"ReadExact"],[3,"ReadUntil"],[3,"SpawnError"],[3,"DefaultExecutor"],[3,"OpenFuture"],[3,"File"],[3,"Stdin"],[3,"CreateFuture"],[3,"Stderr"],[3,"Stdout"],[3,"Sender"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Builder"],[3,"Handle"],[3,"PollEvented2"],[3,"Turn"],[3,"Background"],[3,"Reactor"],[3,"Registration"],[3,"Deadline"],[3,"Delay"],[3,"Interval"],[3,"DeadlineError"],[3,"Error"],[3,"TcpListener"],[3,"TcpStream"],[3,"ConnectFuture"],[3,"Incoming"],[3,"UdpSocket"],[3,"UdpFramed"],[3,"SendDgram"],[3,"RecvDgram"]]};
searchIndex["tokio_core"] = {"doc":"`Future`-powered I/O at the core of Tokio","items":[[0,"net","tokio_core","TCP/UDP bindings for `tokio-core`",null,null],[3,"TcpStream","tokio_core::net","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"TcpStreamNew","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `UdpCodec` trait to encode and decode frames.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",1,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"bind2","","Create a new TCP listener associated with this event loop.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accept_std","","Like `accept`, except that it returns a raw `std::net::TcpStream`.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_listener","","Create a new TCP listener from the standard library's TCP listener.",1,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",1,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",0,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"tcpstreamnew"}}],[11,"connect2","","Create a new TCP stream connected to the specified address.",0,{"inputs":[{"name":"socketaddr"}],"output":{"name":"tcpstreamnew"}}],[11,"from_stream","","Create a new `TcpStream` from a `net::TcpStream`.",0,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",0,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["future"],"name":"box"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",0,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",0,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",0,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",0,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"read","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",0,null],[11,"read_buf","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"shutdown","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream","error"],"name":"poll"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"start_send","","",4,null],[11,"poll_complete","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"close","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",4,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",4,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new UDP socket bound to the specified address.",5,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",5,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `UdpSocket` object, using the provided `UdpCodec` to read and write the raw data.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",5,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in addr.",5,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",5,null],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read.",5,null],[11,"poll_read","","Test whether this socket is ready to be read or not.",5,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",5,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",5,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",5,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[8,"UdpCodec","","Encoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",8,null],[16,"Out","","The type of frames to be encoded.",8,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",8,null],[10,"encode","","Encodes a frame into the buffer provided.",8,null],[0,"reactor","tokio_core","The core reactor driving all I/O",null,null],[3,"PollEvented","tokio_core::reactor","A concrete implementation of a stream of readiness notifications for I/O objects that originates from an event loop.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"Core","","An event loop.",null,null],[3,"CoreId","","An unique ID for a Core",null,null],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",null,null],[3,"Handle","","A non-sendable handle to an event loop, useful for manufacturing instances of `LoopData`.",null,null],[11,"new","","Creates a new readiness stream associated with the provided `loop_handle` and for the given `source`.",9,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"generics":["pollevented"],"name":"result"}}],[11,"deregister","","Deregisters this source of events from the reactor core specified.",9,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_ready","","Test to see whether this source fulfills any condition listed in `mask` provided.",9,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready"],"name":"async"}}],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is no longer readable, but it needs to be.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is no longer writable, but it needs to be.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"remote","","Returns a reference to the event loop handle that this readiness stream is associated with.",9,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",9,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",9,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"read","","",9,null],[11,"write","","",9,null],[11,"flush","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new timeout which will fire at `dur` time into the future.",10,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"generics":["timeout"],"name":"result"}}],[11,"new_at","","Creates a new timeout which will fire at the time specified by `at`.",10,{"inputs":[{"name":"instant"},{"name":"handle"}],"output":{"generics":["timeout"],"name":"result"}}],[11,"reset","","Resets this timeout to an new timeout which will fire at the time specified by `at`.",10,{"inputs":[{"name":"self"},{"name":"instant"}],"output":null}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"new","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",11,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"generics":["interval"],"name":"result"}}],[11,"new_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",11,{"inputs":[{"name":"instant"},{"name":"duration"},{"name":"handle"}],"output":{"generics":["interval"],"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",15,{"inputs":[],"output":{"generics":["core"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads but can be used as a proxy to the event loop itself.",15,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"runtime","","Returns a reference to the runtime backing the instance",15,{"inputs":[{"name":"self"}],"output":{"name":"runtime"}}],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn tasks from other threads into this event loop.",15,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"run","","Runs a future until completion, driving the event loop while we're otherwise waiting for the future to complete.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",15,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":null}],[11,"id","","Get the ID of this loop",15,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"execute","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"id","","Return the ID of the represented Core",13,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",13,{"inputs":[{"name":"self"}],"output":{"generics":["handle"],"name":"option"}}],[11,"execute","","",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tokio_handle","","Returns a reference to the new Tokio handle",14,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"remote","","Returns a reference to the underlying remote handle to the event loop.",14,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"spawn","","Spawns a new future on the event loop this handle is associated with.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn_send","","Spawns a new future onto the threadpool",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn_fn","","Spawns a closure on this event loop.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"id","","Return the ID of the represented Core",14,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"execute","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_nb","tokio_core","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null]],"paths":[[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"TcpStreamNew"],[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"],[8,"UdpCodec"],[3,"PollEvented"],[3,"Timeout"],[3,"Interval"],[3,"CoreId"],[3,"Remote"],[3,"Handle"],[3,"Core"]]};
searchIndex["tokio_executor"] = {"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",null,null],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",null,null],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",null,{"inputs":[],"output":{"generics":["enter","entererror"],"name":"result"}}],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"with_default","","Set the default executor for the duration of the closure",null,{"inputs":[{"name":"t"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"defaultexecutor"}}],[11,"current","","Returns a handle to the default executor for the current context.",2,{"inputs":[],"output":{"name":"defaultexecutor"}}],[11,"spawn","","",2,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[0,"park","","Abstraction over blocking and unblocking the current thread.",null,null],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",null,null],[8,"Park","","Block the current thread.",null,null],[16,"Unpark","","Unpark handle type for the `Park` implementation.",3,null],[16,"Error","","Error returned by `park`",3,null],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",3,null],[10,"park","","Block the current thread unless or until the token is available.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"park_timeout","","Park the current thread for at most `duration`.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",null,null],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unparkthread"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ParkThread` handle for the current thread.",5,{"inputs":[],"output":{"name":"parkthread"}}],[11,"unpark","","",5,null],[11,"park","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"unpark","","",7,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","tokio_executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",8,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",9,{"inputs":[],"output":{"name":"self"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",9,{"inputs":[],"output":{"name":"self"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"EnterError"],[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Executor"],[3,"SpawnError"]]};
searchIndex["tokio_fs"] = {"doc":"Asynchronous filesystem manipulation operations (and stdin, stdout, stderr).","items":[[3,"Stdin","tokio_fs","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the standard output stream of a process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[0,"file","","Types for working with [`File`].",null,null],[3,"CreateFuture","tokio_fs::file","Future returned by `File::create` and resolves to a `File` instance.",null,null],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",null,null],[3,"File","","A reference to an open file on the filesystem.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",2,{"inputs":[{"name":"p"}],"output":{"name":"openfuture"}}],[11,"create","","Opens a file in write-only mode.",2,{"inputs":[{"name":"p"}],"output":{"name":"createfuture"}}],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",2,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64","error"],"name":"poll"}}],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_metadata","","Queries metadata about the underlying file.",2,{"inputs":[{"name":"self"}],"output":{"generics":["metadata","error"],"name":"poll"}}],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",2,{"inputs":[{"name":"self"}],"output":{"generics":["file","error"],"name":"poll"}}],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",2,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"generics":["error"],"name":"poll"}}],[11,"read","","",2,null],[11,"prepare_uninitialized_buffer","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","tokio_fs","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",3,null],[11,"prepare_uninitialized_buffer","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}]],"paths":[[3,"CreateFuture"],[3,"OpenFuture"],[3,"File"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"]]};
searchIndex["tokio_io"] = {"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",null,null],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",null,null],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readuntil"}}],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[0,"codec","tokio_io","Utilities for encoding and decoding frames.",null,null],[3,"BytesCodec","tokio_io::codec","A simple `Codec` implementation that just ships bytes around.",null,null],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",null,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",null,null],[12,"inner","","The inner transport used to read bytes to and write bytes to",8,null],[12,"readbuf","","The buffer with read but unprocessed data.",8,null],[12,"writebuf","","A buffer with unprocessed data which are not written yet.",8,null],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",null,null],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bytescodec"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",9,{"inputs":[],"output":{"name":"bytescodec"}}],[11,"decode","","",9,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytesmut"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"linescodec"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",10,{"inputs":[],"output":{"name":"linescodec"}}],[11,"decode","","",10,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"decode_eof","","",10,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"string"},{"name":"bytesmut"}],"output":{"generics":["error"],"name":"result"}}],[0,"length_delimited","","Frame a stream of bytes based on a length prefix",null,null],[3,"Builder","tokio_io::codec::length_delimited","Configure length delimited `FramedRead`, `FramedWrite`, and `Framed` values.",null,null],[3,"Framed","","Adapts a byte stream into a unified `Stream` and `Sink` that works over entire frame values.",null,null],[3,"FramedRead","","Adapts a byte stream to a `Stream` yielding entire frame values.",null,null],[3,"FrameTooBig","","An error when the number of bytes read is more than max frame length.",null,null],[3,"FramedWrite","","Adapts a byte stream to a `Sink` accepting entire frame values.",null,null],[8,"Decoder","tokio_io::codec","Decoding of frames via buffers.",null,null],[16,"Item","","The type of decoded frames.",11,null],[16,"Error","","The type of unrecoverable frame decoding errors.",11,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",11,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",11,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",null,null],[16,"Item","","The type of items consumed by the `Encoder`",12,null],[16,"Error","","The type of encoding errors.",12,null],[10,"encode","","Encodes a frame into the buffer provided.",12,null],[11,"fmt","tokio_io::io","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"allowstdio"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",13,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_ref","","Returns a reference to the contained IO object.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained IO object.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes self and returns the contained IO object.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",13,null],[11,"write_fmt","","",13,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"shutdown","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"read","","",13,null],[11,"read_to_end","","",13,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",13,null],[11,"from_parts","tokio_io::codec","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",14,{"inputs":[{"name":"framedparts"},{"name":"u"}],"output":{"name":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream and the buffer with unprocessed data.",14,{"inputs":[{"name":"self"}],"output":{"name":"framedparts"}}],[11,"into_parts_and_codec","","Consumes the `Frame`, returning its underlying I/O stream and the buffer with unprocessed data, and also the current codec state.",14,null],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",14,null],[11,"poll_complete","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",15,{"inputs":[{"name":"t"},{"name":"d"}],"output":{"name":"framedread"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"decoder","","Returns a reference to the underlying decoder.",15,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",15,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",15,null],[11,"poll_complete","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",16,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"framedwrite"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"encoder","","Returns a reference to the underlying decoder.",16,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",16,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"start_send","","",16,null],[11,"poll_complete","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","tokio_io::codec::length_delimited","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Framed` with default configuration values.",19,{"inputs":[{"name":"t"}],"output":{"name":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"start_send","","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["error"],"name":"startsend"}}],[11,"poll_complete","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"close","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedRead` with default configuration values.",18,{"inputs":[{"name":"t"}],"output":{"name":"framedread"}}],[11,"max_frame_length","","Returns the current max frame setting",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_max_frame_length","","Updates the max frame setting.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"start_send","","",18,null],[11,"poll_complete","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",18,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"new","","Creates a new `FramedWrite` with default configuration values.",20,{"inputs":[{"name":"t"}],"output":{"name":"framedwrite"}}],[11,"max_frame_length","","Returns the current max frame setting",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_max_frame_length","","Updates the max frame setting.",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",20,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",20,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start_send","","",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["error"],"name":"startsend"}}],[11,"poll_complete","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"close","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"read","","",20,null],[11,"read_buf","","",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"prepare_uninitialized_buffer","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new length delimited framer builder with default configuration values.",17,{"inputs":[],"output":{"name":"builder"}}],[11,"big_endian","","Read the length field as a big endian integer",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"little_endian","","Read the length field as a little endian integer",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"native_endian","","Read the length field as a native endian integer",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"max_frame_length","","Sets the max frame length",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_field_length","","Sets the number of bytes used to represent the length field",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"new_read","","Create a configured length delimited `FramedRead`",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framedread"}}],[11,"new_write","","Create a configured length delimited `FramedWrite`",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framedwrite"}}],[11,"new_framed","","Create a configured length delimited `Framed`",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","tokio_io::io","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Returns the underlying I/O object.",22,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",23,null],[11,"read_buf","","",23,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",25,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"as_ref","","",25,null],[11,"as_mut","","",25,null],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",26,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",26,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",26,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",27,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",27,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",27,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",27,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null],[11,"decode_eof","tokio_io::codec","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",11,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[11,"prepare_uninitialized_buffer","tokio_io","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",26,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",26,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",26,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",27,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",27,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",27,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}]],"paths":[[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"FramedParts"],[3,"BytesCodec"],[3,"LinesCodec"],[8,"Decoder"],[8,"Encoder"],[3,"AllowStdIo"],[3,"Framed"],[3,"FramedRead"],[3,"FramedWrite"],[3,"Builder"],[3,"FramedRead"],[3,"Framed"],[3,"FramedWrite"],[3,"FrameTooBig"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_proto"] = {"doc":"This library provides a toolkit for rapid protocol development and usage, working with the rest of the Tokio stack.","items":[[3,"TcpClient","tokio_proto","Builds client connections to external services.",null,null],[3,"Connect","","A future for establishing a client connection.",null,null],[3,"TcpServer","","A builder for TCP servers.",null,null],[0,"pipeline","","Pipelined RPC protocols.",null,null],[3,"ClientService","tokio_proto::pipeline","Client `Service` for simple pipeline protocols",null,null],[3,"Pipeline","","A marker used to flag protocols as being pipelined RPC.",null,null],[8,"ClientProto","","A pipelined client protocol.",null,null],[16,"Request","","Request messages.",0,null],[16,"Response","","Response messages.",0,null],[16,"Transport","","The message transport, which works with I/O objects of type `T`.",0,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",0,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",0,null],[8,"ServerProto","","A pipelined server protocol.",null,null],[16,"Request","","Request messages.",1,null],[16,"Response","","Response messages.",1,null],[16,"Transport","","The message transport, which works with I/O objects of type `T`.",1,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",1,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",1,null],[0,"multiplex","tokio_proto","Multiplexed RPC protocols.",null,null],[3,"ClientService","tokio_proto::multiplex","Client `Service` for simple multiplex protocols",null,null],[3,"Multiplex","","A marker used to flag protocols as being multiplexed RPC.",null,null],[6,"RequestId","","Identifies a request / response thread",null,null],[8,"ClientProto","","An multiplexed client protocol.",null,null],[16,"Request","","Request messages.",2,null],[16,"Response","","Response messages.",2,null],[16,"Transport","","The message transport, which usually take `T` as a parameter.",2,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",2,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",2,null],[8,"ServerProto","","An multiplexed server protocol.",null,null],[16,"Request","","Request messages.",3,null],[16,"Response","","Response messages.",3,null],[16,"Transport","","The message transport, which usually take `T` as a parameter.",3,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",3,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",3,null],[0,"streaming","tokio_proto","Streaming protocols.",null,null],[3,"Body","tokio_proto::streaming","Body stream",null,null],[4,"Message","","Message sent and received from a multiplexed service",null,null],[13,"WithoutBody","","Has no associated streaming body",4,null],[13,"WithBody","","Has associated streaming body",4,null],[0,"pipeline","","Pipelined, streaming protocols.",null,null],[3,"StreamingPipeline","tokio_proto::streaming::pipeline","A marker used to flag protocols as being streaming and pipelined.",null,null],[4,"Frame","","A pipelined protocol frame",null,null],[13,"Message","","Either a request or a response",5,null],[12,"message","tokio_proto::streaming::pipeline::Frame","The message value",5,null],[12,"body","","Set to true when body frames will follow",5,null],[13,"Body","tokio_proto::streaming::pipeline","Body frame. None indicates that the body is done streaming.",5,null],[12,"chunk","tokio_proto::streaming::pipeline::Frame","Body chunk. Setting to `None` indicates that the body is done streaming and there will be no further body frames sent with the given request ID.",5,null],[13,"Error","tokio_proto::streaming::pipeline","Error",5,null],[12,"error","tokio_proto::streaming::pipeline::Frame","Error value",5,null],[11,"fmt","tokio_proto::streaming::pipeline","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"unwrap_msg","","Unwraps a frame, yielding the content of the `Message`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_body","","Unwraps a frame, yielding the content of the `Body`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_err","","Unwraps a frame, yielding the content of the `Error`.",5,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[0,"advanced","","Provides the substrate for implementing pipelined, streaming protocols.",null,null],[3,"Pipeline","tokio_proto::streaming::pipeline::advanced","Provides protocol pipelining functionality in a generic way over clients and servers. Used internally by `pipeline::Client` and `pipeline::Server`.",null,null],[6,"PipelineMessage","","Message used to communicate through the multiplex dispatch",null,null],[8,"Dispatch","","Dispatch messages from the transport to the service",null,null],[16,"Io","","Type of underlying I/O object",6,null],[16,"In","","Message written to transport",6,null],[16,"BodyIn","","Body written to transport",6,null],[16,"Out","","Messages read from the transport",6,null],[16,"BodyOut","","Outbound body frame",6,null],[16,"Error","","Transport error",6,null],[16,"Stream","","Body stream written to transport",6,null],[16,"Transport","","Transport type",6,null],[10,"transport","","Mutable reference to the transport",6,null],[10,"dispatch","","Process an out message",6,{"inputs":[{"name":"self"},{"generics":["body"],"name":"pipelinemessage"}],"output":{"name":"result"}}],[10,"poll","","Poll the next completed message",6,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[10,"has_in_flight","","RPC currently in flight TODO: Get rid of",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new pipeline `Pipeline` dispatcher with the given service and transport",7,{"inputs":[{"name":"t"}],"output":{"name":"pipeline"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ClientProto","tokio_proto::streaming::pipeline","A streaming, pipelined client protocol.",null,null],[16,"Request","","The type of request headers.",8,null],[16,"RequestBody","","The type of request body chunks.",8,null],[16,"Response","","The type of response headers.",8,null],[16,"ResponseBody","","The type of response body chunks.",8,null],[16,"Error","","The type of error frames.",8,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",8,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",8,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",8,null],[8,"ServerProto","","A streaming, pipelined server protocol.",null,null],[16,"Request","","Request headers.",9,null],[16,"RequestBody","","Request body chunks.",9,null],[16,"Response","","Response headers.",9,null],[16,"ResponseBody","","Response body chunks.",9,null],[16,"Error","","Errors, which are used both for error frames and for the service itself.",9,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",9,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",9,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",9,null],[8,"Transport","","Additional transport details relevant to streaming, pipelined protocols.",null,null],[11,"tick","","Allow the transport to do miscellaneous work (e.g., sending ping-pong messages) that is not directly connected to sending or receiving frames.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"cancel","","Cancel interest in the current stream",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"multiplex","tokio_proto::streaming","Pipelined, multiplexed protocols.",null,null],[3,"StreamingMultiplex","tokio_proto::streaming::multiplex","A marker used to flag protocols as being streaming and multiplexed.",null,null],[4,"Frame","","A multiplexed protocol frame",null,null],[13,"Message","","Either a request or a response.",12,null],[12,"id","tokio_proto::streaming::multiplex::Frame","Message exchange identifier",12,null],[12,"message","","The message value",12,null],[12,"body","","Set to true when body frames will follow with the same request ID.",12,null],[12,"solo","","Set to `true` when this message does not have a pair in the other direction",12,null],[13,"Body","tokio_proto::streaming::multiplex","Body frame.",12,null],[12,"id","tokio_proto::streaming::multiplex::Frame","Message exchange identifier",12,null],[12,"chunk","","Body chunk. Setting to `None` indicates that the body is done streaming and there will be no further body frames sent with the given request ID.",12,null],[13,"Error","tokio_proto::streaming::multiplex","Error",12,null],[12,"id","tokio_proto::streaming::multiplex::Frame","Message exchange identifier",12,null],[12,"error","","Error value",12,null],[11,"fmt","tokio_proto::streaming::multiplex","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"request_id","","Return the request ID associated with the frame.",12,{"inputs":[{"name":"self"}],"output":{"name":"requestid"}}],[11,"unwrap_msg","","Unwraps a frame, yielding the content of the `Message`.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_body","","Unwraps a frame, yielding the content of the `Body`.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_err","","Unwraps a frame, yielding the content of the `Error`.",12,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[0,"advanced","","Provides the substrate for implementing multiplexed, streaming protocols.",null,null],[3,"Multiplex","tokio_proto::streaming::multiplex::advanced","Task that drives multiplexed protocols",null,null],[3,"MultiplexMessage","","Message used to communicate through the multiplex dispatch",null,null],[12,"id","","Request ID",13,null],[12,"message","","Message",13,null],[12,"solo","","True if message has no pair (request / response)",13,null],[8,"Dispatch","","Dispatch messages from the transport to the service",null,null],[16,"Io","","Type of underlying I/O object",14,null],[16,"In","","Messages written to the transport",14,null],[16,"BodyIn","","Inbound body frame",14,null],[16,"Out","","Messages read from the transport",14,null],[16,"BodyOut","","Outbound body frame",14,null],[16,"Error","","Transport error",14,null],[16,"Stream","","Inbound body stream type",14,null],[16,"Transport","","Transport type",14,null],[10,"transport","","Mutable reference to the transport",14,null],[10,"poll","","Poll the next available message",14,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[10,"poll_ready","","The `Dispatch` is ready to accept another message",14,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[10,"dispatch","","Process an out message",14,{"inputs":[{"name":"self"},{"generics":["body"],"name":"multiplexmessage"}],"output":{"name":"result"}}],[10,"cancel","","Cancel interest in the exchange identified by RequestId",14,{"inputs":[{"name":"self"},{"name":"requestid"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new pipeline `Multiplex` dispatcher with the given service and transport",15,{"inputs":[{"name":"t"}],"output":{"name":"multiplex"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new MultiplexMessage",13,{"inputs":[{"name":"requestid"},{"name":"message"}],"output":{"name":"multiplexmessage"}}],[11,"error","","Create a new errored MultiplexMessage",13,{"inputs":[{"name":"requestid"},{"name":"e"}],"output":{"name":"multiplexmessage"}}],[6,"RequestId","tokio_proto::streaming::multiplex","Identifies a request / response thread",null,null],[8,"ClientProto","","A streaming, multiplexed client protocol.",null,null],[16,"Request","","Request headers.",16,null],[16,"RequestBody","","Request body chunks.",16,null],[16,"Response","","Response headers.",16,null],[16,"ResponseBody","","Response body chunks.",16,null],[16,"Error","","Errors, which are used both for error frames and for the service itself.",16,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",16,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",16,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",16,null],[8,"ServerProto","","A streaming, multiplexed server protocol.",null,null],[16,"Request","","Request headers.",17,null],[16,"RequestBody","","Request body chunks.",17,null],[16,"Response","","Response headers.",17,null],[16,"ResponseBody","","Response body chunks.",17,null],[16,"Error","","Errors, which are used both for error frames and for the service itself.",17,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",17,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",17,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",17,null],[8,"Transport","","Additional transport details relevant to streaming, multiplexed protocols.",null,null],[11,"tick","","Allow the transport to do miscellaneous work (e.g., sending ping-pong messages) that is not directly connected to sending or receiving frames.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"cancel","","Cancel interest in the exchange identified by RequestId",18,{"inputs":[{"name":"self"},{"name":"requestid"}],"output":{"name":"result"}}],[11,"poll_write_body","","Tests to see if this I/O object may accept a body frame for the given request ID",18,{"inputs":[{"name":"self"},{"name":"requestid"}],"output":{"name":"async"}}],[11,"dispatching_body","","Invoked before the multiplexer dispatches the body chunk to the body stream.",18,{"inputs":[{"name":"self"},{"name":"requestid"},{"name":"readbody"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","tokio_proto::streaming","Return an empty body stream",20,{"inputs":[],"output":{"name":"body"}}],[11,"pair","","Return a body stream with an associated sender half",20,null],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"from","","",20,{"inputs":[{"generics":["result"],"name":"receiver"}],"output":{"name":"body"}}],[11,"from","","",20,{"inputs":[{"name":"t"}],"output":{"name":"body"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the inner value",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the value and returns the inner value",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take_body","","If the `Message` value has an associated body stream, return it. The original `Message` value will then become a `WithoutBody` variant.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"util","tokio_proto","Utilities for building protocols",null,null],[0,"client_proxy","tokio_proto::util","Utilities for building protocol clients",null,null],[3,"ClientProxy","tokio_proto::util::client_proxy","Client `Service` for pipeline or multiplex protocols",null,null],[3,"Response","","Response future returned from a client",null,null],[5,"pair","","Return a client handle and a handle used to receive requests on",null,{"inputs":[],"output":{"name":"pair"}}],[6,"Pair","","A client / receiver pair",null,null],[6,"Receiver","","Receive requests submitted to the client",null,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"call","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","tokio_proto","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"new","","Create a builder for the given client protocol.",23,{"inputs":[{"name":"p"}],"output":{"name":"tcpclient"}}],[11,"connect","","Establish a connection to the given address.",23,{"inputs":[{"name":"self"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connect"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Starts building a server for the given protocol and address, with default configuration.",25,{"inputs":[{"name":"p"},{"name":"socketaddr"}],"output":{"name":"tcpserver"}}],[11,"addr","","Set the address for the server.",25,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":null}],[11,"threads","","Set the number of threads running simultaneous event loops (Unix only).",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"serve","","Start up the server, providing the given service on it.",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"with_handle","","Start up the server, providing the given service on it, and providing access to the event loop handle.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"BindServer","","Binds a service to an I/O object.",null,null],[16,"ServiceRequest","","The request type for the service.",26,null],[16,"ServiceResponse","","The response type for the service.",26,null],[16,"ServiceError","","The error type for the service.",26,null],[10,"bind_server","","Bind the service.",26,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"t"},{"name":"s"}],"output":null}],[8,"BindClient","","Binds an I/O object as a client of a service.",null,null],[16,"ServiceRequest","","The request type for the service.",27,null],[16,"ServiceResponse","","The response type for the service.",27,null],[16,"ServiceError","","The error type for the service.",27,null],[16,"BindClient","","The bound service.",27,null],[10,"bind_client","","Bind an I/O object as a service.",27,null],[11,"clone","tokio_proto::pipeline","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"call","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"call","tokio_proto::multiplex","",30,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"ClientProto"],[8,"ServerProto"],[8,"ClientProto"],[8,"ServerProto"],[4,"Message"],[4,"Frame"],[8,"Dispatch"],[3,"Pipeline"],[8,"ClientProto"],[8,"ServerProto"],[8,"Transport"],[3,"StreamingPipeline"],[4,"Frame"],[3,"MultiplexMessage"],[8,"Dispatch"],[3,"Multiplex"],[8,"ClientProto"],[8,"ServerProto"],[8,"Transport"],[3,"StreamingMultiplex"],[3,"Body"],[3,"ClientProxy"],[3,"Response"],[3,"TcpClient"],[3,"Connect"],[3,"TcpServer"],[8,"BindServer"],[8,"BindClient"],[3,"ClientService"],[3,"Pipeline"],[3,"ClientService"],[3,"Multiplex"]]};
searchIndex["tokio_reactor"] = {"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",null,null],[3,"Reactor","","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",null,null],[5,"with_default","","Set the default reactor for the duration of the closure",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle","","Returns a reference to the reactor handle.",0,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",1,{"inputs":[{"name":"e"}],"output":{"name":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",1,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",1,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",1,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",1,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Registration`.",2,{"inputs":[],"output":{"name":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["bool"],"name":"result"}}],[11,"deregister","","Deregister the I/O resource from the reactor it is associatd with.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"handle"}],"output":{"generics":["bool"],"name":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_read_ready","","Consume any pending read readiness event.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_write_ready","","Consume any pending write readiness event.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"setfallbackerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",6,{"inputs":[],"output":{"generics":["reactor"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",6,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["setfallbackerror"],"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn"],"name":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"background","","Run this reactor on a background thread.",6,{"inputs":[{"name":"self"}],"output":{"generics":["background"],"name":"result"}}],[11,"unpark","","",6,null],[11,"park","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",6,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","Returns a handle to the current reactor.",3,{"inputs":[],"output":{"name":"handle"}}],[11,"unpark","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",3,{"inputs":[],"output":{"name":"handle"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Background"],[3,"PollEvented"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"],[3,"Reactor"]]};
searchIndex["tokio_service"] = {"doc":"Definition of the core `Service` trait to Tokio","items":[[8,"Service","tokio_service","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",0,null],[16,"Response","","Responses given by the service.",0,null],[16,"Error","","Errors produced by the service.",0,null],[16,"Future","","The future response value.",0,null],[10,"call","","Process the request and return the response asynchronously.",0,null],[8,"NewService","","Creates new `Service` values.",null,null],[16,"Request","","Requests handled by the service",1,null],[16,"Response","","Responses given by the service",1,null],[16,"Error","","Errors produced by the service",1,null],[16,"Instance","","The `Service` value created by this factory",1,null],[10,"new_service","","Create and return a new service value.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[8,"Service"],[8,"NewService"]]};
searchIndex["tokio_tcp"] = {"doc":"TCP bindings for `tokio`.","items":[[3,"Incoming","tokio_tcp","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",1,{"inputs":[{"name":"tcplistener"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",2,{"inputs":[{"name":"socketaddr"}],"output":{"name":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",2,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",2,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connectfuture"}}],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",2,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",2,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",2,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",2,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",2,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",2,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",2,null],[11,"read_buf","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"shutdown","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream","error"],"name":"poll"}}]],"paths":[[3,"Incoming"],[3,"TcpListener"],[3,"TcpStream"],[3,"ConnectFuture"]]};
searchIndex["tokio_threadpool"] = {"doc":"A work-stealing based thread pool for executing futures.","items":[[3,"BlockingError","tokio_threadpool","Error raised by `blocking`.",null,null],[3,"Builder","","Builds a thread pool with custom configuration values.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",null,null],[3,"Worker","","Thread worker",null,null],[5,"blocking","","Enter a blocking section of code.",null,{"inputs":[{"name":"f"}],"output":{"generics":["blockingerror"],"name":"poll"}}],[0,"park","","Thread parking utilities.",null,null],[3,"DefaultPark","tokio_threadpool::park","Parks the thread.",null,null],[3,"DefaultUnpark","","Unparks threads that were parked by `DefaultPark`.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DefaultPark` instance.",0,{"inputs":[],"output":{"name":"defaultpark"}}],[11,"unpark","","",0,null],[11,"park","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"unpark","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","tokio_threadpool","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Returns a new thread pool builder initialized with default configuration values.",4,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"keep_alive","","Set the worker thread keep alive duration",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"self"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"around_worker","","Execute function `f` on each worker thread.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before_stop","","Execute function `f` before each thread stops.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"custom_park","","Customize the `park` instance used by each worker thread.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Create the configured `ThreadPool`.",4,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn a future onto the thread pool",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",5,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ThreadPool` with default values.",7,{"inputs":[],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sender","","Return a reference to the sender handle",7,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",7,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown","","Shutdown the pool",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","Returns a reference to the worker's identifier.",8,{"inputs":[{"name":"self"}],"output":{"name":"workerid"}}],[11,"run","","Run the worker",8,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"DefaultPark"],[3,"DefaultUnpark"],[3,"ParkError"],[3,"BlockingError"],[3,"Builder"],[3,"Sender"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Worker"]]};
searchIndex["tokio_timer"] = {"doc":"Utilities for scheduling work to happen after a period of time.","items":[[3,"Deadline","tokio_timer","Allows a given `Future` to execute until the specified deadline.",null,null],[3,"DeadlineError","","Error returned by `Deadline` future.",null,null],[3,"Delay","","A future that completes at a specified instant in time.",null,null],[3,"Error","","Errors encountered by the timer implementation.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[5,"with_default","","Set the default timer for the duration of the closure.",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[0,"timer","","Timer implementation.",null,null],[3,"Handle","tokio_timer::timer","Handle to timer instance.",null,null],[3,"SystemNow","","Returns the instant corresponding to now using a monotonic clock.",null,null],[3,"Timer","","Timer implementation that drives [`Delay`], [`Interval`], and [`Deadline`].",null,null],[3,"Turn","","Return value from the `turn` method on `Timer`.",null,null],[5,"with_default","","Set the default timer for the duration of the closure.",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"current","","Returns a handle to the current timer.",0,{"inputs":[],"output":{"name":"handle"}}],[11,"delay","","Create a `Delay` driven by this handle's associated `Timer`.",0,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Create a `Deadline` driven by this handle's associated `Timer`.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"interval","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",0,{"inputs":[{"name":"self"},{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `SystemNow`.",1,{"inputs":[],"output":{"name":"systemnow"}}],[11,"now","","",1,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[8,"Now","","Returns `Instant` values representing the current instant in time.",null,null],[10,"now","","Returns an instant corresponding to \"now\".",2,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Timer` instance that uses `park` to block the current thread.",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_now","","Create a new `Timer` instance that uses `park` to block the current thread and `now` to get the current `Instant`.",3,{"inputs":[{"name":"t"},{"name":"n"}],"output":{"name":"self"}}],[11,"handle","","Returns a handle to the timer.",3,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"turn","","Performs one iteration of the timer loop.",3,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn"],"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"unpark","","",3,null],[11,"park","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","tokio_timer","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Deadline` that completes when `future` completes or when `deadline` is reached.",5,{"inputs":[{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"get_ref","","Gets a reference to the underlying future in this deadline.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying future in this deadline.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this deadline, returning the underlying future.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"inner","","Create a new `DeadlineError` representing the inner future completing with `Err`.",6,{"inputs":[{"name":"t"}],"output":{"name":"deadlineerror"}}],[11,"is_inner","","Returns `true` if the error was caused by the inner future completing with `Err`.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes `self`, returning the inner future error.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"elapsed","","Create a new `DeadlineError` representing the inner future not completing before the deadline is reached.",6,{"inputs":[],"output":{"name":"deadlineerror"}}],[11,"is_elapsed","","Returns `true` if the error was caused by the inner future not completing before the deadline is reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timer","","Creates a new `DeadlineError` representing an error encountered by the timer implementation",6,{"inputs":[{"name":"error"}],"output":{"name":"deadlineerror"}}],[11,"is_timer","","Returns `true` if the error was caused by the timer.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",7,{"inputs":[{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Returns the instant at which the future will complete.",7,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Reset the `Delay` instance to a new deadline.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":null}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shutdown","","Create an error representing a shutdown timer.",8,{"inputs":[],"output":{"name":"error"}}],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"at_capacity","","Create an error representing a timer at capacity.",8,{"inputs":[],"output":{"name":"error"}}],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",9,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}]],"paths":[[3,"Handle"],[3,"SystemNow"],[8,"Now"],[3,"Timer"],[3,"Turn"],[3,"Deadline"],[3,"DeadlineError"],[3,"Delay"],[3,"Error"],[3,"Interval"]]};
searchIndex["tokio_tls"] = {"doc":"Async TLS streams","items":[[3,"TlsStream","tokio_tls","A wrapper around an underlying raw stream which implements the TLS or SSL protocol.",null,null],[3,"ConnectAsync","","Future returned from `TlsConnectorExt::connect_async` which will resolve once the connection handshake has finished.",null,null],[3,"AcceptAsync","","Future returned from `TlsAcceptorExt::accept_async` which will resolve once the accept handshake has finished.",null,null],[8,"TlsConnectorExt","","Extension trait for the `TlsConnector` type in the `native_tls` crate.",null,null],[10,"connect_async","","Connects the provided stream with this connector, assuming the provided domain.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"name":"connectasync"}}],[10,"danger_connect_async_without_providing_domain_for_certificate_verification_and_server_name_indication","","Like `connect_async`, but does not validate the server's domain name against its certificate.",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"connectasync"}}],[8,"TlsAcceptorExt","","Extension trait for the `TlsAcceptor` type in the `native_tls` crate.",null,null],[10,"accept_async","","Accepts a new client connection with the provided stream.",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"acceptasync"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get access to the internal `native_tls::TlsStream` stream which also transitively allows access to `S`.",2,{"inputs":[{"name":"self"}],"output":{"name":"tlsstream"}}],[11,"get_mut","","Get mutable access to the internal `native_tls::TlsStream` stream which also transitively allows mutable access to `S`.",2,{"inputs":[{"name":"self"}],"output":{"name":"tlsstream"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tlsstream","error"],"name":"poll"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["tlsstream","error"],"name":"poll"}}]],"paths":[[8,"TlsConnectorExt"],[8,"TlsAcceptorExt"],[3,"TlsStream"],[3,"ConnectAsync"],[3,"AcceptAsync"]]};
searchIndex["tokio_udp"] = {"doc":"UDP bindings for `tokio`.","items":[[3,"UdpFramed","tokio_udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",0,null],[11,"poll_complete","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",0,{"inputs":[{"name":"udpsocket"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",1,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",1,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",1,null],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",1,null],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",1,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",1,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}]],"paths":[[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"]]};
searchIndex["try_lock"] = {"doc":"A light-weight lock guarded by an atomic boolean.","items":[[3,"TryLock","try_lock","A light-weight lock guarded by an atomic boolean.",null,null],[3,"Locked","","A locked value acquired from a `TryLock`.",null,null],[11,"new","","Create a `TryLock` around the value.",0,{"inputs":[{"name":"t"}],"output":{"name":"trylock"}}],[11,"try_lock","","Try to acquire the lock of this value.",0,{"inputs":[{"name":"self"}],"output":{"generics":["locked"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryLock"],[3,"Locked"]]};
searchIndex["unicase"] = {"doc":"Case","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[12,"0","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unicase"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"s2"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["unicase"],"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[3,"UniCase"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,null],[12,"level","","The paragraph embedding level.",0,null],[3,"InitialInfo","","Initial bidi information of the text.",null,null],[12,"text","","The text",1,null],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,null],[3,"BidiInfo","","Bidi information of the text.",null,null],[12,"text","","The text",2,null],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,null],[12,"levels","","The directional embedding level of each byte in the text.",2,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,null],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the `BidiClass` of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[0,"deprecated","","This module holds deprecated assets only.",null,null],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",null,null],[0,"format_chars","unicode_bidi","Directional Formatting Characters",null,null],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",null,null],[17,"LRM","","LEFT-TO-RIGHT MARK",null,null],[17,"RLM","","RIGHT-TO-LEFT MARK",null,null],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",null,null],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",null,null],[17,"FSI","","FIRST STRONG ISOLATE",null,null],[17,"PDI","","POP DIRECTIONAL ISOLATE",null,null],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",null,null],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",null,null],[17,"PDF","","POP DIRECTIONAL FORMATTING",null,null],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",null,null],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",null,null],[0,"level","unicode_bidi","Bidi Embedding Level",null,null],[3,"Level","unicode_bidi::level","Embedding Level",null,null],[4,"Error","","Errors that can occur on Level creation or mutation",null,null],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,null],[5,"has_rtl","","If levels has any RTL (odd) level",null,null],[17,"LTR_LEVEL","","",null,null],[17,"RTL_LEVEL","","",null,null],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",null,null],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ltr","","New LTR level with smallest number value (0).",5,{"inputs":[],"output":{"name":"level"}}],[11,"rtl","","New RTL level with smallest number value (1).",5,{"inputs":[],"output":{"name":"level"}}],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"u8"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"u8"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"number","","The level number.",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"is_ltr","","If this level is left-to-right.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_rtl","","If this level is right-to-left.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"vec","","",5,null],[11,"into","","Convert to the level number",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","Create level by number",5,{"inputs":[{"name":"u8"}],"output":{"name":"level"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","unicode_bidi","",3,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",null,null],[17,"UNICODE_VERSION","","The Unicode version of data",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,{"inputs":[{"name":"str"},{"generics":["level"],"name":"option"}],"output":{"name":"initialinfo"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,{"inputs":[{"name":"str"},{"generics":["level"],"name":"option"}],"output":{"name":"bidiinfo"}}],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"generics":["usize"],"name":"range"}],"output":{"generics":["level"],"name":"vec"}}],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"generics":["usize"],"name":"range"}],"output":{"generics":["level"],"name":"vec"}}],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"generics":["usize"],"name":"range"}],"output":{"generics":["str"],"name":"cow"}}],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,null],[11,"has_rtl","","If processed text has any computed RTL levels",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",null,null],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",null,null],[13,"Yes","","The text is definitely normalized.",0,null],[13,"No","","The text is definitely not normalized.",0,null],[13,"Maybe","","The text may be normalized.",0,null],[5,"is_nfc","","Authoritatively check if a string is in NFC.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",null,{"inputs":[{"name":"i"}],"output":{"name":"isnormalized"}}],[5,"is_nfc_stream_safe","","Authoritatively check if a string is Stream-Safe NFC.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_nfc_stream_safe_quick","","Quickly check if a string is Stream-Safe NFC.",null,{"inputs":[{"name":"i"}],"output":{"name":"isnormalized"}}],[5,"is_nfd","","Authoritatively check if a string is in NFD.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",null,{"inputs":[{"name":"i"}],"output":{"name":"isnormalized"}}],[5,"is_nfd_stream_safe","","Authoritatively check if a string is Stream-Safe NFD.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_nfd_stream_safe_quick","","Quickly check if a string is Stream-Safe NFD.",null,{"inputs":[{"name":"i"}],"output":{"name":"isnormalized"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isnormalized"}],"output":{"name":"bool"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"generics":["char"],"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",4,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",4,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",4,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",4,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",4,{"inputs":[{"name":"self"}],"output":{"name":"streamsafe"}}]],"paths":[[4,"IsNormalized"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA if this is the host of a special URL, or percent encoded for non-special URLs. Hosts for non-special URLs are also called opaque hosts.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"SyntaxViolation","","Non-fatal syntax violations that can occur during parsing.",null,null],[13,"Backslash","","",4,null],[13,"C0SpaceIgnored","","",4,null],[13,"EmbeddedCredentials","","",4,null],[13,"ExpectedDoubleSlash","","",4,null],[13,"ExpectedFileDoubleSlash","","",4,null],[13,"FileWithHostAndWindowsDrive","","",4,null],[13,"NonUrlCodePoint","","",4,null],[13,"NullInFragment","","",4,null],[13,"PercentDecode","","",4,null],[13,"TabOrNewlineIgnored","","",4,null],[13,"UnencodedAtSign","","",4,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",5,null],[13,"AfterScheme","","",5,null],[13,"BeforeUsername","","",5,null],[13,"AfterUsername","","",5,null],[13,"BeforePassword","","",5,null],[13,"AfterPassword","","",5,null],[13,"BeforeHost","","",5,null],[13,"AfterHost","","",5,null],[13,"BeforePort","","",5,null],[13,"AfterPort","","",5,null],[13,"BeforePath","","",5,null],[13,"AfterPath","","",5,null],[13,"BeforeQuery","","",5,null],[13,"AfterQuery","","",5,null],[13,"BeforeFragment","","",5,null],[13,"AfterFragment","","",5,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_opaque","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"hostandport"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"syntaxviolation"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"syntaxviolation"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"generics":["position"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"generics":["position"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"generics":["position"],"name":"range"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"finish","","",10,null],[16,"Finished","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",11,{"inputs":[{"name":"self"}],"output":{"name":"parseintoowned"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",13,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut_string","url","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"finish","","",15,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,null],[11,"clone","url","",9,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",16,{"inputs":[{"name":"self"},{"generics":["url"],"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors, passing a static string description.  This method is deprecated in favor of `syntax_violation_callback` and is implemented as an adaptor for the latter, passing the `SyntaxViolation` description. Only the last value passed to either method will be used by a parser.",16,{"inputs":[{"name":"self"},{"generics":["fn"],"name":"option"}],"output":{"name":"self"}}],[11,"syntax_violation_callback","","Call the provided function or closure for a non-fatal `SyntaxViolation` when it occurs during parsing. Note that since the provided function is `Fn`, the caller might need to utilize interior mutability, such as with a `RefCell`, to collect the violations.",16,{"inputs":[{"name":"self"},{"generics":["fn"],"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",9,{"inputs":[{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",9,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",9,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",9,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",9,{"inputs":[{"name":"self"}],"output":{"generics":["host"],"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["hostandport"],"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"generics":["split"],"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",9,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",9,{"inputs":[{"name":"self"}],"output":{"generics":["urlquery"],"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",9,{"inputs":[{"name":"self"}],"output":{"generics":["pathsegmentsmut"],"name":"result"}}],[11,"set_port","","Change this URL’s port number.",9,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",9,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",9,{"inputs":[{"name":"p"}],"output":{"generics":["url"],"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",9,{"inputs":[{"name":"p"}],"output":{"generics":["url"],"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",9,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"to_socket_addrs","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",null,null],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",null,null],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures.",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID.",null,null],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",null,null],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",null,null],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",null,null],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"uuidversion"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"uuidvariant"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nil","","The 'nil UUID'.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",3,{"inputs":[{"name":"uuidversion"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",3,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,{"inputs":[{"name":"self"}],"output":{"generics":["uuidvariant"],"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["uuidversion"],"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",3,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",3,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and  counter portion of a V1 UUID.  If the supplied UUID is not V1, this  will return None",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",3,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"uuid"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"ValuesMut","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Trims the `VecMap` of any excess capacity.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r mut V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"retain","","Retains only the elements specified by the predicate.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"IntoIter"]]};
searchIndex["want"] = {"doc":"A Futures channel-like utility to signal when a value is wanted.","items":[[3,"Giver","want","An entity that gives a value when wanted.",null,null],[3,"Taker","","An entity that wants a value.",null,null],[3,"SharedGiver","","A cloneable `Giver`.",null,null],[3,"Closed","","The `Taker` has canceled its interest in a value.",null,null],[5,"new","","Create a new `want` channel.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"sharedgiver"}}],[11,"poll_want","","Poll whether the `Taker` has registered interest in another value.",1,{"inputs":[{"name":"self"}],"output":{"generics":["closed"],"name":"poll"}}],[11,"give","","Mark the state as idle, if the Taker currently is wanting.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_wanting","","Check if the `Taker` has called `want()` without parking a task.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_canceled","","Check if the `Taker` has canceled interest without parking a task.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"shared","","Converts this into a `SharedGiver`.",1,{"inputs":[{"name":"self"}],"output":{"name":"sharedgiver"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_wanting","","Check if the `Taker` has called `want()` without parking a task.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_canceled","","Check if the `Taker` has canceled interest without parking a task.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cancel","","Signal to the `Giver` that the want is canceled.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"want","","Signal to the `Giver` that a value is wanted.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"SharedGiver"],[3,"Giver"],[3,"Taker"],[3,"Closed"]]};
initSearch(searchIndex);
